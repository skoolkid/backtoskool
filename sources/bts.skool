; Copyright 2001, 2008-2019 Richard Dymond (rjdymond@gmail.com)

@start
@replace=/#BUG(?![A-Z])/#LINK:Bugs
@replace=/#FACT(?![A-Z])/#LINK:Facts
@replace=/#POKE(?![A-Z])/#LINK:Pokes
@replace=/#n\i/#N\1,,,1($)
@replace=/#nn\i/#N(\1,4,,1)($)
@replace=/#b\i/#N(\1,,,1)(0x)/ (byte)
@replace=/#w\i/#N(\1,4)/ (word)
@writer=:backtoskool.BackToSkoolAsmWriter
; Back to Skool disassembly
; https://skoolkit.ca
;
; Copyright 1985 Microsphere Computer Services Ltd (Back to Skool)
; Copyright 2001, 2008-2019 Richard Dymond (this disassembly)
@ofix+begin
;
; This disassembly contains fixes for the following bugs:
;   * Catapult animation
@ofix+end
@bfix+begin
;   * Rematerialising mouse
;   * Assembly sitting confusion
;   * Undethronable ERIC
;   * What's in the desk?
;   * Far left scrolling
;   * Hovering pellet
;   * Pellet through the wall
;   * Jump out of class
;   * Jump into the dinner hall
;   * Jump into the assembly hall
;   * One more jump bug
@bfix+end
@rfix+begin
;   * No blackboard tales
;   * Conker of mass destruction
@rfix+end
@ofix+begin
; See https://skoolkit.ca/disassemblies/back_to_skool/reference/bugs.html for
; full descriptions of these bugs.
@ofix+end
@bfix+begin
;
; This disassembly also contains fixes for the graphic glitches described at
; https://skoolkit.ca/disassemblies/back_to_skool/graphics/glitches.html
@bfix+end

@isub+begin
@org
@nowarn
c20631 LD HL,23808
 20634 LD SP,HL
 20635 LD C,L
 20636 LD E,L
 20637 JP 21922
@isub+end

; Clear character buffer #b214
;
; Used by the routine at #R21425. Clearing character buffer #b214 serves no
; useful purpose; it is not used until the game has started, and is properly
; initialised before then anyway.
;
; C #b0
@label=CCBUF214
c20640 LD HL,54784   ; {Fill character buffer #R54784(#b214) with zeroes
 20643 LD B,32       ;
*20645 LD (HL),C     ;
 20646 INC L         ;
 20647 DJNZ 20645    ; }
 20649 RET           ;

; POKE table
;
; Used by the routine at #R21408.
@label=POKETABLE
b20650 DEFW 24774    ; Change the instruction at #R24774 from #S/NOP/ to...
 20652 DEFB 2        ; ...#S/LD (BC),A/
 20653 DEFW 24816    ; Change the instruction at #R24816 from #S/XOR A/ to...
 20655 DEFB 26       ; ...#S/LD A,(DE)/
@ssub=DEFW 27129+1
 20656 DEFW 27130    ; Change the instruction at #R27129 from #S/LD B/,#n32
                     ; to...
 20658 DEFB 8        ; ...#S/LD B/,#n8
@ssub=DEFW 27426+2
 20659 DEFW 27428    ; Change the instruction at #R27426 from #S/LD BC/,#nn0
                     ; to...
 20661 DEFB 64       ; ...#S/LD BC/,#n16384
@ssub=DEFW 27437+1
 20662 DEFW 27438    ; Change the instruction at #R27437 from #S/LD C/,#n255
                     ; to...
 20664 DEFB 64       ; ...#S/LD C/,#n64

; Print a message centred across the entire screen
;
; Used by the routine at #R21152.
;
; A Message number
@label=PRINTMSG
c20665 LD HL,20480   ; #w20480=display file address
; This entry point is used by the routines at #R20896, #R21152, #R21425 and
; #R21664 with #REGhl holding the appropriate display file address.
*20668 PUSH HL       ; Save the display file address
 20669 LD L,A        ; #REGl=message number
 20670 BIT 7,A       ; Is the message number < #b128?
 20672 JR Z,20680    ; Jump if so
 20674 LD H,80       ; Point #REGhl at the appropriate entry in the message
                     ; address table at #R20724
 20676 LD E,(HL)     ; #REGe=LSB of the message address
 20677 INC HL        ; Point #REGhl at the MSB
 20678 JR 20684      ;
*20680 LD H,254      ; Use the regular message address table for message
                     ; numbers < #b128
 20682 LD E,(HL)     ; #REGe=LSB of the message address
 20683 INC H         ; Point #REGhl at the MSB
*20684 LD D,(HL)     ; Now #REGde=address of the message to print
 20685 LD HL,23296   ; {Prepare the message in screen-ready form in the buffer
 20688 PUSH HL       ; at #R23296
 20689 CALL 27419    ;
 20692 POP HL        ; }
 20693 POP DE        ; Restore the display file address to #REGde
*20694 PUSH DE       ; {Display the message on-screen
 20695 LD C,32       ;
 20697 LDIR          ;
 20699 POP DE        ;
 20700 INC D         ;
 20701 BIT 0,H       ;
 20703 JR NZ,20694   ; }
 20705 RET           ;

; Unused
s20706 DEFS 3

; Populate a row of the screen with machine code
;
@ignoreua
; Used by the routine at #R33204@start. Copies 256 bytes of machine code from
; the source (either the top row of the screen, or character buffers
; #b183-#b190) to the destination (the second or third row from the bottom of
; the screen), in eight 32-byte blocks.
;
@ignoreua
; HL Source (#w16384 or #w46848)
; DE Destination display file address (#w20640 or #w20672)
@label=MC2SCREEN
c20709 LD BC,32      ; There are 32 bytes per row of pixels
 20712 PUSH DE       ;
 20713 LDIR          ; Copy 32 bytes to the display file
 20715 LD L,B        ; #REGl=#b0
 20716 POP DE        ;
 20717 INC D         ; Point #REGde at the start of the next row of pixels
 20718 INC H         ; Point #REGhl at the next batch of 32 bytes to copy
 20719 BIT 3,D       ; Have we copied 8 rows of bytes yet?
 20721 JR Z,20709    ; Jump back if not
 20723 RET           ;

; Message address table
;
; Used by the routine at #R20665.
@label=MSGADDRS
b20724 DEFW 22014    ; Message #b244: '' (empty string)
 20726 DEFW 22176    ; Message #b246: 'None/Cursor/Kempston/Int2? (N,C,K or I)'
 20728 DEFW 22223    ; Message #b248: '{THE }CHARACTERS'
 20730 DEFW 22235    ; Message #b250: 'Press 'C' to change name'
 20732 DEFW 22000    ; Message #b252: 'Enter new name'

@defs=20734:162
i20734 DEFS 162

; Change a character's name
;
; Used by the routine at #R21152. Waits for keypresses while a character's name
; is being changed, and prints them as they are typed. Returns when ENTER is
; pressed.
;
; A Message number of the character's name (#b21-#b31)
@label=CHANGENAME
c20896 LD L,A        ; {Collect the start address of the message (the
 20897 LD H,254      ; character's name) into #REGhl
 20899 LD E,(HL)     ;
 20900 INC H         ;
 20901 LD D,(HL)     ;
 20902 EX DE,HL      ; }
 20903 LD BC,3072    ; #REGb=#b12, #REGc=#b0
*20906 LD (HL),C     ; {Blank out the current name (12 bytes)
 20907 INC HL        ;
 20908 DJNZ 20906    ; }
*20910 PUSH AF       ; Save the message number
 20911 LD HL,20544   ; #w20544=display file address at which to print the name
 20914 CALL 20668    ; Print the name built up so far
*20917 CALL 29154    ; {Wait for a keypress
 20920 JR Z,20917    ; }
 20922 CP 13         ; Set the zero flag if ENTER was pressed
 20924 LD B,A        ; #REGb=keypress code
 20925 JR NZ,20929   ; Jump unless ENTER was pressed
 20927 POP AF        ; Restore the message number to #REGa
 20928 RET           ; Return with the new name entered
; A key was pressed, and it wasn't ENTER. Place the ASCII code in the right
; slot of the message area corresponding to the character's name.
*20929 POP AF        ; Restore the message number to #REGa
 20930 LD L,A        ; {Collect the start address of the message (the
 20931 LD H,254      ; character's name) into #REGde
 20933 LD E,(HL)     ;
 20934 INC H         ;
 20935 LD D,(HL)     ; }
 20936 LD HL,11      ;
 20939 LD C,A        ; Store the message number in #REGc briefly
 20940 ADD HL,DE     ; Point #REGhl at the last byte in the message area for
                     ; the character's name
 20941 LD A,(HL)     ; Pick up this last byte in #REGa
 20942 AND A         ; Is the message area already full?
 20943 JR NZ,20953   ; Jump if so
 20945 EX DE,HL      ; #REGhl=start address of the message area
 20946 DEC HL        ;
*20947 INC HL        ; {Point #REGhl at the first unused slot in the message
 20948 LD A,(HL)     ; area
 20949 AND A         ;
 20950 JR NZ,20947   ; }
 20952 LD (HL),B     ; Place the letter just entered into this slot
*20953 LD A,C        ; Restore the message number to #REGa
 20954 JR 20910      ; Print the letter and collect another

; Guide a character onto the catwalk or off it
;
; Used by the routine at #R21152. Makes a character walk in from the left to
; the middle of the screen (at which point his name may be changed), or from
; the middle of the screen and off to the right.
@label=WALKONOFF
c20956 LD B,40       ; The character will walk 40 paces
*20958 PUSH BC       ;
 20959 LD H,210      ; We use ERIC's buffer at page #b210 to control the
                     ; character
 20961 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 20964 INC A         ; {#REGa=character's next animatory state
 20965 AND 251       ; }
 20967 BIT 0,A       ; Is the character midstride now?
 20969 JR NZ,20972   ; Jump if so
 20971 INC E         ; Otherwise move forward a pace
*20972 CALL 24880    ; Update the character's animatory state and location and
                     ; update the SRB
 20975 CALL 25248    ; Update the display
 20978 CALL 21419    ; Make a walking sound effect
 20981 LD C,100      ; {Wait a bit
*20983 DJNZ 20983    ;
 20985 DEC C         ;
 20986 JR NZ,20983   ; }
 20988 POP BC        ;
 20989 DJNZ 20958    ; Jump back until all 40 paces have been walked
 20991 RET           ;

@defs=20992:160
i20992 DEFS 160

; Display the cast of characters and change their names
;
; Used by the routine at #R21664. For each member of the cast: displays his
; name and title, walks him onto the screen, allows the user to change the
; name, and then walks him off the screen.
@label=GETNAMES
c21152 LD A,21       ; Message #R61267(#b21): 'MR WACKER'
*21154 PUSH AF       ; Save the message number
 21155 ADD A,80      ; #REGa=#b101-#b111 (message number for the character's
                     ; title)
 21157 LD HL,16512   ; #w16512=display file address
 21160 CALL 20668    ; Print the appropriate title (e.g. 'THE HEADMASTER')
 21163 LD A,244      ; Message #R22000(#b244): '' (empty string)
 21165 CALL 20665    ; Print this (thus removing 'Press 'C' to change name'
                     ; from the screen)
 21168 POP AF        ; Restore the message number for the character's name to
                     ; #REGa
 21169 PUSH AF       ; Save it again
 21170 LD HL,20544   ; #w20544=display file address
 21173 CALL 20668    ; Print the character's name there
 21176 POP AF        ; Restore the message number for the character's name to
                     ; #REGa
 21177 PUSH AF       ; Save it again
 21178 ADD A,224     ; {Point #REGhl at an entry in the table of animatory
 21180 LD L,A        ; states at #R21237
 21181 LD H,82       ; }
 21183 LD A,(HL)     ; #REGa=animatory state of the character standing, facing
                     ; right
 21184 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 21187 LD (HL),A     ; Fill in the animatory state
 21188 INC L         ; #REGl=#b1
 21189 LD (HL),124   ; Fill in the character's x-coordinate
 21191 CALL 20956    ; Walk the character to the middle of the screen
@nowarn
@ignoreua
*21194 LD HL,23611   ; {Reset bit 5 at #w23611, ready for future keypresses
 21197 RES 5,(HL)    ; }
 21199 LD A,250      ; Message #R22235(#b250): 'Press 'C' to change name'
 21201 CALL 20665    ; Print this message
*21204 CALL 29154    ; {Wait for a keypress
 21207 JR Z,21204    ; }
 21209 OR 32         ; Convert the keypress to lower case
 21211 CP 99         ; Was 'c' pressed?
 21213 JR NZ,21227   ; Jump if not
; The user pressed 'c' to change the character's name.
 21215 LD A,252      ; Message #R22000(#b252): 'Enter new name'
 21217 CALL 20665    ; Print this message
 21220 POP AF        ; Restore the message number for the character's name to
                     ; #REGa
 21221 PUSH AF       ; Save it again
 21222 CALL 20896    ; Change the character's name
 21225 JR 21194      ;
; The user pressed some key other than 'c'.
*21227 CALL 20956    ; Walk the character off screen
 21230 POP AF        ; Restore the message number for the character's name to
                     ; #REGa
 21231 INC A         ; Next character
 21232 CP 32         ; Have we done all the main game characters yet?
 21234 JR NZ,21154   ; Jump back if not
 21236 RET           ;

; Table of animatory states of the main characters
;
; Used by the routine at #R21152.
@label=ANIMSTATES
b21237 DEFB 208      ; #AS208=MR WACKER
 21238 DEFB 216      ; #AS216=MR WITHIT
 21239 DEFB 224      ; #AS224=MR ROCKITT
 21240 DEFB 232      ; #AS232=MR CREAK
 21241 DEFB 240      ; #AS240=MISS TAKE
 21242 DEFB 248      ; #AS248=ALBERT
 21243 DEFB 144      ; #AS144=BOY WANDER
 21244 DEFB 160      ; #AS160=ANGELFACE
 21245 DEFB 176      ; #AS176=EINSTEIN
 21246 DEFB 184      ; #AS184=HAYLEY
 21247 DEFB 128      ; #AS128=ERIC

@defs=21248:160
i21248 DEFS 160

; Do essential POKEs before the game starts
;
; Used by the routine at #R21664. Uses the table at #R20650 to do some POKEs
; that are required before the game starts.
;
; HL #R20650
@label=GAMEPOKES
@rsub=LD A,5         ; There are 5 POKEs to do
c21408 BIT 0,(HL)    ; Have we reached the end of the POKE table?
@rsub=!21410
 21410 RET NZ        ; Return if so
@rsub=*:
 21411 LD E,(HL)     ; {Pick up the address that needs to be POKEd in #REGde
 21412 INC L         ;
 21413 LD D,(HL)     ; }
 21414 INC L         ; Point #REGhl at the POKE operand
 21415 LDI           ; Do the POKE
@rsub=>DEC A         ; Are there any POKEs left to do?
@rsub=JR NZ,21411    ; Jump back if so
@rsub=RET
 21417 JR 21408      ; Jump back to do the next POKE

; Make a walking sound effect (yellow border)
;
; Used by the routines at #R21425 and #R20956.
@label=WALKSOUNDY
c21419 PUSH BC       ;
 21420 LD A,6        ; The border will be yellow
 21422 JP 29015      ; Make the sound effect

; Clear the screen and request the input method (keyboard, joystick, Int2)
;
; Used by the routine at #R21920.
@label=INPUTDEV
c21425 LD BC,640     ; {INK 0: PAPER 6 for the top 20 lines of screen
@nowarn
 21428 LD DE,22529   ;
@nowarn
 21431 LD HL,22528   ;
 21434 LD (HL),48    ;
 21436 LDIR          ; }
 21438 LD C,128      ; {INK 6: PAPER 6 for the bottom 4 lines of screen
 21440 LD (HL),54    ;
 21442 LDIR          ; }
 21444 CALL 21419    ; Make a short beep
 21447 LD H,64       ; {Clear the top two-thirds of the display file
 21449 LD D,H        ;
 21450 LD (HL),L     ;
 21451 LD B,16       ;
 21453 LDIR          ; }
*21455 LD B,160      ; {Clear the remainder of the screen, except the bottom 3
*21457 LD (HL),C     ; lines (which contain machine code)
 21458 INC L         ;
 21459 DJNZ 21457    ;
 21461 LD L,B        ;
 21462 INC H         ;
 21463 BIT 3,H       ;
 21465 JR Z,21455    ; }
 21467 LD A,128      ; {Set the column of the play area at the far left of the
 21469 LD (32767),A  ; screen to 128}
@rsub=!21472-21473
 21472 NOP           ;
 21473 CALL 20640    ; Clear character buffer #b214 (for no good reason)
 21476 LD A,246      ; Message #R22176(#b246): 'None/Cursor/Kempston/Int2?
                     ; (N,C,K or I)'
 21478 LD HL,16448   ; {Print this message
 21481 CALL 20668    ; }
@nowarn
@ignoreua
 21484 LD HL,23611   ; {Clear bit 5 at #w23611, ready for future keypresses
 21487 RES 5,(HL)    ; }
 21489 JP 21664      ;

; Unused
@rsub=DEFS 5
s21492 DEFS 2

; Keypress vector table for Int2
;
; Used by the routine at #R21664. These 10 bytes are copied to #R58624 in the
; keypress offset table (corresponding to keys 0-9) if Int2 is selected.
@label=INT2
b21494 DEFB 104      ; 0: Fire catapult
 21495 DEFB 80       ; 1: Left (fast)
 21496 DEFB 82       ; 2: Right (fast)
 21497 DEFB 86       ; 3: Down (fast)
 21498 DEFB 84       ; 4: Up (fast)
 21499 DEFB 104      ; 5: Fire
 21500 DEFB 80       ; 6: Left (fast)
 21501 DEFB 82       ; 7: Right (fast)
 21502 DEFB 86       ; 8: Down (fast)
 21503 DEFB 84       ; 9: Up (fast)

@defs=21504:160
i21504 DEFS 160

; Set the input method, change the characters' names, and start the game
;
; Continues from #R21425.
@label=INPUTDEV2
c21664 CALL 29154    ; {Wait for a keypress, and collect its ASCII code in
 21667 JR Z,21664    ; #REGa}
 21669 OR 32         ; Convert the keypress to lower case
 21671 CP 99         ; Was 'c' (Cursor) pressed?
 21673 JR Z,21705    ; Jump if so
 21675 CP 110        ; Was 'n' (None) pressed?
 21677 JR Z,21705    ; Jump if so
 21679 CP 107        ; Was 'k' (Kempston) pressed?
 21681 JR NZ,21690   ; Jump if not
 21683 LD A,1        ; {Set #R32748 to 1: using Kempston
 21685 LD (32748),A  ; }
 21688 JR 21705      ;
*21690 CP 105        ; Was 'i' (Int2) pressed?
 21692 JR NZ,21664   ; Jump back to wait for another keypress if not
 21694 LD HL,21494   ; {Copy the 10-byte table at #R21494 into the keypress
 21697 LD DE,58624   ; offset table at #R58624 if Int2 is being used
 21700 LD BC,10      ;
 21703 LDIR          ; }
; The input method has been established. Now prepare the screen for the cast of
; characters.
@ssub=LD HL,46848+1
*21705 LD HL,46849   ; {Draw a line (the catwalk) across the screen, and set
 21708 LD DE,18560   ; byte #b1 of each character's buffer (which holds the
 21711 LD B,32       ; character's x-coordinate) to a number between 1 and 32
 21713 LD A,255      ; (so that they are off-screen: the column of the play
*21715 LD (HL),B     ; area at the far left of the screen, stored at #R32767,
 21716 LD (DE),A     ; was set to 128 earlier on)
 21717 INC H         ;
 21718 INC E         ;
 21719 DJNZ 21715    ; }
@ssub=LD HL,53760+2
 21721 LD HL,53762   ; {Set byte #b2 of ERIC's character buffer (which holds
 21724 LD (HL),8     ; his y-coordinate) to 8; this will be the y-coordinate of
                     ; the characters as they proceed along the catwalk}
 21726 LD A,248      ; Message #R22223(#b248): 'THE CHARACTERS'
 21728 LD HL,16448   ; {Print this message
 21731 CALL 20668    ; }
 21734 CALL 21152    ; Display the main characters and let the user change
                     ; their names
; This entry point is used by the routine at #R21920.
*21737 LD HL,20650   ; {Do the POKEs specified by the table at #R20650
 21740 CALL 21408    ; }
 21743 JP 63189      ; Start the game

@ignoreua
; Prepare addresses #w23808 to #w24575
;
@ignoreua
; Used by the routine at #R33204@start. Copies 256 bytes from eight 32-byte
; segments. The routine is called three times with the values in #REGde and
; #REGhl shown below. The 24 32-byte segments are used later on as
; #LINK:CharacterBuffers(character buffers).
;
@ignoreua
; DE #w23808, #w24064 or #w24320
; H #b191, #b199 or #b207
; L #b0
@label=PREP93
c21746 LD A,8        ; There are 8 chunks of 32 bytes to copy
*21748 LD BC,32      ; {Copy 32 bytes
 21751 LDIR          ; }
 21753 INC H         ; {Point #REGhl at the next chunk of 32 bytes to copy
 21754 LD L,B        ; }
 21755 DEC A         ; Next chunk
 21756 JR NZ,21748   ; Jump back until all 8 chunks have been copied
 21758 RET           ;

@defs=21759:161
i21759 DEFS 161

; Count down from 9 to 0
;
@ignoreua
; Continues from the routine at #R33204@start. Counts down from 9 to 0, giving
; the user a chance to set the input method and change the characters' names
; before the game starts.
;
@ignoreua
; BC #w256
; DE #w33024
; HL #w23296
@label=COUNTDOWN
@ignoreua
c21920 LDIR          ; Copy 256 bytes from #w23296 to #w33024
@label=COUNTDOWN1
 21922 LD H,88       ; {INK 1: PAPER 1
 21924 LD B,3        ;
 21926 LD D,H        ;
 21927 INC E         ;
 21928 LD (HL),9     ;
 21930 LDIR          ; }
@nowarn
@ignoreua
 21932 LD HL,23611   ; {Reset bit 5 at #w23611, ready for future keypresses
 21935 RES 5,(HL)    ; }
 21937 EXX           ; {Point #REGhl' at the last byte of the graphic data for
 21938 LD HL,15823   ; the digit '9' in the ROM
 21941 EXX           ; }
*21942 LD DE,1084    ; {Wait approximately one second
*21945 DJNZ 21945    ;
 21947 DEC DE        ;
 21948 LD A,D        ;
 21949 OR E          ;
 21950 JR NZ,21945   ; }
@nowarn
@ignoreua
 21952 LD HL,23020   ; #w23020 is the attribute file address where the bottom
                     ; row of 'big pixels' will be drawn
@keep
 21955 LD DE,65496   ; #REGde=-40
 21958 LD C,8        ; There are 8 pixel rows per countdown digit
*21960 EXX           ;
 21961 BIT 7,L       ; Set the zero flag when #REGhl' hits #w15743
 21963 LD A,(HL)     ; Pick up a digit pixel row byte
 21964 DEC HL        ; Move #REGhl' to the next pixel row up
 21965 EXX           ;
 21966 JP Z,21737    ; Start the game if we've already printed '0'
 21969 LD B,8        ; There are 8 bits per pixel row
*21971 LD (HL),9     ; INK 1: PAPER 1 (blue) for a reset pixel
 21973 RLCA          ; Is this a reset pixel?
 21974 JR NC,21978   ; Jump if so
 21976 LD (HL),36    ; INK 4: PAPER 4 (green) for a set pixel
*21978 INC HL        ; Move #REGhl along to the next attribute file address
 21979 DJNZ 21971    ; Jump back until all 8 'big pixels' have been drawn
 21981 ADD HL,DE     ; Move #REGhl back 8 spaces and up one row of the
                     ; attribute file
 21982 DEC C         ; Next pixel row
 21983 JR NZ,21960   ; Jump back until all 8 pixel rows have been drawn
 21985 CALL 29012    ; Make a ticking sound effect
@nowarn
 21988 LD HL,23611   ;
 21991 BIT 5,(HL)    ; Reset the zero flag if a key was pressed
@ignoreua
 21993 RES 5,(HL)    ; Reset bit 5 at #w23611, ready for future keypresses
 21995 JP NZ,21425   ; Jump if a key was pressed
 21998 JR 21942      ; Wait roughly one second, then print the next digit

; Messages #b252 and #b244: 'Enter new name' and ''
;
; Used by the routine at #R21152. The end marker at #R22014 also serves as
; message #b244 ('': empty string), which is also used by the routine at
; #R21152.
@label=MSG252
t22000 DEFM "Enter new name"
@label=MSG244
 22014 DEFB 0                ; End marker

@defs=22015:160
i22015 DEFS 161

; Message #b246: 'None/Cursor/Kempston/Int2? (N,C,K or I)'
;
; Used by the routine at #R21425.
@label=MSG246
t22176 DEFM "None/Cursor/Kempston/Int2? (N,C,K or I)"
 22215 DEFB 0                                         ; End marker

; Message #b108: '{THE }BULLY'
;
; Used by the routine at #R21152.
@label=MSG108
t22216 DEFB 8        ; #R59923(#b8): 'THE '
 22217 DEFM "BULLY"
 22222 DEFB 0        ; End marker

; Message #b248: '{THE }CHARACTERS'
;
; Used by the routine at #R21664.
@label=MSG248
t22223 DEFB 8            ; #R59923(#b8): 'THE '
 22224 DEFM "CHARACTERS"
 22234 DEFB 0            ; End marker

; Message #b250: 'Press 'C' to change name'
;
; Used by the routine at #R21152.
@label=MSG250
t22235 DEFM "Press 'C' to change name"
 22259 DEFB 0                          ; End marker

; Message #b101: '{THE }HEADMASTER'
;
; Used by the routine at #R21152. 'MASTER' follows at #R22265.
@label=MSG101
t22260 DEFB 8        ; #R59923(#b8): 'THE '
 22261 DEFM "HEAD"

; Message #b17: 'MASTER'
;
; Used as a submessage of messages #R22432(#b102), #R22445(#b103) and
; #R22456(#b104). Message #R22260(#b101) also continues here.
@label=MSG017
t22265 DEFM "MASTER"
 22271 DEFB 0        ; End marker

@defs=22272:160
i22272 DEFS 160

; Message #b102: '{THE }GEOGRAPHY {MASTER}'
;
; Used by the routine at #R21152.
@label=MSG102
t22432 DEFB 8            ; #R59923(#b8): 'THE '
 22433 DEFM "GEOGRAPHY "
 22443 DEFB 17           ; #R22265(#b17): 'MASTER'
 22444 DEFB 0            ; End marker

; Message #b103: '{THE }SCIENCE {MASTER}'
;
; Used by the routine at #R21152.
@label=MSG103
t22445 DEFB 8          ; #R59923(#b8): 'THE '
 22446 DEFM "SCIENCE "
 22454 DEFB 17         ; #R22265(#b17): 'MASTER'
 22455 DEFB 0          ; End marker

; Message #b104: '{THE }HISTORY {MASTER}'
;
; Used by the routine at #R21152.
@label=MSG104
t22456 DEFB 8          ; #R59923(#b8): 'THE '
 22457 DEFM "HISTORY "
 22465 DEFB 17         ; #R22265(#b17): 'MASTER'
 22466 DEFB 0          ; End marker

; Message #b105: '{THE }HEADMISTRESS '
;
; Used by the routine at #R21152.
@label=MSG105
t22467 DEFB 8               ; #R59923(#b8): 'THE '
 22468 DEFM "HEADMISTRESS "
 22481 DEFB 0               ; End marker

; Message #b106: '{THE }CARETAKER'
;
; Used by the routine at #R21152.
@label=MSG106
t22482 DEFB 8           ; #R59923(#b8): 'THE '
 22483 DEFM "CARETAKER"
 22492 DEFB 0           ; End marker

; Message #b107: '{THE }TEARAWAY'
;
; Used by the routine at #R21152.
@label=MSG107
t22493 DEFB 8          ; #R59923(#b8): 'THE '
 22494 DEFM "TEARAWAY"
 22502 DEFB 0          ; End marker

; Message #b109: '{THE }SWOT'
;
; Used by the routine at #R21152.
@label=MSG109
t22503 DEFB 8        ; #R59923(#b8): 'THE '
 22504 DEFM "SWOT"
 22508 DEFB 0        ; End marker

; Message #b110: '{THE }HEROINE'
;
; Used by the routine at #R21152.
@label=MSG110
t22509 DEFB 8         ; #R59923(#b8): 'THE '
 22510 DEFM "HEROINE"
 22517 DEFB 0         ; End marker

; Message #b111: 'OUR HERO'
;
; Used by the routine at #R21152.
@label=MSG111
t22518 DEFM "OUR HERO"
 22526 DEFB 0          ; End marker

@defs=22527:769
; Attribute file
i22527 DEFS 769

@defs=23296:256
; Message graphic buffer
;
@ignoreua
; Used by the routine at #R20665 to prepare message graphic data before copying
; it to the screen. The first 64 bytes of this buffer (#w23296-#w23359) are
; also used by the routine at #R27144 to prepare message graphic data for the
; speech bubble text window.
@label=MSGBUFFER
b23296 DEFS 256

@defs=23552:9
; System variables and BASIC program area
i23552 DEFS 9

; System variables REPDEL and REPPER
i23561 DEFB 35       ; Set REPDEL to 35
 23562 DEFB 5        ; Set REPPER to 5

@defs=23563:48
i23563 DEFS 48

; System variable FLAGS
i23611 DEFB 8        ; Set bit 3 so that the keyboard is read in 'L' mode

@defs=23612:196
i23612 DEFS 196

; Deal with ERIC while he's falling (2)
;
; Continues from #R64460.
;
; A Descent table entry (see #R64460#tables)
; B #b0 if ERIC's facing left, #b128 if he's facing right
; C Same as #REGa
; D ERIC's y-coordinate
; E ERIC's x-coordinate
; H #b210 (ERIC)
@label=FALLING2
c23808 AND 15        ; Retain only bits 0-3 (the animatory state)
 23810 ADD A,B       ; Now #REGa=ERIC's new animatory state
 23811 LD B,A        ; Store this in #REGb for now
 23812 LD A,C        ; #REGa=descent table entry
 23813 RLCA          ; Is ERIC ascending (bit 7 of #REGc set)?
 23814 JR NC,23817   ; Jump if not
 23816 DEC D         ; Move ERIC up a level
*23817 RLCA          ; Is ERIC descending (bit 6 of #REGc set)?
 23818 JR NC,23821   ; Jump if not
 23820 INC D         ; Move ERIC down a level
*23821 RLCA          ; Should ERIC move forward one space (bit 5 of #REGc set)?
 23822 JR NC,23829   ; Jump if not
 23824 BIT 7,B       ; Is ERIC facing right?
 23826 JR NZ,23838   ; Jump if so
 23828 DEC E         ;
*23829 RLCA          ; Should ERIC move backwards one space (bit 4 of #REGc
                     ; set)?
 23830 JR NC,23839   ; Jump if not
 23832 DEC E         ;
 23833 BIT 7,B       ; Is ERIC facing right?
 23835 JR NZ,23839   ; Jump if so
 23837 INC E         ;
*23838 INC E         ; Now #REGe=ERIC's new x-coordinate, #REGd=ERIC's new
                     ; y-coordinate
*23839 LD A,B        ; #REGa=ERIC's new animatory state
 23840 JP 28172      ; Update ERIC's animatory state and location, update the
                     ; SRB make a sound effect, and scroll the screen if
                     ; necessary

; Deal with ERIC's flight from the saddle of the bike
;
; Used by the routine at #R63405 when bit 6 at #R32749 is set on its own by the
; routine at #R29194 because ERIC has hit a wall, a closed door, or the closed
; skool gate while standing on the saddle of the bike.
@label=OFFSADDLE
@ssub=LD A,(53760+1)
c23843 LD A,(53761)  ; #REGa=ERIC's x-coordinate
 23846 SUB 128       ; {Did ERIC hit the closed skool gate?
 23848 CP 16         ; }
 23850 SBC A,A       ; #REGa=#b255 if so, #b0 otherwise
 23851 ADD A,254     ; {#REGl=#R64460#dt253(#b253) if ERIC hit the skool gate,
 23853 LD L,A        ; #R64460#dt254(#b254) otherwise}
; This entry point is used by the routine at #R23859 with #REGl=#b255.
*23854 LD H,159      ; Now #REGhl points at the appropriate descent table
 23856 JP 64501      ; Begin the descent

; Deal with ERIC's descent from the top-floor window
;
; Used by the routine at #R63405 when bit 5 at #R32749 is set by the routine at
; #R64259 because ERIC has jumped out of the top-floor window.
@label=BIGFALL
c23859 LD L,255      ; Use descent table number #R64460#dt255(#b255)
 23861 JR 23854      ; Begin the descent

; 'T' pressed - throw away the water pistol
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'T' is
; pressed.
@label=THROW
c23863 LD A,(32747)  ; #R32747 holds the inventory flags
 23866 AND 24        ; Has ERIC got the water pistol (bit 3 or 4 set)?
 23868 RET Z         ; Return if not
 23869 LD A,39       ; #AS39: animatory state of ERIC bending over
@nowarn
 23871 LD HL,23877   ; {Place #R23877 into #R32727 to take care of ERIC from
 23874 JP 57642      ; this point on, update ERIC's animatory state, and update
                     ; the SRB}
; This is where we deal with ERIC after 'T' has been pressed:
@label=*
*23877 LD HL,32747   ; {Reset bits 3 and 4 of the inventory flags at #R32747,
 23880 LD A,(HL)     ; thus dropping the water pistol
 23881 AND 231       ;
 23883 LD (HL),A     ; }
 23884 JP 31746      ; Print the inventory

; 'J' pressed - jump
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'J' or
; 'L' is pressed.
@label=JUMP
c23887 CALL 28240    ; Is ERIC on a staircase?
 23890 RET C         ; Return if so
 23891 LD HL,32763   ; {Set bit 0 of ERIC's status flags at #R32763, triggering
 23894 INC (HL)      ; a jump to #R23907 next time we deal with ERIC}
 23895 LD H,210      ; #b210=ERIC
 23897 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 23900 AND 128       ; {#REGa=#AS7(#b7 or #b135): animatory state of ERIC
 23902 ADD A,7       ; jumping}
 23904 DEC D         ; ERIC will rise one level
 23905 JR 23937      ; Update ERIC's animatory state and location and update
                     ; the SRB

; Deal with ERIC when he's jumping
;
; Called by the routine at #R63405 when bit 0 at #R32763 is set (by the routine
; at #R23887). Checks whether ERIC has jumped onto a plant pot, up to the safe,
; or up to the drinks cabinet.
@label=JUMPING
c23907 LD HL,32755   ; #R32755 holds ERIC's main action timer
 23910 DEC (HL)      ; Is it time for ERIC to land?
 23911 RET NZ        ; Return if not
@ssub=LD L,32763%256
 23912 LD L,251      ; {Reset all of ERIC's status flags at #R32763 (ERIC is no
 23914 LD (HL),0     ; longer doing anything special)}
 23916 LD H,210      ; #b210=ERIC
 23918 CALL 63878    ; Set the zero flag if ERIC is in the same position as a
                     ; plant pot
 23921 LD A,2        ; Bit 1 set at #R32763: make the routine at #R63405
                     ; inspect ERIC's other status flags at #R32749; bit 1 set
                     ; at #R32749: ERIC is standing on a plant pot
 23923 JR NZ,23940   ; Jump if ERIC's not in the same position as a plant pot
; This entry point is used by the routine at #R24263 with #REGa=0.
*23925 LD DE,32763   ; {Set or reset the appropriate status flags at #R32763
 23928 LD (DE),A     ; }
@ssub=LD E,32749%256
 23929 LD E,237      ; {Set or reset the appropriate status flags at #R32749
 23931 LD (DE),A     ; }
 23932 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
*23935 AND 128       ; Restore ERIC's animatory state to #AS0 (facing left) or
                     ; #AS128 (facing right) as appropriate
; This entry point is used by the routine at #R23887.
*23937 JP 62231      ; Update ERIC's animatory state and update the SRB
; ERIC has jumped, but not onto a plant pot.
*23940 LD L,A        ; #REGl=#b2
 23941 LD A,(HL)     ; #REGa=ERIC's y-coordinate
 23942 SUB L         ;
 23943 JR Z,23953    ; Jump if ERIC jumped while on the top floor
*23945 LD H,210      ; #b210=ERIC
 23947 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 23950 INC D         ; Increment ERIC's y-coordinate, bringing him back to the
                     ; floor
 23951 JR 23935      ; Restore ERIC's animatory state and update the SRB
; ERIC jumped while on the top floor. Up to the drinks cabinet?
*23953 LD L,A        ; #REGl=#b0
 23954 LD A,(HL)     ; #REGa=ERIC's animatory state
 23955 INC L         ; {Now #REGa=x-coordinate of ERIC's raised arm
 23956 RLCA          ;
 23957 SBC A,A       ;
 23958 ADD A,A       ;
 23959 CPL           ;
 23960 INC A         ;
 23961 ADD A,(HL)    ; }
 23962 LD HL,32756   ; #R32756 holds the door/window status flags
 23965 CP 190        ; Did ERIC jump up to the drinks cabinet?
 23967 JR C,23996    ; Jump if not
 23969 BIT 5,(HL)    ; Is the drinks cabinet door open?
 23971 JR Z,23945    ; Just bring ERIC back to the floor if not
; ERIC has jumped up to the drinks cabinet, and it's open. But has he got the
; water pistol?
@ssub=LD L,32747%256
 23973 LD L,235      ; #REGhl=#R32747 (which holds the inventory flags)
 23975 BIT 4,(HL)    ; Has ERIC already got a sherry-filled water pistol?
 23977 JR NZ,23945   ; Jump if so
 23979 BIT 3,(HL)    ; Has ERIC got a water-filled water pistol?
 23981 JR Z,23945    ; Jump if not
 23983 SET 4,(HL)    ; Signal: ERIC now has a sherry-filled water pistol
 23985 CALL 31746    ; Print the inventory
 23988 LD HL,534     ; {Make a sound effect
 23991 CALL 62150    ; }
 23994 JR 23945      ; Bring ERIC back to the floor
; ERIC has jumped, but not onto a plant pot or up to the drinks cabinet. Up to
; the safe?
*23996 CP 81         ; Did ERIC jump up to the safe in WACKER's study?
 23998 JR NZ,23945   ; Jump if not
@ssub=LD L,32747%256
 24000 LD L,235      ; #REGhl=#R32747 (which holds the inventory flags)
 24002 BIT 0,(HL)    ; Has ERIC got the safe key?
 24004 JR Z,23945    ; Just bring ERIC back to the floor if not
; ERIC has jumped up to the safe, and he has the safe key. Celebration time.
@ssub=LD L,32734%256
 24006 LD L,222      ; {Set #R32734 to 1 so the game will be restarted instead
 24008 INC (HL)      ; of going into demo mode}
 24009 LD A,200      ; {Add 2000 to the score and print it
 24011 CALL 29621    ; }
 24014 XOR A         ; #REGa=#R65007(#b0): 'ONTO THE NEXT YEAR'
 24015 CALL 32478    ; Print this in the lesson box and ring the bell
@ssub=LD HL,56364-1
 24018 LD HL,56363   ; {Play the up-a-year tune
 24021 CALL 24485    ; }
 24024 JP 63189      ; Restart the game

; Unused
@rsub=!24027
s24027 DEFB 0

; Compare blackboard contents with combinations
;
; Used by the routine at #R24175. Compares the bike and storeroom combinations
; with what ERIC has just written on a blackboard. Unchains the bike or gives
; ERIC the storeroom key if there is a match.
;
; H #b127
@label=CHKCOMBOS
c24028 LD D,H        ; #REGd=#b127
@ssub=LD L,32763%256
 24029 LD L,251      ; {Reset all of ERIC's status flags at #R32763 now that
 24031 LD (HL),0     ; he's no longer writing on the board}
@ssub=LD L,32668%256
 24033 LD L,156      ; #REGhl=#R32668 (combinations)
 24035 LD BC,2052    ; #REGb=8 (4 numbers, 4 letters), #REGc=4
*24038 RES 7,(HL)    ; {Reset bit 7 of each combination number/letter; bit 7
 24040 INC L         ; will be set later if there is a match with what ERIC
 24041 DJNZ 24038    ; wrote on the board}
@ssub=LD L,32728%256
 24043 LD L,216      ; #REGhl=#R32728 (which holds the identifier of the
                     ; blackboard ERIC wrote on)
 24045 LD L,(HL)     ; {Point #REGhl at byte 1 of the relevant blackboard
 24046 INC L         ; buffer (bytes 2-5 hold the first 4 characters ERIC
                     ; wrote)}
 24047 LD B,C        ; #REGb=4
*24048 INC L         ; {Return unless at least four letters were written on the
 24049 BIT 7,(HL)    ; board by ERIC
 24051 RET NZ        ;
 24052 DJNZ 24048    ; }
 24054 EX DE,HL      ; Point #REGde at the last byte of the blackboard buffer
@ssub=LD L,32668%256
*24055 LD L,156      ; #REGhl=#R32668 (combinations)
 24057 LD B,8        ; 4 numbers, 4 letters
 24059 LD A,(DE)     ; #REGa=ASCII code of the character written on the board
 24060 CP 96         ; Is it upper case?
 24062 JR C,24066    ; Jump if so
 24064 SUB 32        ; Make lower case characters upper case
*24066 CP (HL)       ; Does the character written on the board match the
                     ; combination number/letter?
 24067 JR Z,24073    ; Jump if so
 24069 INC L         ; Point to the next combination number/letter
 24070 DJNZ 24066    ;
 24072 RET           ;
*24073 DEC E         ; Point to the next character written on the board
 24074 SET 7,(HL)    ; Signal: matching character
 24076 DEC C         ; Next combination letter/number
 24077 JR NZ,24055   ; Jump back to check the remaining numbers/letters
@ssub=LD L,32668%256
 24079 LD L,156      ; #REGhl=#R32668 (combinations)
 24081 LD B,4        ; There are 4 digits in the bike combination
 24083 LD A,(HL)     ; Pick up the first digit
*24084 AND (HL)      ; {Bit 7 of #REGa will remain set if all four written
 24085 INC L         ; characters matched up with the bike combination digits
 24086 DJNZ 24084    ; }
 24088 RLCA          ; Was there a match?
 24089 JR NC,24114   ; Jump if not
; ERIC has written the bike combination number on a blackboard. Free the bike
; if it's still chained up.
@ssub=LD HL,54016+1
 24091 LD HL,54017   ; #REGh=#b211 (bike), #REGl=#b1
 24094 LD A,(HL)     ; #REGa=bike's x-coordinate
 24095 CP 224        ; Is the bike already free?
 24097 RET NZ        ; Return if so
 24098 LD (HL),100   ; Place the bike at x-coordinate 100
 24100 LD HL,57600   ; {Alter UDG references in the play area to release the
 24103 CALL 27672    ; bike from the tree}
*24106 LD A,100      ; {Add 1000 to the score and print it
 24108 CALL 29621    ; }
 24111 JP 62401      ; Print the inventory and make a sound effect
; The first four characters written on the board by ERIC didn't match the bike
; combination digits. What about the storeroom combination letters?
*24114 LD A,(HL)     ; Pick up the first combination letter
 24115 LD B,4        ; There are 4 letters in the storeroom combination
*24117 AND (HL)      ; {Bit 7 of #REGa will remain set if all four written
 24118 INC L         ; characters matched up with the storeroom combination
 24119 DJNZ 24117    ; letters}
 24121 RLCA          ; Was there a match?
 24122 RET NC        ; Return if not
@ssub=LD L,32747%256
 24123 LD L,235      ; #REGhl=#R32747 (which holds the inventory flags)
 24125 BIT 1,(HL)    ; Has ERIC already got the storeroom key?
 24127 RET NZ        ; Return if so
 24128 SET 1,(HL)    ; Otherwise give ERIC the key to the storeroom
 24130 JR 24106      ; Add 1000 to the score, print the inventory, and make a
                     ; sound effect

; Unused
@rsub=!24132
s24132 DEFB 0

; 'W' pressed - write on a blackboard
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'W' is
; pressed.
@label=WRITE
c24133 LD H,210      ; #b210=ERIC
 24135 CALL 26453    ; Collect info about the board ERIC's standing at (if any)
 24138 RET C         ; Return if ERIC's not standing at a blackboard
 24139 LD HL,32728   ; {Copy the blackboard identifier (#b84, #b90, #b96, #b102
 24142 LD (HL),B     ; or #b108) from #REGb to #R32728}
 24143 DEC L         ; {While ERIC is writing on the board, #R32727 will be
 24144 LD (HL),L     ; used to store the ASCII code of the last character
                     ; written; initialise this with something other than #b13
                     ; (ENTER)}
 24145 LD L,B        ; Point #REGhl at the first byte of the blackboard's
                     ; buffer, which usually holds the number of the next clean
                     ; pixel column
 24146 LD (HL),1     ; ERIC will start writing at pixel column 1 (regardless of
                     ; what's already been written on the board)
 24148 INC L         ; {#REGa=number of the character who last wrote on this
 24149 LD A,(HL)     ; board, or 0 if it's clean}
 24150 LD (HL),210   ; Signal: ERIC wrote on this board
 24152 LD B,4        ; There are 4 digits or letters in the bike and storeroom
                     ; combinations
 24154 CPL           ; {#REGa=#b128 if the board is clean, #b0 otherwise
 24155 AND 128       ; }
*24157 INC L         ; {Prepare 4 spaces in bytes 2-5 of the blackboard buffer
 24158 LD (HL),A     ; for combination letters/numbers, with bit 7 set if the
 24159 DJNZ 24157    ; board is clean}
@ssub=LD L,32763%256
 24161 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 24163 LD (HL),16    ; Set bit 4: ERIC is writing on a blackboard
; This entry point is used by the routine at #R24175.
*24165 LD H,210      ; #b210=ERIC
 24167 CALL 25012    ; Update the SRB for ERIC's current animatory state
 24170 OR 7          ; #REGa=#AS7(#b7/#b135): ERIC with his arm up (as if
                     ; writing on a board)
 24172 JP 62231      ; Update ERIC's animatory state and location and update
                     ; the SRB

; Deal with ERIC when he's writing on a blackboard
;
; This routine is called by the routine at #R63405 when bit 4 at #R32763 is set
; (by the routine at #R24133).
@label=WRITING
c24175 LD HL,32755   ; #R32755 holds ERIC's main action timer
 24178 DEC (HL)      ; Is it time to deal with ERIC yet?
 24179 RET NZ        ; Return if not
 24180 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 24183 LD A,(HL)     ; #REGa=ERIC's animatory state
 24184 RRCA          ; Is ERIC's arm up?
 24185 JR NC,24204   ; Jump if not
 24187 CALL 62221    ; Make a sound effect and update the SRB
 24190 LD HL,32727   ; {Copy the code of the last key pressed from #R32727 to
 24193 LD A,(HL)     ; #REGa}
 24194 CP 13         ; Was ENTER pressed?
 24196 JP Z,24028    ; Compare ERIC's scribblings with the bike and storeroom
                     ; combinations if so
 24199 LD A,86       ; Message #R60638(#b86): DON'T TOUCH BLACKBOARDS
 24201 JP 63640      ; Make any teacher within range give ERIC lines
*24204 CALL 29118    ; Get the ASCII code of the last keypress in #REGa
 24207 RET Z         ; Return if no keys were pressed
 24208 LD HL,32727   ; {Store this keypress code in #R32727 (so it can be
 24211 LD (HL),A     ; collected on the next pass through this routine)}
 24212 INC L         ; {#REGl=identifier of the board ERIC is writing on (#b84,
 24213 LD L,(HL)     ; #b90, #b96, #b102 or #b108)}
 24214 INC L         ; Point #REGhl at byte 1 of the blackboard buffer
 24215 LD B,4        ; There are 4 slots available in the blackboard buffer
*24217 INC L         ; Point #REGhl at the next slot
 24218 BIT 7,(HL)    ; Is this slot in the blackboard buffer available to store
                     ; the keypress?
 24220 JR NZ,24226   ; Jump if so
 24222 DJNZ 24217    ; Otherwise check the remaining slots
 24224 JR 24227      ; Jump if there were no remaining slots
*24226 LD (HL),A     ; Store the keypress code in the blackboard buffer
*24227 CP 13         ; Set the zero flag if ENTER was pressed
 24229 LD H,210      ; #b210=ERIC
 24231 CALL NZ,26516 ; Write a character on the board unless ENTER was pressed
 24234 JR 24165      ; Raise ERIC's arm and update the SRB

; Unused
@rsub=!24236
s24236 DEFB 0

; Deal with ERIC when he's firing the catapult, hitting or kissing
;
; This routine is called by the routine at #R63405 when bit 5 at #R32763 is set
; (by the routine at #R24247).
@label=MIDFHK
c24237 LD HL,32755   ; #R32755 holds ERIC's main action timer
 24240 DEC (HL)      ; Is it time to deal with ERIC yet?
 24241 RET NZ        ; Return if not
 24242 LD (HL),5     ; Reset the main action timer to 5
 24244 JP 57679      ; Jump to the routine address stored in #R32727, which
                     ; will deal with the next phase of ERIC's animation

; Signal that ERIC is firing the catapult, hitting, or kissing
;
; Used by the routines at #R24263, #R24296 and #R24348.
;
; A ERIC's next animatory state (bit 7 reset)
@label=STARTFHK
c24247 LD HL,32755   ; {Initialise ERIC's main action timer at #R32755 to 5
 24250 LD (HL),5     ; }
@ssub=LD L,32763%256
 24252 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 24254 LD (HL),32    ; Set bit 5: ERIC is firing, hitting or kissing
 24256 POP HL        ; {#REGhl=address of the instruction after the #S/CALL/
 24257 LD (32727),HL ; #R24247 that got us here; store this at #R32727 for
                     ; collection later by the routine at #R24237}
 24260 JP 57650      ; Begin the fire/hit/kiss action

; 'H' pressed - hit
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'H' is
; pressed.
@label=HIT
c24263 CALL 28240    ; Is ERIC on a staircase?
 24266 RET C         ; Return if so
 24267 LD A,8        ; #AS8: ERIC raising his fist
 24269 CALL 24247    ; Adjust ERIC's animatory state, update the SRB, and
                     ; return to #R24272 (below) when it's time to deal with
                     ; ERIC again
@label=*
*24272 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 24275 LD A,(HL)     ; #REGa=ERIC's animatory state
 24276 RRCA          ; Is ERIC raising his fist (#REGa=#AS8(#b8/#b136))?
 24277 JP NC,30752   ; If so, raise ERIC's fist fully now and check for victims
 24280 LD A,97       ; Message #R60921(#b97): DON'T HIT YOUR MATES
 24282 CALL 63640    ; Make any nearby teachers give ERIC lines
 24285 LD A,8        ; #AS8: ERIC lowering his fist
; This is where the routine at #R24296 ought to enter:
@label=LOWERARM
 24287 CALL 24247    ; Adjust ERIC's animatory state, update the SRB, and
                     ; return to #R24290 (below) when it's time to deal with
                     ; ERIC again
; This entry point is used by the routine at #R24348.
*24290 XOR A         ; #REGa=0 (prepare to clear all status flags)
 24291 JP 23925      ; Clear all of ERIC's status flags now that he's finished
                     ; firing, hitting or kissing, update his animatory state
                     ; and update the SRB

; Unused
@rsub=!24294
s24294 DEFS 2

; 'F' pressed - fire catapult
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'F' or
; '0' (zero) is pressed.
@label=FIRE
c24296 CALL 57935    ; Give up right now if the catapult pellet's buffer is
                     ; already in use
 24299 LD A,10       ; #AS10: ERIC raising the catapult
 24301 CALL 24247    ; Adjust ERIC's animatory state, update the SRB, and
                     ; return to #R24304 (below) when it's time to deal with
                     ; ERIC again
@label=*
*24304 LD A,2        ; Message #R64578(#b2): NO CATAPULTS
 24306 CALL 63640    ; Make any nearby teachers give ERIC lines
 24309 LD A,11       ; #AS11: ERIC firing the catapult
 24311 CALL 24247    ; Adjust ERIC's animatory state, update the SRB, and
                     ; return to #R24314 (below) when it's time to deal with
                     ; ERIC again
@label=*
*24314 LD B,214      ; ERIC's catapult pellet uses buffer #b214
 24316 CALL 63861    ; Prepare the pellet's buffer and make a catapult sound
                     ; effect
 24319 LD A,11       ; #AS11: ERIC (still) firing the catapult
 24321 CALL 24247    ; Adjust ERIC's animatory state, update the SRB, and
                     ; return to #R24324 (below) when it's time to deal with
                     ; ERIC again
@label=*
*24324 LD A,10       ; #AS10: ERIC lowering the catapult
@nowarn
@ofix=JR 24287       ; Update ERIC's animatory state and update the SRB
 24326 JR 24289      ; This is a #BUG#fire(bug); it should be #S/JR/ #R24287

; Make HAYLEY hit ERIC
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of HAYLEY's buffer by the routine at #R24348 when ERIC has
; tried to steal one kiss too many.
;
; A #IF({asm}<3)[#b95 (MSB of the address of this routine),MSB of the address
; . of this routine]
; H #b209 (HAYLEY)
@label=HITERIC
c24328 LD (32755),A  ; Place a large value into ERIC's main action timer at
                     ; #R32755 to ensure that he will not have time to escape
                     ; HAYLEY's fist
 24331 CALL 25012    ; Update the SRB for HAYLEY's current animatory state
 24334 LD L,20       ; {Store HAYLEY's current animatory state in byte #b20 of
 24336 LD (HL),A     ; her buffer for the time being}
 24337 OR 7          ; #REGa=#AS63(#b63/#b191): HAYLEY with her arm up (as if
                     ; hitting ERIC)
 24339 CALL 30534    ; Update HAYLEY's animatory state, update the SRB, and
                     ; return to #R24342 (below) next time
@label=*
*24342 CALL 29993    ; Knock ERIC over
 24345 JP 30650      ; Restore HAYLEY's original animatory state and update the
                     ; SRB

; 'K' pressed - kiss
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'K' is
; pressed.
;
; A ERIC's animatory state
; D ERIC's y-coordinate
; E ERIC's x-coordinate
@label=KISS
c24348 LD HL,53504   ; Point #REGhl at byte #b0 of HAYLEY's buffer
 24351 XOR (HL)      ; {Are ERIC and HAYLEY facing the same way?
 24352 RLCA          ; }
 24353 JR NC,24378   ; Jump if so
 24355 BIT 2,(HL)    ; Is HAYLEY standing up?
 24357 JR NZ,24378   ; Jump if not
 24359 LD A,(HL)     ; #REGa=HAYLEY's animatory state
 24360 RLCA          ; {#REGa=x-coordinate of the position two spaces in front
 24361 SBC A,A       ; of HAYLEY
 24362 ADD A,A       ;
 24363 CPL           ;
 24364 ADD A,A       ;
 24365 INC L         ;
 24366 ADD A,(HL)    ; }
 24367 CP E          ; Does ERIC's x-coordinate match this?
 24368 JR NZ,24378   ; Jump if not
 24370 INC L         ; #REGl=#b2
 24371 LD A,(HL)     ; #REGa=HAYLEY's y-coordinate
*24372 SUB D         ; {Jump if ERIC's y-coordinate does not match HAYLEY's, or
 24373 JR NZ,24378   ; ERIC has used up all his kisses}
 24375 LD L,18       ; {Set the zero flag if there is no uninterruptible
 24377 CP (HL)       ; subcommand routine address in HAYLEY's buffer (#REGa=0)}
; At this point the zero flag is set if HAYLEY is kissable (i.e. ERIC and
; HAYLEY are standing and facing each other at close proximity, and ERIC hasn't
; already used up all his kisses), and reset otherwise.
*24378 LD A,1        ; #AS1: ERIC midstride
@nowarn
 24380 LD HL,53796   ; At #R53796 lies a #S/RET/ instruction
 24383 JP NZ,57642   ; Jump if HAYLEY is not kissable at this time
 24386 LD A,(32738)  ; #R32738 holds HAYLEY's kiss counter
 24389 AND A         ; Has ERIC used up all his kisses?
 24390 JR NZ,24395   ; Jump if not
@nowarn
 24392 LD HL,24328   ; #R24328: hit ERIC
@ssub=LD (53504+17),HL
*24395 LD (53521),HL ; Place the appropriate uninterruptible subcommand routine
                     ; address (#R24328: hit ERIC, or #R53796: do nothing) into
                     ; bytes #b17 and #b18 of HAYLEY's buffer
 24398 JR Z,24372    ; Make HAYLEY hit ERIC if he's used up all his kisses
; ERIC has scored a kiss.
 24400 SUB 7         ; Subtract 7 from the kiss counter
 24402 JR NC,24405   ; Jump if that doesn't take it below zero
 24404 XOR A         ; Set it to zero otherwise
*24405 LD (32738),A  ; Store the new kiss count at #R32738
 24408 LD HL,(32743) ; #R32743 holds the lines total (divided by 10)
@keep
 24411 LD BC,65436   ; #REGbc=-100
 24414 XOR A         ;
 24415 ADD HL,BC     ; Subtract 1000 from the lines total
 24416 JR C,24420    ; Jump if the lines total (in #REGhl) is still positive
 24418 LD H,A        ; {Otherwise set #REGhl=0
 24419 LD L,A        ; }
*24420 LD (32743),HL ; Decrease ERIC's lines total by 1000 (or to 0)
 24423 CALL 29643    ; Print the number of lines
 24426 LD H,209      ; #b209=HAYLEY
 24428 CALL 25012    ; Update the SRB for HAYLEY's current animatory state and
                     ; location
 24431 LD L,20       ; {Save HAYLEY's current animatory state in byte #b20 of
 24433 LD (HL),A     ; her buffer for later retrieval}
 24434 DEC L         ; {Save HAYLEY's current x-coordinate in byte #b19 of her
 24435 LD (HL),E     ; buffer for later retrieval}
 24436 LD L,1        ; {Set HAYLEY's x-coordinate to 224 (out of sight) briefly
 24438 LD (HL),224   ; }
 24440 LD H,210      ; #b210=ERIC
 24442 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 24445 LD L,1        ; Point #REGhl at byte #b1 of ERIC's buffer
 24447 RLCA          ; Is ERIC facing right (bit 7 set)?
 24448 JR C,24452    ; Jump if so
 24450 DEC (HL)      ;
 24451 DEC (HL)      ;
*24452 INC (HL)      ; Move ERIC one space forward for the snog (which pushes
                     ; ERIC through the closed skool gate if he kisses HAYLEY
                     ; from behind it; this is a #BUG#kiss(bug))
 24453 LD A,15       ; #AS15: ERIC and HAYLEY kissing
 24455 CALL 24247    ; Adjust ERIC's animatory state, update the SRB, and
                     ; return to #R24458 (below) next time
@label=*
*24458 CALL 62404    ; Make a sound effect
@ssub=LD HL,53504+19
 24461 LD HL,53523   ; Point #REGhl at byte #b19 of HAYLEY's buffer
 24464 LD E,(HL)     ; Pick up HAYLEY's pre-kiss x-coordinate in #REGe
 24465 LD L,2        ; Point #REGhl at byte #b2 of HAYLEY's buffer
 24467 LD D,(HL)     ; #REGd=HAYLEY's y-coordinate
 24468 CALL 30653    ; Restore HAYLEY's pre-kiss coordinates and animatory
                     ; state and update the SRB
 24471 LD H,210      ; #b210=ERIC
 24473 JP 24290      ; Detach ERIC from HAYLEY's embrace

; Unused
@rsub=!24476
s24476 DEFB 0

; Play a tune
;
; Used by the routine at #R62910. The main entry point is used to play the
; theme tune.
@label=PLAYTUNE
@nowarn
@ignoreua
c24477 LD HL,23611   ; {Reset bit 5 at #w23611, clearing the record of any
 24480 RES 5,(HL)    ; keypresses before the tune starts}
@ssub=LD HL,56385-1
@nowarn
 24482 LD HL,56384   ; The theme tune data starts at #R56385
; This entry point is used by the routine at #R23907 with #REGhl=#R56364-1 (the
; up-a-year tune data starts at #R56364).
*24485 DI            ; Disable interrupts
*24486 INC HL        ; Point #REGhl at the next tune datum
 24487 LD A,(HL)     ; Pick it up
 24488 INC A         ; Is it an end-of-section marker?
 24489 JR NZ,24496   ; Jump if not
 24491 INC HL        ; {Point #REGhl at the first datum in the next section
 24492 LD A,(HL)     ;
 24493 INC HL        ;
 24494 LD H,(HL)     ;
 24495 LD L,A        ; }
*24496 LD A,(HL)     ; #REGa=tune datum
 24497 AND A         ; Have we reached the end of the tune?
 24498 JP Z,62169    ; Jump if so
; A non-zero tune datum has been found, meaning the tune is not finished yet.
 24501 PUSH HL       ; Save the tune data table pointer
 24502 RRCA          ; Set the carry flag if we should pause briefly
 24503 LD B,A        ; Copy the right-rotated tune datum to #REGb
 24504 JR NC,24514   ; Jump unless we should pause briefly
 24506 LD D,15       ; {Pause briefly
*24508 DEC E         ;
 24509 JR NZ,24508   ;
 24511 DEC D         ;
 24512 JR NZ,24508   ; }
*24514 AND 7         ; 0<=#REGa<=7
 24516 LD C,A        ; #REGc=border colour for this note
 24517 ADD A,A       ; {Point #REGhl at an entry in the note duration/pitch
@ssub=ADD A,24560%256
 24518 ADD A,240     ; data table at #R24560
 24520 LD L,A        ;
@ssub=LD H,24560/256
@rsub=LD H,24560/256 ;
@rsub=JR NC,24523
@rsub=INC H          ; }
 24521 LD H,95       ; }
@rsub=MSBOK:
 24523 LD A,B        ; #REGa=original tune datum rotated right one bit
 24524 RRCA          ; {Obtain the note frequency parameter in #REGe and the
 24525 RRCA          ; note duration parameter in #REGhl
 24526 RRCA          ;
 24527 AND 15        ;
 24529 LD B,A        ;
 24530 LD E,(HL)     ;
 24531 INC L         ;
 24532 LD A,(HL)     ;
 24533 LD HL,0       ;
*24536 ADD HL,DE     ;
 24537 DJNZ 24536    ;
 24539 RES 0,L       ;
 24541 LD E,A        ; }
*24542 LD A,C        ; {Produce a note
 24543 OUT (254),A   ;
 24545 XOR 16        ;
 24547 LD C,A        ;
 24548 LD B,E        ;
*24549 DJNZ 24549    ;
 24551 DEC HL        ;
 24552 DEC L         ;
 24553 LD A,H        ;
 24554 OR L          ;
 24555 JR NZ,24542   ; }
 24557 POP HL        ; Restore the tune data table pointer to #REGhl
 24558 JR 24486      ; Pick up the next tune datum

; Note duration and pitch data for tunes
;
; Used by the routine at #R24477.
@label=PITCHDATA
b24560 DEFB 47,196   ; #b47*#b196=#w9212
 24562 DEFB 53,174   ; #b53*#b174=#w9222
 24564 DEFB 60,154   ; #b60*#b154=#w9240
 24566 DEFB 63,145   ; #b63*#b145=#w9135
 24568 DEFB 71,129   ; #b71*#b129=#w9159
 24570 DEFB 80,114   ; #b80*#b114=#w9120
 24572 DEFB 90,101   ; #b90*#b101=#w9090 (unused)
 24574 DEFB 95,96    ; #b95*#b96=#w9120

; Superimpose sprite tiles onto a tile of the play area
;
; Used by the routine at #R24684. Checks through #REGb characters, starting at
; character #REGh. If any part of a character's sprite needs to be printed at
; the row and column specified by #REGde, the appropriate UDG is located and
; superimposed onto the contents of the buffer at #R57712, which on the first
; call to this routine contains the appropriate skool UDG (the background).
;
; B Number of characters to consider
; D Row of play area (0-20)
; E Column of play area (0-191)
; H Number of the first character to consider
@label=GETTILE
c24576 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 24578 LD A,E        ; #REGa=column of play area (0-191) under consideration
 24579 SUB (HL)      ; Subtract the character's x-coordinate
 24580 CP 3          ; Sprites are three character squares wide
 24582 JR NC,24652   ; Jump if no part of this character's sprite is in this
                     ; column
 24584 DEC L         ; #REGl=#b0
 24585 BIT 7,(HL)    ; Is the character facing left?
 24587 JR Z,24592    ; Jump if so
 24589 CPL           ; {'Flip' the number in #REGa, so 0 becomes 2, 1 remains
 24590 ADD A,3       ; 1, and 2 becomes 0 (i.e. #REGa becomes 2-#REGa)}
*24592 ADD A,A       ; {Now #REGc=0 if the front of the character is in this
 24593 ADD A,A       ; column, 4 if it's the middle, or 8 if it's the back
 24594 LD C,A        ; }
 24595 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 24597 LD A,D        ; #REGa=row of play area (0-20) under consideration
 24598 SUB (HL)      ; Subtract the character's y-coordinate
 24599 CP 4          ; Sprites are 4 character squares tall
 24601 JR NC,24652   ; Jump if no part of this character's sprite is in this
                     ; row
 24603 ADD A,C       ; 0<=#REGa<=11 (index of the sprite tile at this row and
                     ; column, where 0=top-front, 4=top-middle, 8=top-back,
                     ; 11=bottom-back)
 24604 ADD A,215     ; #b215<=#REGa<=#b226
 24606 EXX           ; {Set #REGh' to the number of the page containing the UDG
 24607 LD H,A        ; reference for the sprite tile
 24608 EXX           ; }
 24609 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 24611 LD A,(HL)     ; #REGa=character's animatory state
 24612 OR 128        ; Set bit 7 to obtain the LSB of the address that holds
                     ; the sprite tile UDG reference
 24614 EXX           ;
 24615 LD L,A        ; #b128<=#REGl'<=#b255 (#b215<=#REGh'<=#b226)
 24616 LD A,(HL)     ; #REGa=sprite tile UDG reference (#b73-#b255)
 24617 AND A         ; Is this tile the 'null' UDG (a blank square)?
 24618 JR Z,24651    ; Jump if so (no need to superimpose it)
 24620 LD E,A        ; #REGe'=UDG reference (#b73-#b255)
 24621 LD A,L        ; #REGa=(normalised) animatory state (#b128-#b255)
 24622 CP 208        ; #AS208=animatory state of MR WACKER, the first teacher
 24624 EXX           ;
 24625 LD A,(HL)     ; #REGa=character's (true) animatory state (#b0-#b255)
 24626 EXX           ;
 24627 LD D,183      ; Point #REGde' at the graphic data at page #b183 onwards
                     ; (for animatory states #b0-#b79 and #b128-#b207)
 24629 JR C,24633    ; Jump unless we're dealing with animatory states
                     ; #b80-#b127 or #b208-#b255 (teachers, ALBERT, and water
                     ; fired from the pistol)
 24631 LD D,199      ; Point #REGde' at the graphic data at page #b199 onwards
                     ; (for animatory states #b80-#b127 and #b208-#b255)
*24633 LD HL,57712   ; Point #REGhl' at the UDG back buffer
 24636 RLCA          ; Push the character's 'direction' bit into the carry flag
 24637 JR C,24656    ; Jump if the character is facing right
 24639 EX DE,HL      ;
*24640 LD A,(DE)     ; #REGa=byte already in the UDG buffer
 24641 OR (HL)       ; Superimpose the sprite tile byte
 24642 INC H         ; Point #REGhl' at the outline mask for this tile byte
 24643 AND (HL)      ; #S/AND/ with this mask
 24644 INC H         ; Point #REGhl' at the next sprite tile byte
 24645 LD (DE),A     ; Place the resultant byte back in the UDG buffer
 24646 INC E         ; Move #REGde' along the UDG buffer
 24647 BIT 3,E       ; Have we done all 8 bytes yet?
 24649 JR Z,24640    ; Jump back if not
*24651 EXX           ;
*24652 INC H         ; Next game character
 24653 DJNZ 24576    ; Jump back until all characters have been done
 24655 RET           ;
; The character is facing right, so we have to produce a mirror image of the
; graphic data.
*24656 LD B,182      ; Page #R46592(#b182) contains mirror images of #b0-#b255
*24658 LD A,(DE)     ; #REGa=sprite tile byte
 24659 LD C,A        ; {#REGa=mirror image of this byte
 24660 LD A,(BC)     ; }
 24661 OR (HL)       ; Superimpose what's already in the UDG buffer
 24662 LD (HL),A     ; Put the result so far back in the UDG buffer
 24663 INC D         ; {#REGa=outline mask for this sprite tile byte
 24664 LD A,(DE)     ; }
 24665 LD C,A        ; {#REGa=mirror image of this mask
 24666 LD A,(BC)     ; }
 24667 AND (HL)      ; #S/AND/ it with what's in the UDG buffer
 24668 LD (HL),A     ; Place the result in the UDG buffer
 24669 INC D         ; Next sprite tile byte
 24670 INC L         ; Next byte of the UDG buffer
 24671 BIT 3,L       ; Have we done all 8 bytes yet?
 24673 JR Z,24658    ; Jump back if not
 24675 JR 24651      ;

; Unused
@rsub=!24677
s24677 DEFS 7

; Print a tile
;
; Used by the routines at #R25026, #R25080 and #R25248. Copies a tile of the
; play area into the back buffer at #R57712, superimposes character sprite
; tiles as appropriate, and then copies the resultant tile to the screen. Also
; sets the corresponding attribute byte.
; .
; The play area graphic data is laid out across pages #b128 to #b181:
; .
; #TABLE(default,centre,centre,:w)<wrapalign>
; { =h Page(s)      | =h Bytes     | =h Contents }
; { #b128-#b135     | #b0-#b255    | Skool graphic data }
; { #b136-#b143     | #b0-#b255    | Skool graphic data }
; { #b144-#b151     | #b0-#b255    | Skool graphic data (except bytes #b1,
;                                    #b11, #b21, #b30) }
; { #b152-#b159     | #b0-#b249    | Skool graphic data (except bytes
;                                    #b224-#b239) }
; { =r3 #b160-#b180 | #b0-#b143    | LSBs of tile base addresses }
; {                   #b144-#b179  | Tile MSB indicator bit-pairs (see below) }
; {                   #b180-#b251  | Tile BRIGHT/PAPER attribute nibbles }
; { #b181           | #b0-#b191    | Q (#b0<=Q<=#b143; see below) }
; TABLE#
; .
; For the tile at skool coordinates (X,Y) (0<=X<=191, 0<=Y<=20), the column
; pointer Q (#b0<=Q<=#b143) is collected from byte X of page #R46336(#b181).
; Then Q and Y together determine the location of the attribute byte, and where
; to look up the base address of the tile graphic data.
; .
; The BRIGHT/PAPER bits for row Y are arranged in a set of 144 nibbles in bytes
; #b180-#b251 of page Y+#b160, from bits 7-4 of byte #b180 (nibble #b0) to bits
; 3-0 of byte #b251 (nibble #b143). Q is the index of the nibble that
; corresponds to the tile at (X,Y). In other words, the BRIGHT/PAPER bits for
; the skool location (X,Y) can be found in byte #b180+INT(Q/2) of page Y+#b160:
; bits 4-7 if Q is even, bits 0-3 if Q is odd.
; .
; By default, the INK is 0 (black). However, if the BRIGHT/PAPER bits are all
; 0, this indicates a tile with non-black INK, of which there are normally
; four: the three shields in MR WACKER's study (which are red, blue, and red),
; and the top of the entrance to the girls' skool (which is blue). (However,
; when the left study door is open - which never happens in an unhacked game -
; there is a fifth tile with non-black INK: the top of the left study doorway,
; which is magenta.) When a tile has non-black INK, the BRIGHT/PAPER bits are
; taken from byte #b180+INT(Q/2) of page Y+#b161 (i.e. the attribute byte
; corresponding to the skool location (X,Y+1)); then the INK is 2 (red) if Q is
; even, 1 (blue) if 4|Q-1, or 3 (magenta) if 4|Q-3.
; .
; So much for the attributes. The LSB of the base address of the tile graphic
; data is found in byte Q of page Y+#b160. Information on which MSB (#b128,
; #b136, #b144 or #b152) applies is arranged in a set of 144 bit-pairs in bytes
; #b144-#b179 of page Y+#b160. Bit-pair #b0 is bits 7 and 3 of byte #b144;
; bit-pair #b1 is bits 6 and 2; bit-pair #b2 is bits 5 and 1; bit-pair #b3 is
; bits 4 and 0; bit-pair #b4 is bits 7 and 3 of byte #b145; and so on up to
; bit-pair #b143, which is bits 4 and 0 of byte #b179. Q is the index of the
; bit-pair that corresponds to the tile at (X,Y). In other words, the tile MSB
; indicator for the skool location (X,Y) can be found in byte #b144+INT(Q/4) of
; page Y+#b160: bits 7 and 3 if 4|Q, 6 and 2 if 4|Q-1, 5 and 1 if 4|Q-2, 4 and
; 0 if 4|Q-3. The bit-pair forms a 2-digit binary number from 0 to 3; if we
; call this P, then the MSB is #b128+8P.
; .
; To summarise, then, the attributes and graphic data for the tile at skool
; location (X,Y) can be found thus, where Q=PEEK(#R46336+X):
; .
; #TABLE(default,,:w)<wrapalign>
; { =h Data      | =h Look at... }
; { BRIGHT/PAPER | Nibble Q of bytes #b180-#b251 in page Y+#b160 (or Y+#b161 if
;                  nibble Q in page Y+#b160 is 0) }
; { INK          | 0 if nibble Q in page Y+#b160 is not 0; 1, 2 or 3 as
;                  explained above otherwise }
; { Tile LSB     | Byte Q in page Y+#b160 }
; { Tile MSB     | Bit-pair Q of bytes #b144-#b179 in page Y+#b160 }
; TABLE#
;
; H Screen row number (0-20)
; L Screen column number (0-31)
@label=PRINTTILE
c24684 PUSH HL       ;
 24685 LD A,H        ; {Compute the appropriate attribute file address in
 24686 AND 24        ; #REGbc and the appropriate display file address in
 24688 LD D,A        ; #REGde
 24689 LD A,H        ;
 24690 RRCA          ;
 24691 RRCA          ;
 24692 RRCA          ;
 24693 LD H,A        ;
 24694 AND 224       ;
 24696 ADD A,L       ;
 24697 LD E,A        ;
 24698 LD C,A        ;
 24699 LD A,H        ;
 24700 AND 3         ;
 24702 ADD A,88      ;
 24704 LD B,A        ;
 24705 SET 6,D       ; }
 24707 EX DE,HL      ; {Place the display file address on the stack and get
 24708 EX (SP),HL    ; (row,col) back in #REGhl}
 24709 LD A,(32767)  ; #REGa=leftmost column of the play area on screen (0-160)
 24712 ADD A,L       ; {#REGl=X: column of the play area corresponding to the
 24713 LD L,A        ; character square under consideration (0-191)}
 24714 PUSH HL       ; Push the skool coordinates (X,Y) onto the stack
 24715 LD A,H        ; #REGa=Y (0-20)
 24716 LD H,181      ; #REGhl=#R46336+X
 24718 LD L,(HL)     ; #REGl=Q (#b0<=Q<=#b143)
 24719 ADD A,160     ; {#REGh=Y+#b160
 24721 LD H,A        ; }
 24722 LD E,L        ; #REGe=Q (#b0<=Q<=#b143)
 24723 LD A,L        ; #REGa=Q
 24724 RRA           ; Is Q odd?
 24725 JR C,24754    ; Jump if so
; Q (the contents of (#R46336+X)) is even, which means the PAPER colour and
; BRIGHT status can be found in bits 4-7 of byte #b180+Q/2 in page Y+#b160. At
; this point #REGa=Q/2.
 24727 ADD A,180     ; #b180<=#REGa<=#b251
 24729 LD L,A        ; Point #REGhl at the attribute byte
 24730 LD A,(HL)     ; Pick up the attribute byte in #REGa
 24731 AND 240       ; The PAPER colour and BRIGHT status are in bits 4-7
 24733 RR A          ; Shift them into bits 3-6
 24735 JR NZ,24774   ; Jump if this character square has INK 0
; We are dealing with one of the few character squares with non-black INK. In
; this case the PAPER colour and BRIGHT status can be found in bits 4-7 (since
; Q is even) of byte #b180+Q/2 in page Y+#b161.
 24737 INC H         ; Point #REGhl at the attribute byte in page Y+#b161
 24738 LD A,(HL)     ; Pick up the attribute byte in #REGa
 24739 AND 240       ; The PAPER colour and BRIGHT status are in bits 4-7
 24741 RRA           ; Shift them into bits 3-6
*24742 LD L,A        ; #REGl holds the PAPER colour and BRIGHT status
 24743 LD A,E        ; #REGa=Q (#b0<=Q<=#b143)
 24744 AND 3         ; #REGa=0, 1, 2 or 3
 24746 JR NZ,24750   ; Jump if the INK is blue, red, or magenta
 24748 ADD A,2       ; A=2: INK 2 (red)
*24750 OR L          ; #S/OR/ on the PAPER colour and BRIGHT status
 24751 DEC H         ; #REGh=Y+#b160
 24752 JR 24774      ; Jump forward to transfer the attribute byte in #REGa
                     ; onto the screen
; Q (the contents of (#R46336+X)) is odd, which means the PAPER colour and
; BRIGHT status can be found in bits 0-3 of byte #b180+(Q-1)/2 in page Y+#b160.
; At this point #REGa=(Q-1)/2.
*24754 ADD A,180     ; #b180<=#REGa<=#b251
 24756 LD L,A        ; Point #REGhl at the attribute byte
 24757 LD A,(HL)     ; Pick up the attribute byte in #REGa
 24758 AND 15        ; The PAPER colour and BRIGHT status are in bits 0-3
 24760 JR NZ,24771   ; Jump if this character square has INK 0
; We are dealing with one of the few character squares with non-black INK. In
; this case the PAPER colour and BRIGHT status can be found in bits 0-3 (since
; Q is odd) of byte #b180+(Q-1)/2 in page Y+#b161.
 24762 INC H         ; Point #REGhl at the attribute byte in page Y+#b161
 24763 LD A,(HL)     ; Pick up the attribute byte in #REGa
 24764 AND 15        ; The PAPER colour and BRIGHT status are in bits 0-3
 24766 ADD A,A       ; {Shift the PAPER and BRIGHT bits from bits 0-3 to bits
 24767 ADD A,A       ; 3-6
 24768 ADD A,A       ; }
 24769 JR 24742      ; Jump back to fill in the INK bits
*24771 ADD A,A       ; {Shift the PAPER and BRIGHT bits from bits 0-3 to bits
 24772 ADD A,A       ; 3-6, and set the INK to 0
 24773 ADD A,A       ; }
*24774 NOP           ; Do nothing (during the startup sequence), or poke the
                     ; attribute byte onto the screen (this instruction is set
                     ; to #S/LD (BC),A/ before the game starts; see #R21408)
; The appropriate attribute byte has been poked onto the screen. Now to find
; the appropriate tile graphic data.
 24775 LD L,E        ; #REGl=Q (#b0<=Q<=#b143), #REGh=Y+#b160
 24776 LD E,(HL)     ; #REGe=LSB of the base address of the tile graphic data
 24777 LD A,136      ; #REGa=10001000
 24779 SRL L         ; {Shift #REGa right (Q #S/AND/ 3) times
 24781 JR NC,24784   ;
 24783 RRCA          ;
*24784 SRL L         ;
 24786 JR NC,24790   ;
 24788 RRCA          ;
 24789 RRCA          ; }
*24790 LD C,A        ; #REGc=10001000, 01000100, 00100010 or 00010001
 24791 LD A,L        ; {Point #REGhl at the byte containing the MSB indicator
 24792 ADD A,144     ; bit-pair: #REGh=Y+#b160,
 24794 LD L,A        ; #b144<=#REGl=#b144+INT(Q/4)<=#b179}
 24795 LD A,C        ; #REGa=10001000, 01000100, 00100010 or 00010001
 24796 AND (HL)      ; Keep only the bits of the bit-pair
; The base page of the tile graphic data depends on the bits set in #REGa.
 24797 LD D,128      ;
 24799 CP 16         ; Are any of bits 4-7 in #REGa set?
 24801 JR C,24805    ; Jump if not
 24803 LD D,144      ;
*24805 AND 15        ; Are any of bits 0-3 in #REGa set?
 24807 JR Z,24811    ; Jump if not
 24809 SET 3,D       ;
; Now #REGd=#b128, #b136, #b144 or #b152, and #REGde points at the first byte
; of the graphic data for the tile at skool coordinates (X,Y).
*24811 LD HL,57712   ; {We're going to copy the tile into the 8-byte back
 24814 LD B,8        ; buffer at #R57712}
*24816 XOR A         ; Use a blank graphic byte (during startup), or collect
                     ; the tile graphic byte (this instruction is set to #S/LD
                     ; A,(DE)/ before the game starts; see #R21408)
 24817 INC D         ; Point #REGde at the next graphic byte
 24818 LD (HL),A     ; Copy the graphic byte into the back buffer
 24819 INC L         ; Move to the next slot in the back buffer
 24820 DJNZ 24816    ; Jump back until the entire tile has been copied
; The appropriate play area tile has been copied into the back buffer at
; #R57712. Now it's time to superimpose game character sprite tiles (if any).
 24822 LD H,183      ; #b183=character number of little girl no. 1
 24824 POP DE        ; #REGd=Y (0-20), #REGe=X (0-191)
 24825 LD A,(32767)  ; #REGa=leftmost column of the play area on screen (0-160)
 24828 CP 120        ; This x-coordinate is roughly halfway between the tree
                     ; and the gate
 24830 JR C,24843    ; Jump if columns 144 onwards (girls' skool + half the
                     ; girls' playground) are off-screen
 24832 LD B,7        ; 7 little girls
 24834 CALL 24576    ; Superimpose graphic bytes for the little girls if
                     ; necessary
 24837 LD H,198      ; #b198=character number of little boy no. 9
 24839 LD B,17       ; 2 little boys, 11 main characters, plus the objects
                     ; using character buffers #b211-#b214
 24841 JR 24862      ;
*24843 CP 80         ; This is the x-coordinate of the assembly hall stage (or
                     ; thereabouts)
 24845 JR C,24858    ; Jump if columns 104 onwards (everything to the right of
                     ; the tree, roughly) are off-screen
 24847 LD B,3        ; 3 little girls (#b183-#b185)
 24849 CALL 24576    ; Superimpose graphic bytes for these little girls if
                     ; necessary
 24852 LD H,193      ; #b193=character number of little boy no. 4
 24854 LD B,22       ; 7 little boys, 11 main characters, plus the objects
                     ; using character buffers #b211-#b214
 24856 JR 24862      ;
*24858 LD H,190      ; #b190=character number of little boy no. 1
 24860 LD B,25       ; All 10 little boys, 11 main characters, plus the objects
                     ; using character buffers #b211-#b214
*24862 CALL 24576    ; Superimpose graphic bytes for these characters if
                     ; necessary
 24865 LD HL,57712   ; The 8-byte back buffer at #R57712 now contains the tile
                     ; to be copied to the screen
 24868 POP DE        ; Retrieve the appropriate display file address in #REGde
; This entry point is used by the routine at #R26941.
*24869 LD B,8        ; There are 8 bytes per character square
*24871 LD A,(HL)     ; {Transfer the graphic bytes to the screen
 24872 LD (DE),A     ;
 24873 INC L         ;
 24874 INC D         ;
 24875 DJNZ 24871    ; }
 24877 RET           ;

; Unused
@rsub=!24878
s24878 DEFS 2

; Update a character's animatory state and location and update the SRB
;
; Used by many routines. Sets the new animatory state and location of a
; character, and updates the #R32512(screen refresh buffer) (SRB) accordingly.
;
; A New animatory state
; D New y-coordinate (3-17)
; E New x-coordinate (0-189)
; H Character number (#b183-#b214)
@label=UPDATEAS
c24880 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 24882 LD (HL),D     ; Fill in the new y-coordinate
 24883 DEC L         ; #REGl=#b1
 24884 LD (HL),E     ; Fill in the new x-coordinate
 24885 DEC L         ; #REGl=#b0
 24886 LD (HL),A     ; Fill in the new animatory state
 24887 LD C,A        ; #REGc=new animatory state
; This entry point is used by the routine at #R25012 to update the SRB for the
; current animatory state and location of the character.
*24888 LD A,(32767)  ; #REGa=leftmost column of the play area on screen (0-160)
 24891 SUB 3         ;
 24893 JR C,24897    ;
 24895 CP E          ;
 24896 RET NC        ; Return if the character is entirely off-screen to the
                     ; left
*24897 ADD A,34      ;
 24899 CP E          ;
 24900 RET C         ; Return if the character is entirely off-screen to the
                     ; right
 24901 SUB 32        ; {#REGa=#REGe-(#R32767): the character's relative
 24903 CPL           ; x-coordinate (-2 to 31)
 24904 ADD A,E       ; }
 24905 LD B,3        ; The sprites are 3 tiles wide
 24907 PUSH HL       ;
 24908 LD H,215      ;
 24910 CP 254        ; Is the character either fully on-screen or walking off
                     ; it to the right?
 24912 JR C,24924    ; Jump if so
 24914 LD H,219      ;
 24916 DEC B         ; #REGb=2
 24917 INC A         ; Is the character one-third off (two-thirds on) at the
                     ; left?
 24918 JR Z,24924    ; Jump if so
 24920 LD H,223      ;
 24922 DEC B         ; #REGb=1 (the character is one-third on-screen at the
                     ; left)
 24923 XOR A         ;
*24924 LD E,A        ; #REGe=leftmost column of the screen occupied by the
                     ; character's sprite (0-31)
 24925 SUB 30        ;
 24927 JR C,24932    ; Jump if the character is one- or two-thirds off-screen
                     ; to the right
 24929 CPL           ;
 24930 ADD A,B       ;
 24931 LD B,A        ;
; Now #REGb holds a value (1, 2 or 3) equal to the number of columns of the
; screen occupied by the character's sprite.
*24932 LD L,C        ; #REGl=animatory state
 24933 LD C,0        ;
 24935 BIT 7,L       ; Is the character facing left?
 24937 JR Z,24945    ; Jump if so
 24939 LD C,248      ;
 24941 LD A,182      ;
 24943 SUB H         ;
 24944 LD H,A        ;
; Now #REGh holds #b215, #b219 or #b223 - the page containing the UDG reference
; for the tile on the top row of the leftmost column of the sprite that is
; on-screen. #REGc is 0 if the character is facing left, or -8 if he's facing
; right.
*24945 SET 7,L       ; Point #REGhl at the UDG reference for the sprite tile
 24947 LD A,E        ; #REGa=leftmost column of the screen occupied by the
                     ; sprite (0-31)
 24948 EXX           ;
 24949 AND 7         ;
 24951 ADD A,120     ;
 24953 LD L,A        ;
 24954 LD H,225      ;
 24956 LD C,(HL)     ; Pick up a byte from the table at #R57720
 24957 EXX           ;
; Now #REGc' holds #b1, #b2, #b4, #b8, #b16, #b32, #b64 or #b128. The bit set
; in #REGc' corresponds to the bit that needs to be set in the relevant byte of
; the screen refresh buffer (SRB).
 24958 LD A,E        ; #REGa=leftmost column of the screen occupied by the
                     ; sprite
 24959 RRCA          ; {Set #REGa to the LSB of the first byte of the SRB that
 24960 RRCA          ; needs to be modified
 24961 RRCA          ;
 24962 AND 3         ;
 24964 ADD A,D       ;
 24965 ADD A,D       ;
 24966 ADD A,D       ;
 24967 ADD A,D       ; }
 24968 EXX           ;
 24969 LD B,A        ; Copy this LSB to #REGb'
 24970 LD H,127      ; The SRB starts at page #b127 (#R32512)
; Here we enter a loop to set the appropriate bits in the SRB.
*24972 EXX           ;
 24973 LD E,0        ; #REGe will count up to 4 (the number of rows occupied by
                     ; a sprite)
*24975 LD A,(HL)     ; Pick up the sprite tile UDG reference in #REGa
 24976 AND A         ; Is this the 'null' UDG (blank square)?
 24977 JR Z,24989    ; Jump if so
 24979 LD A,E        ; #REGa=sprite tile row number (0-3)
 24980 ADD A,A       ; {Multiply by 4 (the number of bytes of the SRB that
 24981 ADD A,A       ; correspond to one row of the screen)}
 24982 EXX           ;
 24983 ADD A,B       ; {Point #REGhl' at the relevant byte of the SRB
 24984 LD L,A        ; }
 24985 LD A,C        ; The bit set in #REGa is the bit that needs setting in
                     ; the SRB byte
 24986 OR (HL)       ; {Set the bit in the SRB
 24987 LD (HL),A     ; }
 24988 EXX           ;
*24989 INC H         ; Point #REGhl at the UDG reference for the next tile in
                     ; the sprite (one row down)
 24990 INC E         ; Next row down in this column of the sprite
 24991 BIT 2,E       ; Have we done all four rows yet?
 24993 JR Z,24975    ; Jump back if not
 24995 DEC B         ; Have we done all the columns occupied by the sprite yet?
 24996 JR Z,25009    ; Jump if so
 24998 LD A,H        ; {Point #REGhl at the UDG reference for the tile in the
 24999 ADD A,C       ; top row of the next column of the sprite (#REGc=0 if the
 25000 LD H,A        ; character's facing left, -8 if facing right)}
 25001 EXX           ;
 25002 RRC C         ; Move the SRB marker bit one place to the right (possibly
                     ; wrapping round to bit 7)
 25004 JR NC,24972   ; Jump back if there are still bits to be set in the
                     ; current SRB byte
 25006 INC B         ; Otherwise move to the next SRB byte
 25007 JR 24972      ;
*25009 POP HL        ; Restore the character number to #REGh (#REGl=#b0)
 25010 RET           ;

; Unused
@rsub=!25011
s25011 DEFB 0

; Update the SRB for a character's current animatory state and location
;
; Used by many routines. Updates the #R32512(screen refresh buffer) (SRB) for a
; character's current animatory state and location. Returns with the
; character's current coordinates in #REGde and animatory state in #REGa.
;
; H Character number (#b183-#b214)
@label=UPDATESRB
c25012 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 25014 LD D,(HL)     ; #REGd=character's y-coordinate (0-17)
 25015 DEC L         ; #REGl=#b1
 25016 LD E,(HL)     ; #REGe=character's x-coordinate (0-189)
 25017 DEC L         ; #REGl=#b0
 25018 LD C,(HL)     ; #REGc=character's animatory state
 25019 PUSH DE       ; Save the character's coordinates briefly
 25020 CALL 24888    ; Set the appropriate bits in the SRB for the character's
                     ; current animatory state and location
 25023 POP DE        ; Restore the character's coordinates to #REGde
 25024 LD A,(HL)     ; #REGa=character's animatory state
 25025 RET           ;

; Scroll the screen left 8 columns
;
; Used by the routines at #R28160 and #R62910.
@label=LSCROLL8
c25026 LD B,8        ; 8 columns will be scrolled on
*25028 PUSH BC       ; Save the column counter
@nowarn
 25029 LD HL,22529   ; {First shift the attributes one place to the left
@nowarn
 25032 LD DE,22528   ;
 25035 LD BC,671     ;
 25038 LDIR          ; }
 25040 CALL 63553    ; Scroll the display file one character square to the left
 25043 INC A         ; {Adjust the leftmost column of the play area now on
 25044 LD (32767),A  ; screen (held at #R32767)}
 25047 LD HL,5151    ; #REGh=20 (bottom row of the screen), #REGl=31 (column at
                     ; the far right)
*25050 PUSH HL       ;
 25051 CALL 24684    ; Print the play area character square at row #REGh,
                     ; column #REGl=31
 25054 POP HL        ;
 25055 DEC H         ; Next row up
 25056 JP P,25050    ; Jump back until all 21 squares in the column have been
                     ; printed
 25059 POP BC        ; Restore the column counter to #REGb
 25060 DJNZ 25028    ; Jump back until 8 columns have been scrolled on
; The screen has been scrolled left 8 columns. Check whether any of the minor
; characters may be teleported without us noticing.
 25062 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 25065 LD B,5        ; {5 little boys, starting with #b193=little boy no. 4
 25067 LD H,193      ; }
 25069 CP 120        ; Is the skool gate in the middle of the screen?
 25071 JR Z,25134    ; Jump if so (to consider teleporting little boys 4-8)
 25073 CP 80         ; Is the boys' skool door in the middle of the screen?
 25075 RET NZ        ; Return if not
 25076 LD H,190      ; #b190=little boy no. 1
 25078 JR 25132      ; Consider teleporting little boys 1-3

; Scroll the screen right 8 columns
;
; Used by the routine at #R28160.
@label=RSCROLL8
c25080 LD B,8        ; 8 columns will be scrolled on
*25082 PUSH BC       ; Save the column counter
@nowarn
 25083 LD HL,23198   ; {First shift the attributes one place to the right
@nowarn
 25086 LD DE,23199   ;
 25089 LD BC,671     ;
 25092 LDDR          ; }
 25094 CALL 63561    ; Scroll the display file one character square to the
                     ; right
 25097 DEC A         ; {Adjust the leftmost column of the play area now on
 25098 LD (32767),A  ; screen (held at #R32767)}
 25101 LD HL,5120    ; #REGh=20 (bottom row of the screen), #REGl=0 (column at
                     ; the far left)
*25104 PUSH HL       ;
 25105 CALL 24684    ; Print the play area character square at row #REGh,
                     ; column #REGl=0
 25108 POP HL        ;
 25109 DEC H         ; Next row up
 25110 JP P,25104    ; Jump back until all 21 squares in the column have been
                     ; printed
 25113 POP BC        ; Restore the column counter to #REGb
 25114 DJNZ 25082    ; Jump back until 8 columns have been scrolled on
; The screen has been scrolled right 8 columns. Check whether any of the minor
; characters may be teleported without us noticing.
 25116 LD A,(32767)  ; #REGa=leftmost column of the play area now on screen
 25119 LD B,4        ; {4 little girls, starting with #b186=little girl no. 4
 25121 LD H,186      ; }
 25123 CP 112        ; Was the skool gate in the middle of the screen before
                     ; scrolling?
 25125 JR Z,25134    ; Jump if so (to consider teleporting little girls 4-7)
 25127 CP 72         ; Was the boys' skool door in the middle of the screen
                     ; before scrolling?
 25129 RET NZ        ; Return if not
 25130 LD H,183      ; #b183=little girl no. 1
; The next section of code moves certain off-screen minor characters straight
; to their destination. Sneaky! This entry point is used by the routine at
; #R25026 with #REGh=#b190 (little boy no. 1).
*25132 LD B,3        ;
; This entry point is used by the routines at #R25026 (with #REGh=#b193,
; #REGb=5) and #R63309.
*25134 LD L,29       ; {Bit 3 of byte #b29 is set if the character should be
 25136 BIT 3,(HL)    ; moved immediately to the next destination in his command
                     ; list}
 25138 JR Z,25182    ; Jump if this character should not be 'teleported'
 25140 RES 3,(HL)    ; Reset bit 3 now, so that this character is not
                     ; considered for teleportation again during this lesson
 25142 DEC L         ; #REGl=#b28
 25143 LD D,(HL)     ; {Collect the address reached in the command list into
 25144 DEC L         ; #REGde
 25145 LD E,(HL)     ; }
 25146 LD A,(DE)     ; #REGa=LSB of this address
 25147 SUB 100       ; Is this the address of the routine at #R25700?
 25149 JR NZ,25182   ; Jump if not
 25151 DEC L         ; #REGl=#b26
 25152 INC DE        ; {Point #REGde at the location coordinates (the
 25153 INC DE        ; parameters of #R25700 in the command list)}
 25154 LD (HL),D     ; {Store this address in bytes #b25 and #b26 of the
 25155 DEC L         ; character's buffer
 25156 LD (HL),E     ; }
 25157 DEC L         ; #REGl=#b24
*25158 LD (HL),A     ; {Fill bytes #b1-#b24 of the character's buffer with
 25159 DEC L         ; zeroes
 25160 JR NZ,25158   ; }
 25162 LD A,(HL)     ; {Set the character's animatory state to its base value
 25163 AND 248       ; (cancelling any midstride or knockout)
 25165 LD (HL),A     ; }
 25166 INC L         ; #REGl=#b1
 25167 CALL 25188    ; Bring the location coordinates from the command list
                     ; into bytes #b1 and #b2 of the buffer, effecting the
                     ; teleportation
 25170 LD E,(HL)     ; {Collect the character's new coordinates into #REGde
 25171 INC L         ;
 25172 LD D,(HL)     ; }
 25173 LD L,5        ; {Copy these coordinates into bytes #b5 and #b6 of the
 25175 LD (HL),E     ; buffer, which normally hold the character's destination;
 25176 INC L         ; this is to let the routine at #R25700 know it has
 25177 LD (HL),D     ; nothing left to do}
 25178 LD L,29       ; {Reset bit 0 of byte #b29, cancelling any pending
 25180 RES 0,(HL)    ; request to restart the command list}
*25182 INC H         ; Next character
 25183 DJNZ 25134    ; Jump back until all characters have been done
 25185 RET           ;

; Unused
@rsub=!25186
s25186 DEFS 2

; Copy two bytes from a command list into a character's buffer
;
; Used by the routines at #R25080, #R25296, #R25700, #R29052, #R31969 and
; #R63447. Copies a routine address or pair of parameters from a character's
; current command list into his buffer.
;
; H Character number (#b183-#b214)
; L Destination for the copied bytes
@label=GETPARAMS
c25188 PUSH DE       ; Save #REGde
 25189 PUSH HL       ; Save the pointer to the character's buffer
 25190 LD L,25       ; {Collect into #REGde the address of the point reached in
 25192 LD E,(HL)     ; the command list (stored in bytes #b25 and #b26 of the
 25193 INC L         ; character's buffer)
 25194 LD D,(HL)     ; }
 25195 POP HL        ; Restore the pointer to the character's buffer
 25196 LD A,(DE)     ; {Collect the first byte from the command list and copy
 25197 INC DE        ; it to the character's buffer
 25198 LD (HL),A     ; }
 25199 INC L         ; Move along one byte in the character's buffer
 25200 LD A,(DE)     ; {Collect the second byte from the command list and copy
 25201 INC DE        ; it to the character's buffer
 25202 LD (HL),A     ; }
 25203 DEC L         ; Move back again in the character's buffer
 25204 LD A,L        ; Save #REGl temporarily
 25205 LD L,25       ; {Update the address reached in the command list (stored
 25207 LD (HL),E     ; in bytes #b25 and #b26 of the character's buffer)
 25208 INC L         ;
 25209 LD (HL),D     ; }
 25210 POP DE        ; Restore #REGde
 25211 LD L,A        ; Restore #REGl
 25212 RET           ;

; Collect one byte from a command list
;
; Used by the routines at #R31952, #R32497, #R61555 and #IF({asm}<3)//#R62599,
; and also by the unused routines at #R31893 and #R31905/#R62599//. Collects a
; byte from a character's current command list and returns it in #REGa.
;
; H Character number (#b183-#b214)
@label=GETPARAM
c25213 PUSH HL       ; Save the character number
 25214 LD L,25       ; Bytes #b25 and #b26 of the character's buffer hold the
                     ; address of the point reached in the command list
 25216 LD A,(HL)     ; Pick up the LSB of this address
 25217 INC (HL)      ; Increment the LSB
 25218 INC HL        ; #REGl=#b26
 25219 JR NZ,25228   ; Jump unless the LSB was incremented to 0
 25221 INC (HL)      ; Increment the MSB
 25222 LD H,(HL)     ; {#REGhl=address of the point reached in the command list
 25223 DEC H         ;
 25224 LD L,A        ; }
 25225 LD A,(HL)     ; Pick up the byte from the command list
 25226 POP HL        ; Restore the character number to #REGh
 25227 RET           ;
*25228 LD H,(HL)     ; {#REGhl=address of the point reached in the command list
 25229 LD L,A        ; }
 25230 LD A,(HL)     ; Pick up the byte from the command list
 25231 POP HL        ; Restore the character number to #REGh
 25232 RET           ;

; Get a random number
;
; Used by the routines at #R25296, #R25815, #R26752, #R29716, #R30555, #R30706,
; #R30804, #R31254, #R31502, #R31573, #R31915, #R61487, #R61533, #R61696,
; #R62032, #R62178 and #R62910. Returns with a random number in #REGa.
@label=GETRANDOM
c25233 PUSH HL       ;
 25234 LD HL,(32765) ; Pick up the current random number seed from #R32765
 25237 INC HL        ; {Update the seed (by adding 257)
 25238 INC H         ;
 25239 LD (32765),HL ; }
@nowarn
 25242 LD A,(23672)  ; Pick up the LSB of the system variable FRAMES in #REGa
 25245 XOR (HL)      ; Now #REGa=a pseudo-random number
 25246 POP HL        ;
 25247 RET           ;

; Update the display
;
; Used by the routines at #R20956, #R28160, #R62094 and #R63210. Goes through
; the #R32512(screen refresh buffer) (SRB) and for every set bit found, updates
; the corresponding character square on-screen.
@label=UPDATESCR
c25248 CALL 26849    ; Update the SRB so that speech bubbles are not corrupted
                     ; by moving characters
 25251 LD B,84       ; 21 screen rows, 4 bytes (32 bits) per row
*25253 LD A,(HL)     ; Pick up a byte from the screen refresh buffer
 25254 AND A         ; Anything need updating in this particular 8-tile
                     ; segment?
 25255 JR Z,25292    ; Jump if not
 25257 PUSH BC       ; Save the SRB byte counter
 25258 LD A,L        ; {For this particular byte of the SRB, compute the
 25259 AND 252       ; corresponding screen row number (0-20) in #REGd
 25261 RRCA          ;
 25262 RRCA          ;
 25263 LD D,A        ; }
 25264 LD A,L        ; {Also for this particular SRB byte, compute the column
 25265 AND 3         ; of the screen (0, 8, 16 or 24) corresponding to bit 7
 25267 ADD A,A       ;
 25268 ADD A,A       ;
 25269 ADD A,A       ; }
 25270 DEC A         ;
 25271 LD E,A        ;
*25272 INC E         ;
 25273 SLA (HL)      ; Does a character square need printing?
 25275 JR C,25281    ; Jump if so
 25277 JR NZ,25272   ; Jump back if there are still non-zero bits left in this
                     ; SRB byte
 25279 JR 25291      ; Jump forward to consider the next SRB byte
; We found a set bit in the current SRB byte. Print the corresponding character
; square.
*25281 PUSH HL       ; Save the SRB pointer
 25282 PUSH DE       ; Save the screen (row,column) pointer
 25283 EX DE,HL      ; Switch the screen (row,column) pointer to #REGhl
 25284 CALL 24684    ; Print the character square at this row and column
 25287 POP DE        ; Restore the screen (row,column) pointer to #REGde
 25288 POP HL        ; Restore the SRB pointer to #REGhl
 25289 JR 25272      ; Examine the next bit of the current SRB byte
; There are no set bits remaining in the current SRB byte. Move to the next SRB
; byte.
*25291 POP BC        ; Restore the SRB byte counter to #REGb
*25292 INC L         ; Point #REGhl at the next SRB byte
 25293 DJNZ 25253    ; Jump back until all 84 SRB bytes have been dealt with
 25295 RET           ;

; Move the characters
;
; Used by the routine at #R63156.
@label=MVCHARS
c25296 CALL 25302    ; Move one character
 25299 CALL 25302    ; Move the next character
*25302 LD HL,32764   ;
 25305 LD A,(HL)     ; #REGa=number of the character last moved (#b183-#b209,
                     ; #b211-#b214)
*25306 INC A         ; #REGa=number of the next character to move
 25307 CP 210        ; Is it ERIC?
 25309 JR Z,25306    ; Jump if so (we don't want to move ERIC!)
 25311 CP 215        ; Have we completed an entire cast movement cycle?
 25313 JR C,25317    ; Jump if not
 25315 LD A,183      ; Back to #b183 (little girl no. 1) if so
*25317 CP 198        ; Are we dealing with little girls 1-7 or little boys 1-8?
 25319 JR NC,25360   ; Jump if not
; It's the turn of one of the little girls (#b183-#b189), or one of the first 8
; little boys (#b190-#b197). But if the part of the play area currently
; on-screen is somewhere this character never ventures into, we skip ahead to
; the next suitable candidate. Specifically, the following characters are
; skipped depending on the value of X (the leftmost column of the skool
; on-screen):
; .
; #TABLE(default,centre)
; { =h X       | =h Skip }
; { X<=72      | girls 1-7 (#b183-#b189) }
; { 80<=X<=112 | girls 4-7 and boys 1-3 (#b187-#b192) }
; { X>=120     | boys 1-8 (#b190-#b197) }
; TABLE#
 25321 LD E,A        ; #REGe=character number (#b183-#b197)
 25322 LD D,190      ; #b190=little boy no. 1
 25324 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 25327 CP 80         ; This is the x-coordinate of the middle of the assembly
                     ; hall stage
 25329 JR NC,25338   ; Jump if we can't see to the left of this
; We are deep into the boys' skool, where no girls ever set foot.
 25331 LD A,E        ; #REGa=character number (#b183-#b197)
 25332 CP D          ; Is this a little boy?
 25333 JR NC,25360   ; Move him if so
 25335 LD A,D        ; {Otherwise bypass the little girls and skip ahead to
 25336 JR 25360      ; little boy no. 1 (#b190)}
; The leftmost column of the play area on screen is at least 80.
*25338 CP 120        ; This x-coordinate is about halfway between the tree and
                     ; the gate
 25340 LD A,E        ; #REGa=character number (#b183-#b197)
 25341 JR C,25350    ; Jump if we can't see the first half of the girls'
                     ; playground
; The leftmost column of the play area on screen is at least 120. Little boys
; 1-8 never set foot here.
 25343 CP D          ; Is this a little girl?
 25344 JR C,25360    ; Move her if so
 25346 LD A,198      ; {Otherwise bypass little boys 1-8 and skip ahead to
 25348 JR 25360      ; little boy no. 9 (#b198)}
; The leftmost column of the play area on screen is between 80 and 112. Little
; girls 4-7 and little boys 1-3 never visit these parts.
*25350 CP 186        ; Is this little girl no. 1-3?
 25352 JR C,25360    ; Move her if so
 25354 CP 193        ; Is this little boy no. 4-8?
 25356 JR NC,25360   ; Move him if so
 25358 LD A,193      ; Otherwise bypass little girls 4-7 and little boys 1-3
                     ; and skip ahead to little boy no. 4 (#b193)
; We've now determined which character to move next. His character number is in
; #REGa.
*25360 LD (HL),A     ; Store the number of the character to be moved next in
                     ; #R32764
 25361 LD H,A        ; {Point #REGhl at byte #b30 of this character's buffer
 25362 LD L,30       ; }
 25364 DEC (HL)      ; Is it time to consider a change in walking speed?
 25365 JR NZ,25401   ; Jump if not
; It's time to consider a change in walking speed. If the character is a boy or
; girl, decide whether they will walk or run for the next little while.
 25367 CALL 25233    ; #REGa=random number
 25370 AND 31        ; #b0<=#REGa<=#b31
 25372 ADD A,32      ; #b32<=#REGa<=#b63
 25374 RRA           ; #b16<=#REGa<=#b31 (and the carry flag is set if the
                     ; random number was odd)
 25375 LD (HL),A     ; Place this number into byte #b30 of the character's
                     ; buffer
 25376 SBC A,A       ; #REGa=#b0 if the random number was even, #b255 otherwise
 25377 DEC L         ; #REGl=#b29
 25378 AND 128       ; #REGa=#b0 (character will walk) or #b128 (character will
                     ; run if he's a kid)
 25380 OR (HL)       ; Superimpose the current contents of byte #b29
 25381 BIT 6,(HL)    ; Is this a human character (#b183<=#REGh<=#b209)?
 25383 JR NZ,25389   ; Jump if not
; We're dealing with a human character. Bit 4 of byte #b29 of the character's
; buffer is never set, but if it were, it would make the character run until
; the current command list routine has finished. Check bit 4 of byte #b29 now.
 25385 BIT 4,(HL)    ; Bit 4 of byte #b29 is unused and always reset
 25387 JR Z,25393    ; Always make this jump
*25389 OR 128        ; Ensure that bit 7 of byte #b29 is set for non-human
                     ; characters
 25391 JR 25399      ;
*25393 BIT 5,(HL)    ; Is this an adult character (#b200<=#REGh<=#b205)?
 25395 JR Z,25399    ; Jump if not
 25397 AND 127       ; Ensure that bit 7 of byte #b29 is reset for adult
                     ; characters (to make them walk)
*25399 LD (HL),A     ; Restore byte #b29 with bit 7 set (run) or reset (walk)
                     ; as appropriate
 25400 INC L         ; #REGl=#b30
; Now to determine whether to move the character this time round. The answer
; will be yes if byte #b30 (which is decremented on each pass through this
; routine) is even, or bit 7 of byte #b29 is set (indicating that the character
; is either running or non-human).
*25401 BIT 0,(HL)    ; Is the counter at byte #b30 currently even?
 25403 JR Z,25409    ; Jump if so (half the time)
 25405 DEC L         ; #REGl=#b29
 25406 BIT 7,(HL)    ; Is the character both human and not running?
 25408 RET Z         ; Return if so
; The character shall be moved. From this point, the following steps are taken:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Step | =h Action }
; { 1       | If there is an uninterruptible subcommand routine address in
;             bytes #b17 and #b18 of the character's buffer, jump to it }
; { 2       | If there is a continual subcommand routine address in bytes #b23
;             and #b24 of the character's buffer, call it (and then return to
;             step 3) }
; { 3       | If there is an interruptible subcommand routine address in bytes
;             #b9 and #b10 of the character's buffer, jump to it }
; { 4       | Restart the command list if bit 0 of byte #b29 of the character's
;             buffer is set (and carry on to step 5) }
; { 5       | If there is a primary command routine address in bytes #b3 and
;             #b4 of the character's buffer, jump to it }
; { 6       | Remove any continual subcommand routine address from bytes #b23
;             and #b24 of the character's buffer }
; { 7       | Collect the next primary command routine address from the command
;             list, place it into bytes #b3 and #b4 of the character's buffer,
;             and jump to it }
; TABLE#
; .
; The address of one of the following uninterruptible subcommand routines (or
; an entry point thereof) may be present in bytes #b17 and #b18 of the
; character's buffer:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Address | =h Description }
; { #R24328    | #D24328 }
; { #R26224    | #D26224 }
; { #R26239    | #D26239 }
; { #R26263    | #D26263 }
; { #R27941    | Make a boy sit still until assembly is finished }
; { #R28855    | #D28855 }
; { #R29194    | #D29194 }
; { #R29896    | #D29896 }
; { #R30102    | #D30102 }
; { #R30380    | #D30380 }
; { #R30643    | #D30643 }
; { #R30739    | #D30739 }
; { #R30804    | #D30804 }
; { #R30906    | #D30906 }
; { #R31078    | #D31078 }
; { #R31092    | #D31092 }
; { #R31254    | #D31254 }
; { #R53796    | #D53796 }
; { #R62386    | Control an open desk lid }
; { #R63627    | Control a stinkbomb cloud }
; { #R63733    | Make MR WACKER find a window to open after smelling a
;                stinkbomb }
; { #R63960    | Control water fired from the pistol }
; { #R64175    | Control a watered plant }
; TABLE#
; .
; The address of one of the following continual subcommand routines (or an
; entry point thereof) may be present in bytes #b23 and #b24 of the character's
; buffer:
; .
; #TABLE(default,centre)
; { =h Address | =h Description }
; { #R30555    | #D30555 }
; { #R62668    | #D62668 }
; { #R63455    | #D63455 }
; { #R63492    | #D63492 }
; TABLE#
; .
; The address of one of the following interruptible subcommand routines (or an
; entry point thereof) may be present in bytes #b9 and #b10 of the character's
; buffer:
; .
; #TABLE(default,centre)
; { =h Address | =h Description }
; { #R25581    | #D25581 }
; { #R25656    | #D25656 }
; { #R25677    | #D25677 }
; { #R26639    | #D26639 }
; { #R26752    | #D26752 }
; { #R27144    | #D27144 }
; { #R32379    | #D32379 }
; { #R61463    | #D61463 }
; { #R61595    | #D61595 }
; { #R62794    | #D62794 }
; TABLE#
*25409 LD L,18       ; {Jump if there is an uninterruptible subcommand routine
 25411 LD A,(HL)     ; address in bytes #b17 and #b18 of the character's buffer
 25412 AND A         ;
 25413 JR NZ,25479   ; }
 25415 LD L,24       ; {Jump if there is no continual subcommand routine
 25417 LD A,(HL)     ; address in bytes #b23 and #b24 of the character's buffer
 25418 AND A         ;
 25419 JR Z,25432    ; }
 25421 PUSH HL       ; Save the character number
@nowarn
 25422 LD BC,25431   ; {Push #R25431 (the address of the entry point to return
 25425 PUSH BC       ; to) onto the stack}
 25426 LD B,A        ; {Collect the address of the continual subcommand routine
 25427 DEC L         ; from bytes #b23 and #b24 of the character's buffer into
 25428 LD C,(HL)     ; #REGbc and push it onto the stack
 25429 PUSH BC       ; }
 25430 RET           ; #S/JP (BC)/ and then return to #R25431 below
@label=*
*25431 POP HL        ; Restore the character number to #REGh
; This entry point is used by the routine at #R25492.
*25432 LD L,10       ; {Jump if there is an interruptible subcommand routine
 25434 LD A,(HL)     ; address in bytes #b9 and #b10 of the character's buffer
 25435 AND A         ;
 25436 JR NZ,25479   ; }
; If we get here, that means there's no uninterruptible subcommand routine
; address in bytes #b17 and #b18 and no interruptible subcommand routine
; address in bytes #b9 and #b10 of the character's buffer at the moment. We
; take this opportunity to check whether a command list restart has been
; requested, by inspecting bit 0 of byte #b29. This bit is set in the following
; routines on particular occasions:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Routine | =h Occasion }
; { #R32062    | MISS TAKE needs to chase ERIC out of the girls' skool }
; { #R61595    | A teacher must find the absent ERIC during class, dinner or
;                assembly }
; { #R62668    | MR WACKER must find the truant ERIC }
; { #R62770    | MR WACKER must find and expel ERIC }
; { #R63309    | Lesson has ended }
; TABLE#
; .
; In addition, a command in the command list may have requested a restart (see
; #R61555, #R61624, #R62572 and #R63501).
 25438 LD L,29       ; {Check bit 0 of byte #b29: do we need to restart the
 25440 BIT 0,(HL)    ; command list?}
 25442 JR Z,25457    ; Jump if not
 25444 RES 0,(HL)    ; Reset bit 0 of byte #b29 now that we are going to
                     ; restart
 25446 LD D,H        ; #REGd=character number
 25447 LD L,27       ; Point #REGhl at where the address of the character's
                     ; current command list is held
 25449 LD E,25       ; Point #REGde at where the address of the place reached
                     ; in the character's current command list is held
 25451 LDI           ; {Copy the former into the latter (thus returning to the
 25453 LDI           ; start of the command list)}
 25455 JR 25467      ;
*25457 LD L,4        ; {Jump if there is a primary command routine address in
 25459 LD A,(HL)     ; bytes #b3 and #b4 of the character's buffer
 25460 AND A         ;
 25461 JR NZ,25479   ; }
; There is no primary command routine address in bytes #b3 and #b4 of the
; character's buffer, which means it's time to move to the next command in the
; list.
 25463 LD L,29       ; {Reset bit 3 of byte #b29, indicating that this
 25465 RES 3,(HL)    ; character may not be considered for teleportation for
                     ; the remainder of this lesson (see #R25026)}
*25467 RES 4,(HL)    ; Reset bit 4 of byte #b29, indicating that the character
                     ; should no longer run if he was doing so (though this bit
                     ; is unused and always reset)
 25469 LD L,24       ; {Remove the address of any continual subcommand routine
 25471 LD (HL),0     ; from bytes #b23 and #b24 of the character's buffer}
; This entry point is used by the routine at #R63447.
*25473 LD L,3        ; {Collect the routine address of the next command in the
 25475 CALL 25188    ; character's current command list and place it into bytes
                     ; #b3 and #b4 of the buffer}
 25478 INC L         ; #REGl=#b4
*25479 LD B,(HL)     ; {Collect the command routine address from bytes #b3 and
 25480 DEC L         ; #b4, bytes #b9 and #b10, or bytes #b17 and #b18 of the
 25481 LD C,(HL)     ; character's buffer into #REGbc}
 25482 PUSH BC       ; {Make an indirect jump to this address
 25483 RET           ; }

; Terminate a command
;
; The main entry point is used by the routines at #R25700, #R31952, #R31969,
; #R32497, #R61555, #R61624, #R61631, #R61658, #R62032, #R62560, #R62572,
; #R62599, #R62620 and #R63501. Removes the primary command routine address
; from bytes #b3 and #b4 of the character's buffer, which has the effect of
; making the routine at #R25296 move immediately to the next command in the
; command list.
@label=NEXTCMD
c25484 LD L,4        ; Byte #b4 of the buffer contains the MSB of the primary
                     ; command routine address
 25486 JR 25494      ; Jump forward to replace it with 0
; This entry point is used by the routines at #R25581, #R25656, #R25677,
; #R26639, #R26752, #R27144, #R32379 and #R61463. Removes the interruptible
; subcommand routine address from bytes #b9 and #b10 of the character's buffer,
; which has the effect of making the routine at #R25296 immediately hand
; control of the character back to the primary command.
@label=RMSUBCMD
*25488 LD L,10       ; Byte #b10 of the buffer contains the MSB of the
                     ; interruptible subcommand routine address
 25490 JR 25494      ; Jump forward to replace it with 0
; This entry point is used by the routines at #R30102, #R30643 and #R31254.
; Removes the uninterruptible subcommand routine address from bytes #b17 and
; #b18 of the character's buffer, which has the effect of making the routine at
; #R25296 immediately hand control of the character back to the interruptible
; subcommand or the primary command.
@label=RMUSUBCMD
*25492 LD L,18       ; Byte #b18 of the buffer contains the MSB of the
                     ; uninterruptible subcommand routine address
*25494 LD A,(32764)  ; #REGa=number of the character being worked on
                     ; (#b183-#b214)
 25497 LD H,A        ; {Zero out the relevant routine address MSB (in byte #b4,
 25498 LD (HL),0     ; #b10 or #b18) in the character's buffer}
 25500 JP 25432      ; Re-enter the character-moving routine (#R25296) at the
                     ; checkpoint for the interruptible subcommand

; Call an interruptible subcommand
;
; Used by the routines at #R27904, #R31952, #R31969, #R32497, #R61440, #R61533,
; #R61555, #R61631, #R61696, #R62032 and #R62815. Drops the return address from
; the stack and copies it into bytes #b3 and #b4 of the character's buffer
; (where the address of the primary command routine is held), copies the
; address of the interruptible subcommand routine from #REGbc into bytes #b9
; and #b10 of the character's buffer, and then jumps to that routine.
;
; BC Interruptible subcommand routine address
; H Character number (#b183-#b214)
@label=CALLSUBCMD
c25503 LD L,9        ; {Copy the routine address from #REGbc into bytes #b9 and
 25505 LD (HL),C     ; #b10 of the character's buffer
 25506 INC L         ;
 25507 LD (HL),B     ; }
 25508 LD A,H        ; #REGa=character number
 25509 POP HL        ; Drop the return address from the stack into #REGhl
 25510 PUSH BC       ; Push the routine address in #REGbc onto the stack
 25511 LD C,L        ;
 25512 LD L,3        ;
; #IF({asm}<3)(This entry point is used by the (unused) routine at #R25525 with
; #REGl=#b9.)
*25514 LD B,H        ; Now #REGbc=address of the instruction after the #S/CALL/
                     ; that got us here
 25515 LD H,A        ; #REGh=character number
; This entry point is used by the routine at #R25520 with #REGl=#b9 and
; #REGbc=#R25581, #R25656, #R25677 or #R62794.
*25516 LD (HL),C     ; {Copy the routine address in #REGbc into bytes #b3 and
 25517 INC L         ; #b4 (or #b9 and #b10) of the character's buffer
 25518 LD (HL),B     ; }
 25519 RET           ; Make an indirect jump to the interruptible subcommand
                     ; routine

; Jump to an interruptible subcommand
;
; Used by the routines at #R25700 and #R32054. Copies the routine address from
; #REGbc into bytes #b9 and #b10 of the character's buffer (thus setting the
; interruptible subcommand), and then jumps to that routine.
;
; H Character number (#b183-#b214)
; BC #R25581, #R25656, #R25677 or #R62794
@label=DOSUBCMD
c25520 PUSH BC       ; Push the routine address in #REGbc onto the stack
 25521 LD L,9        ; Point #REGhl at byte #b9 of the character's buffer
 25523 JR 25516      ; Place the interruptible subcommand routine address into
                     ; bytes #b9 and #b10 of the character's buffer, then jump
                     ; to it

; Set the interruptible subcommand (unused)
;
; This routine is not used. It drops the return address from the stack and
; copies it into bytes #b9 and #b10 of the character's buffer (thus setting the
; interruptible subcommand), and then jumps to the routine whose address is in
; #REGbc.
;
; BC Routine address
; H Character number (#b183-#b214)
@label=XDOSUBCMD
@rsub=!25525-25531
c25525 LD A,H        ; #REGa=character number
 25526 POP HL        ; Drop the return address from the stack into #REGhl
 25527 PUSH BC       ; Push the routine address in #REGbc onto the stack
 25528 LD C,L        ;
 25529 LD L,9        ;
 25531 JR 25514      ; Copy the return address into bytes #b9 and #b10 of the
                     ; character's buffer, and jump to the routine whose
                     ; address was in #REGbc on entering this routine

; Unused
@rsub=!25533
s25533 DEFB 0

; Determine ERIC's y-coordinate
;
; Used by the routines at #R25944 and #R32000. Returns with #REGd holding
; ERIC's y-coordinate if he has his feet on the floor. Otherwise returns with
; #REGd=#b3, #b10, #b14 or #b17, indicating the floor that ERIC is directly
; above.
@label=GETERICY
@ssub=LD DE,(53760+1)
c25534 LD DE,(53761) ; Get ERIC's coordinates in #REGde
 25538 LD A,(32763)  ; Copy ERIC's status flags from #R32763 to #REGa
 25541 RRCA          ; Is ERIC jumping?
 25542 JR C,25551    ; Jump if so
 25544 RRCA          ; Does ERIC have his feet on the floor?
 25545 RET NC        ; Return if so (with #REGd holding ERIC's y-coordinate)
 25546 LD A,(32749)  ; Copy ERIC's other status flags from #R32749 to #REGa
 25549 AND 6         ; Set the zero flag unless bit 1 (ERIC is standing on a
                     ; plant) or bit 2 (ERIC's stepping off a plant or the
                     ; stage) is set
*25551 JP 28085      ; Determine which floor ERIC's closest to

; Get the play area region identifier for a given location
;
; Used by the routines at #R25700, #R25843 and #R32379. The value returned in
; #REGa (corresponding to the location in #REGde) is as follows:
; .
; #TABLE(default)
; { =h ID | =h Region }
; { #b189 | Top floor, left of the left study door in the boys' skool }
; { #b190 | Middle floor, left of the far wall of the Science Lab storeroom }
; { #b191 | Anywhere on the bottom floor (or in mid-air!) }
; { #b192 | Assembly hall stage }
; { #b193 | Near the middle-floor window in the boys' skool }
; { #b194 | Top floor, right of the left study door in the boys' skool }
; { #b195 | Middle floor, girls' skool }
; { #b196 | Top floor, girls' skool }
; TABLE#
; .
; #HTML(<span id="ericLocTable" />) Or if the entry point at #R25557 is used
; (for ERIC's location):
; .
; #TABLE(default,centre)
; { =h ID | =h Region }
; { #b0   | None of the places below (ERIC is never allowed here) }
; { #b1   | Playground }
; { #b2   | Various places in the boys' skool outside classrooms }
; { #b3   | Assembly hall }
; { #b4   | Dining hall }
; { #b5   | Revision Library, outside the Yellow Room door }
; { #b6   | Science Lab }
; { #b7   | Blue Room }
; { #b8   | Yellow Room }
; TABLE#
; .
; The carry flag is set upon return to the caller of this routine if the
; coordinates in #REGde correspond to a location on a staircase.
;
; D y-coordinate of the play area (3-17)
; E x-coordinate of the play area (0-190)
@label=GETREGION
c25554 CALL 28067    ; Divert back to the calling routine with #REGa=#b192 and
                     ; the carry flag reset if the character is on the assembly
                     ; hall stage; otherwise return here with #REGb=#b182 and
                     ; #REGc=#b59
; This entry point is used by the routine at #R32000 with ERIC's coordinates in
; #REGde, #REGb=#b185, and #REGc=#b59.
*25557 LD A,D        ; #REGa=y-coordinate
*25558 INC B         ; {Set #REGb to #b183 (#b186) if #REGd<=#b6 (top floor),
 25559 SUB 7         ; #b184 (#b187) if #b7<=#REGd<=#b13 (middle floor), or
 25561 JR NC,25558   ; #b185 (#b188) if #b14<=#REGd<=#b18 (bottom floor)}
; Now #REGbc will be used to index one of the skool region tables that contain
; the location identifiers:
; .
; #TABLE(default,centre)
; { =h Address | =h Region }
; { #R46908    | Top floor }
; { #R47164    | Middle floor }
; { #R47420    | Bottom floor }
; { #R47676    | Top floor (ERIC) }
; { #R47932    | Middle floor (ERIC) }
; { #R48188    | Bottom floor (ERIC) }
; TABLE#
 25563 CP 252        ; Does #REGd=#b3, #b10 or #b17 (top, middle, bottom
                     ; floor)?
 25565 JR Z,25571    ; Jump if so
 25567 SCF           ; Signal: #REGd does not correspond exactly to the top,
                     ; middle or bottom floor
@rsub=!25568-25570
 25568 NOP           ; {
 25569 NOP           ;
 25570 NOP           ; }
*25571 PUSH AF       ; Save the carry flag temporarily
*25572 INC C         ; {Point #REGbc at the appropriate entry in one of the
 25573 LD A,(BC)     ; region tables
 25574 INC C         ;
 25575 CP E          ;
 25576 JR C,25572    ; }
 25578 POP AF        ; Restore the carry flag (reset if #REGd=#b3, #b10 or
                     ; #b17; set otherwise)
 25579 LD A,(BC)     ; #REGa=region identifier (#b189-#b196 or #b0-#b8; see the
                     ; tables above)
 25580 RET           ;

; Guide a character to an intermediate destination
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of the character's buffer by the routines at #R25700, #R27904,
; #R31915 and #R61696. It is used to make a character go straight to a
; destination (or intermediate destination) that is reachable without
; negotiating any staircases.
;
; H Character number (#b183-#b214)
@label=WALK
c25581 LD L,12       ; Point #REGhl at byte #b12 of the character's buffer
 25583 LD (HL),8     ; Initialise this to 8
; Byte #b12 is used to count the number of paces the character has taken while
; under the control of this routine. It is decremented on each pass (at #R25618
; below). If it reaches 0, the address of this routine is removed from bytes
; #b9 and #b10 of the character's buffer. This has the effect of allowing the
; character-moving routine at #R25296 the chance to check whether a command
; list restart (bit 0 of byte #b29 set) has been requested in the meantime.
; This ensures that the character does not proceed all the way to the
; (intermediate) destination before responding to some important event, such as
; the start of a new lesson (important for every character), ERIC playing
; truant (important for MR WACKER), or ERIC being present in the girls' skool
; when it's not playtime (important for MISS TAKE). If no command list restart
; has been requested in the meantime, the address of this routine will be
; placed into bytes #b9 and #b10 of the character's buffer again by the routine
; at #R25700, and the character will continue towards his destination.
@rsub=!25585-25586
 25585 NOP           ; {
 25586 NOP           ; }
 25587 LD L,9        ; {Replace the address of this routine in bytes #b9 and
@ssub=LD (HL),25591%256
@rsub=LD (HL),25591%256 ; #b10 of the character's buffer with #R25591 (below)
@rsub=INC L
@rsub=LD (HL),25591/256 ; }
 25589 LD (HL),247   ; #b10 of the character's buffer with #R25591 (below)}
; The second and subsequent calls to this routine (from #R25296) enter here:
@label=WALK0
 25591 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 25593 BIT 0,(HL)    ; Is the character midstride?
 25595 JR Z,25618    ; Jump if not
; The character is midstride. He'll have to finish his stride before we move
; him one step closer to his destination. This entry point is used by the
; routines at #R25656, #R26263, #R63586 and #R63801.
*25597 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
; This entry point is used by the routines at #R25677 and #R25944.
*25600 INC E         ; #REGe=1 + character's x-coordinate
 25601 BIT 7,A       ; #REGa=character's animatory state
 25603 JR NZ,25607   ; Jump if the character is facing right
 25605 DEC E         ;
 25606 DEC E         ; #REGe=character's x-coordinate - 1
*25607 AND 252       ; {Set #REGb to the base animatory state of the character
 25609 LD B,A        ; by discarding bits 0 and 1}
 25610 LD A,E        ; #REGa=character's new x-coordinate (after finishing his
                     ; stride)
 25611 AND 1         ; {#REGa=0 if the x-coordinate is even, 2 if it's odd
 25613 ADD A,A       ; }
 25614 OR B          ; #REGa=character's new animatory state (standing/walking
                     ; phase 1 for even x-coordinates, phase 3 for odd)
 25615 JP 24880      ; Update the character's animatory state and location and
                     ; update the SRB
; The character is not midstride. If he hasn't reached his destination yet,
; make him put one foot forward (if he's facing the right way), or turn him
; round.
*25618 LD L,12       ; Point #REGhl at byte #b12 of the character's buffer
 25620 DEC (HL)      ; Is it time to give the character-moving routine at
                     ; #R25296 a chance to check whether a command list restart
                     ; has been requested?
 25621 JP Z,25488    ; Terminate this interruptible subcommand if so
 25624 DEC L         ; #REGl=#b11
 25625 LD A,(HL)     ; #REGa=character's destination x-coordinate
 25626 LD L,1        ; Byte 1 of the character's buffer holds his current
                     ; x-coordinate
 25628 CP (HL)       ; Has the character reached his destination?
 25629 JP Z,25488    ; Terminate this interruptible subcommand if so
; This entry point is used by the routine at #R63801.
*25632 DEC HL        ; Point #REGhl at byte #b0 of the character's buffer
 25633 BIT 7,(HL)    ; Is the character facing left?
 25635 JR Z,25646    ; Jump if so
 25637 JR C,25648    ; Jump if the character will have to turn round first
; This entry point is used by the routine at #R25677.
*25639 CALL 28814    ; Check for closed doors in the character's path
 25642 INC A         ; #REGa=character's new (midstride) animatory state
 25643 JP 24880      ; Update the character's animatory state and update the
                     ; SRB
; This entry point is used by the routine at #R26263.
*25646 JR C,25639    ; Jump if the character is facing the right way
; This entry point is used by the routines at #R25700, #R25944, #R27904,
; #R28216 and #R62668 (to turn a character round), and #R63586 (to move the
; stinkbomb cloud).
*25648 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 25651 XOR 128       ; Flip bit 7 of the character's animatory state, thus
                     ; turning him round
 25653 JP 24880      ; Update the character's animatory state and update the
                     ; SRB

; Guide a character up a staircase
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of a character's buffer by the routine at #R25700.
;
; H Character number (#b183-#b209)
@label=ASCEND
c25656 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 25658 BIT 0,(HL)    ; Is the character midstride?
 25660 JP NZ,25597   ; Finish the stride if so
 25663 LD L,11       ; Byte #b11 of the character's buffer holds the number of
                     ; steps left to be climbed
 25665 DEC (HL)      ; One fewer now
 25666 JP Z,25488    ; Terminate this interruptible subcommand if the top of
                     ; the staircase has been reached
 25669 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 25672 DEC D         ; Up a step
 25673 INC A         ; One foot forward
 25674 JP 24880      ; Update the character's animatory state (to midstride)
                     ; and location and update the SRB

; Guide a character down a staircase
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of a character's buffer by the routine at #R25700.
;
; H Character number (#b183-#b209)
@label=DESCEND
c25677 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 25679 BIT 0,(HL)    ; Is the character midstride?
 25681 JR NZ,25692   ; Jump if so
 25683 LD L,11       ; Byte #b11 of the character's buffer holds the number of
                     ; steps left to be descended
 25685 DEC (HL)      ; One fewer now
 25686 JP Z,25488    ; Terminate this interruptible subcommand if the bottom of
                     ; the staircase has been reached
 25689 JP 25639      ; One foot forward
*25692 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 25695 INC D         ; Down a step
 25696 JP 25600      ; Legs together again and update the SRB

; Unused
@rsub=!25699
s25699 DEFB 0

; Make a character go to a location
;
; Used by command lists #R51516(#b0), #R51772(#b2), #R52028(#b4), #R52284(#b6),
; #R52540(#b8), #R52796(#b10), #R53052(#b12), #R53308(#b14), #R53564(#b16),
; #R57942(#b20), #R58368(#b22), #R58880(#b24), #R59136(#b26), #R57956(#b28),
; #R57970(#b30), #R58768(#b32), #R58779(#b34), #R58798(#b36), #R58813(#b38),
; #R59151(#b40), #R58844(#b44), #R59488(#b46), #R59499(#b48), #R59519(#b50),
; #R59530(#b52), #R59550(#b54), #R59584(#b56), #R59612(#b58), #R59629(#b60),
; #R59646(#b62), #R59663(#b64), #R59673(#b66), #R59681(#b70), #R59699(#b72),
; #R59715(#b74), #R59724(#b76), #R59765(#b78), #R59788(#b80), #R59801(#b82),
; #R59812(#b84), #R59823(#b86) and #R58862(#b88) to make a character go to a
; specified place.
;
; H Character number (#b183-#b209)
@label=GOTO
c25700 LD L,5        ; {Copy the destination coordinates from the command list
 25702 CALL 25188    ; into bytes #b5 and #b6 of the character's buffer}
; This entry point is used by the routine at #R25815.
*25705 LD L,3        ; {Replace the address of this routine in bytes #b3 and
@ssub=LD (HL),25726%256
@rsub=LD (HL),25726%256 ; #b4 of the character's buffer with #R25726 (below)
@rsub=INC L
@rsub=LD (HL),25726/256 ; }
 25707 LD (HL),126   ; #b4 of the character's buffer with #R25726 (below)}
 25709 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 25711 LD A,(HL)     ; #REGa=character's animatory state
 25712 AND 7         ; {Is the character sitting on a chair (kids only)?
 25714 CP 4          ; }
 25716 JR NZ,25726   ; Jump if not
; The character is sitting on a chair. He'll have to stand up first.
 25718 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state
 25721 AND 248       ; #REGa=animatory state of the character standing up
 25723 JP 24880      ; Update the character's animatory state and update the
                     ; SRB
; The second and subsequent calls to this routine (from #R25296) enter here:
*25726 LD L,6        ; {Collect the destination coordinates into #REGde
 25728 LD D,(HL)     ;
 25729 DEC L         ;
 25730 LD E,(HL)     ; }
 25731 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 25733 LD A,E        ; #REGa=character's current x-coordinate
 25734 CP (HL)       ; Compare it with the x-coordinate of the destination
 25735 INC HL        ; #REGl=#b2
 25736 JR NZ,25743   ; Jump forward unless the character's current x-coordinate
                     ; matches that of the destination
 25738 LD A,D        ; #REGa=character's current y-coordinate
 25739 CP (HL)       ; Is the character already at his destination?
 25740 JP Z,25484    ; Move to the next command in the command list if so
; The character hasn't reached his destination yet.
*25743 CALL 25554    ; Get the region identifier for the character's
                     ; destination
; Now #REGa holds a region ID (#b189-#b196) corresponding to the character's
; destination:
; .
; #TABLE(default)
; { =h ID | =h Region }
; { #b189 | Top floor, left of the left study door in the boys' skool }
; { #b190 | Middle floor, left of the far wall of the Science Lab storeroom }
; { #b191 | Bottom floor (anywhere) }
; { #b192 | Assembly hall stage }
; { #b193 | Near the middle-floor window in the boys' skool }
; { #b194 | Top floor, right of the left study door in the boys' skool }
; { #b195 | Middle floor, girls' skool }
; { #b196 | Top floor, girls' skool }
; TABLE#
 25746 LD D,(HL)     ; {Collect the character's current coordinates into #REGde
 25747 DEC L         ;
 25748 LD E,(HL)     ; }
 25749 LD L,A        ; #REGl=destination region ID (#b189-#b196)
 25750 CALL 25554    ; #REGa=region ID (#b189-#b196) for the character's
                     ; current location
 25753 CP L          ; Will the character have to negotiate any staircases in
                     ; order to reach his destination?
 25754 JR Z,25800    ; Jump if not (he's in the same region as his destination)
 25756 LD D,A        ; #REGd=region ID of the character's current location
                     ; (#b189-#b196)
 25757 LD A,L        ; #REGa=destination region ID (#b189-#b196)
 25758 SUB 129       ; {#REGe=destination region ID minus #b129 (#b60-#b67)
 25760 LD E,A        ; }
 25761 LD A,(DE)     ; Collect the appropriate staircase endpoint identifier
; #HTML(<span id="staircaseMatrix" />) The staircase endpoint identifiers are
; arranged in bytes #b60-#b67 (corresponding to the destination) of pages
; #b189-#b196 (corresponding to the current location) as follows:
; .
; #TABLE(default)<nowrap>
; { =c2,t              | =h #b189 | =h #b190 | =h #b191 | =h #b192 | =h #b193 | =h #b194 | =h #b195 | =h #b196 }
; { #R48444 | =h #b189 | =t       |    #b189 |    #b189 |    #b189 |    #b189 |    #b189 |    #b189 |    #b189 }
; { #R48700 | =h #b190 |    #b190 | =t       |    #b191 |    #b191 |    #b191 |    #b191 |    #b191 |    #b191 }
; { #R48956 | =h #b191 |    #b192 |    #b192 | =t       |    #b193 |    #b193 |    #b193 |    #b194 |    #b194 }
; { #R49212 | =h #b192 |    #b195 |    #b195 |    #b195 | =t       |    #b196 |    #b196 |    #b195 |    #b195 }
; { #R49468 | =h #b193 |    #b197 |    #b197 |    #b197 |    #b197 | =t       |    #b198 |    #b197 |    #b197 }
; { #R49724 | =h #b194 |    #b199 |    #b199 |    #b199 |    #b199 |    #b199 | =t       |    #b199 |    #b199 }
; { #R49980 | =h #b195 |    #b200 |    #b200 |    #b200 |    #b200 |    #b200 |    #b200 | =t       |    #b206 }
; { #R50236 | =h #b196 |    #b207 |    #b207 |    #b207 |    #b207 |    #b207 |    #b207 |    #b207 | =t       }
; TABLE#
; .
; #HTML(<span id="staircases" />) The staircase endpoint indentifier now in
; #REGa (#b189-#b200, #b206 or #b207) corresponds to the top or bottom of the
; first staircase the character will have to negotiate in order to reach his
; destination. The x-coordinate (x), direction indicator (d), appropriate
; routine address LSB (#b56 for #R25656, #b77 for #R25677) and number of steps
; (n) for the staircase can be found in bytes #b68-#b71 of pages #b189-#b200
; and #b206-#b207, as follows:
; .
; #TABLE(default,centre,centre,centre,centre,,:w)<nowrap>
; { =h ID          | =h x | =h d  | =h LSB | =h n | =h Staircase endpoint }
; { #R48452(#b189) |   26 |   #b0 |   #b77 |    8 | Top of the staircase leading down from the Revision Library }
; { #R48708(#b190) |   19 | #b128 |   #b56 |    8 | Bottom of the staircase leading up to the Revision Library }
; { #R48964(#b191) |   15 | #b128 |   #b77 |    8 | Top of the staircase leading down to the bottom floor on the far left of the boys' skool }
; { #R49220(#b192) |   22 |   #b0 |   #b56 |    8 | Bottom of the staircase leading up to the middle floor on the far left of the boys' skool }
; { #R49476(#b193) |   83 |   #b0 |   #b56 |    4 | Bottom of the staircase leading up to the assembly hall stage }
; { #R49732(#b194) |  176 | #b128 |   #b56 |    8 | Bottom of the staircase leading up to the middle floor in the girls' skool }
; { #R49988(#b195) |   80 | #b128 |   #b77 |    4 | Top of the staircase leading down from the assembly hall stage }
; { #R50244(#b196) |   81 | #b128 |   #b56 |    5 | Bottom of the staircase leading up from the assembly hall stage }
; { #R50500(#b197) |   85 |   #b0 |   #b77 |    5 | Top of the staircase leading down to the assembly hall stage }
; { #R50756(#b198) |   91 |   #b0 |   #b56 |    8 | Bottom of the staircase leading up to the head's study }
; { #R51012(#b199) |   84 | #b128 |   #b77 |    8 | Top of the staircase leading down from the head's study }
; { #R51268(#b200) |  183 |   #b0 |   #b77 |    8 | Top of the staircase leading down to the bottom floor in the girls' skool }
; { #R52804(#b206) |  186 |   #b0 |   #b56 |    8 | Bottom of the staircase leading up to the top floor in the girls' skool }
; { #R53060(#b207) |  179 | #b128 |   #b77 |    8 | Top of the staircase leading down to middle floor in the girls' skool }
; TABLE#
 25762 LD D,A        ; Place the staircase endpoint identifier in #REGd
 25763 LD E,68       ; Byte #b68 holds the x-coordinate of the top or bottom of
                     ; the staircase identified by #REGd
 25765 LD L,1        ; {Point #REGde at byte #b1 of the character's buffer, and
 25767 EX DE,HL      ; #REGhl at the staircase endpoint x-coordinate}
 25768 LD A,(DE)     ; #REGa=character's current x-coordinate
 25769 CP (HL)       ; Is the character already at the top or bottom of the
                     ; appropriate staircase?
 25770 JR NZ,25796   ; Jump forward if not
; At this stage the character is standing at the top or bottom of the first
; staircase he will have to negotiate in order to reach his destination.
 25772 INC L         ; (#REGhl)=#b0 if the character has to face left to ascend
                     ; or descend the stairs, #b128 otherwise
 25773 DEC E         ; #REGe=#b0
 25774 LD A,(DE)     ; #REGa=character's animatory state
 25775 XOR (HL)      ; {Set the carry flag if the character has to turn round
 25776 RLCA          ; to negotiate the staircase}
 25777 EX DE,HL      ; Swap #REGde and #REGhl so that #REGh holds the character
                     ; number
 25778 JP C,25648    ; Turn the character round if he's facing the wrong way
 25781 EX DE,HL      ; Swap #REGde and #REGhl back again
 25782 LD E,11       ; Point #REGde at byte #b11 of the character's buffer
 25784 INC L         ; #REGl=#b70
@rsub=LD BC,25656
 25785 LD C,(HL)     ; {#REGbc=#R25656 if the stairs are to be ascended,
@rsub=LD A,(HL)      ; #R25677 if descended
 25786 LD B,100      ; #R25677 if descended}
@rsub=CP 56
@rsub=JR Z,25789     ;
@rsub=LD BC,25677    ; }
 25788 NOP           ;
@rsub=UPSTAIRS:
 25789 INC L         ; #REGl=#b71
 25790 LD A,(HL)     ; #REGa=1 + number of steps in the staircase
 25791 LD (DE),A     ; Place this number of steps in byte #b11 of the
                     ; character's buffer
 25792 EX DE,HL      ; Swap #REGde and #REGhl so that #REGh holds the character
                     ; number
 25793 JP 25520      ; Copy the interruptible subcommand routine address from
                     ; #REGbc into bytes #b9 and #b10 of the character's buffer
                     ; and jump to it
; The character is not yet at the top or bottom of the appropriate staircase.
*25796 LD A,(HL)     ; #REGa=x-coordinate of the top or bottom of the staircase
 25797 EX DE,HL      ; #REGh=character number
 25798 JR 25803      ; Send the character towards the staircase
; The character can reach his destination without negotiating any staircases.
*25800 LD L,5        ; Point #REGhl at byte #b5 of the character's buffer
 25802 LD A,(HL)     ; #REGa=x-coordinate of the character's destination
*25803 LD L,11       ; {Place the x-coordinate of the top or bottom of the
 25805 LD (HL),A     ; staircase, or the destination, into byte #b11 of the
                     ; character's buffer}
@nowarn
 25806 LD BC,25581   ; {Place the address of the interruptible subcommand
 25809 JP 25520      ; routine at #R25581 into bytes #b9 and #b10 of the
                     ; character's buffer and jump to it, thus guiding the
                     ; character to this x-coordinate}

; Unused
@rsub=!25812
s25812 DEFS 3

; Make a character go to a random location
;
; Used by command lists #R53820(#b18), #R57942(#b20), #R57956(#b28),
; #R59151(#b40), #R58828(#b42), #R59673(#b66), #R59677(#b68), #R59765(#b78) and
; #R58862(#b88) to make a character go to a place at random. The random
; locations are arranged in eight groups of four. The group of locations that
; is suitable for a particular character to choose from is determined by byte
; #b36 of the character's buffer.
;
; H Character number (#b183-#b209)
@label=GOTORAND
c25815 LD L,36       ; Point #REGhl at byte #b36 of the character's buffer
 25817 LD E,(HL)     ; Pick up the contents in #REGe
 25818 EX DE,HL      ;
*25819 CALL 25233    ; #REGa=random number
 25822 AND 3         ; {#REGa=#b211, #b212, #b213 or #b214
 25824 ADD A,211     ; }
 25826 LD H,A        ; Point #REGhl at an entry in the table of random
                     ; locations
 25827 LD E,1        ; Point #REGde at byte #b1 of the character's buffer
 25829 LD A,(DE)     ; #REGa=character's x-coordinate
 25830 CP (HL)       ; Is the character already at this x-coordinate?
 25831 JR Z,25819    ; Get another random location if so
 25833 LD E,5        ; {Copy the random location's coordinates into bytes #b5
 25835 LDI           ; and #b6 of the character's buffer, thus making it his
 25837 LDI           ; next destination}
 25839 EX DE,HL      ; Transfer the character number back to #REGh
 25840 JP 25705      ; Send the character on his way
; The contents of byte #b36 of each character's buffer are as follows:
; .
; #TABLE(default,centre,,centre,centre)
; { =h #REGh | =h Character      | =h Address | =h Byte }
; { #b183    | Little girl no. 1 | #R46884    | #b36 }
; { #b184    | Little girl no. 2 | #R47140    | #b36 }
; { #b185    | Little girl no. 3 | #R47396    | #b36 }
; { #b186    | Little girl no. 4 | #R47652    | #b38 }
; { #b187    | Little girl no. 5 | #R47908    | #b38 }
; { #b188    | Little girl no. 6 | #R48164    | #b38 }
; { #b189    | Little girl no. 7 | #R48420    | #b38 }
; { #b190    | Little boy no. 1  | #R48676    | #b40 }
; { #b191    | Little boy no. 2  | #R48932    | #b40 }
; { #b192    | Little boy no. 3  | #R49188    | #b40 }
; { #b193    | Little boy no. 4  | #R49444    | #b42 }
; { #b194    | Little boy no. 5  | #R49700    | #b42 }
; { #b195    | Little boy no. 6  | #R49956    | #b42 }
; { #b196    | Little boy no. 7  | #R50212    | #b42 }
; { #b197    | Little boy no. 8  | #R50468    | #b42 }
; { #b198    | Little boy no. 9  | #R50724    | #b44 }
; { #b199    | Little boy no. 10 | #R50980    | #b44 }
; { #b200    | MR WACKER         | #R51236    | #b48 }
; { #b201    | MR WITHIT         | #R51492    | #b48 }
; { #b202    | MR ROCKITT        | #R51748    | #b68 }
; { #b203    | MR CREAK          | #R52004    | #b68 }
; { #b204    | MISS TAKE         | #R52260    | #b38 }
; { #b205    | ALBERT            | #R52516    | #b44 }
; { #b206    | BOY WANDER        | #R52772    | #b46 }
; { #b207    | ANGELFACE         | #R53028    | #b46 }
; { #b208    | EINSTEIN          | #R53284    | #b44 }
; { #b209    | HAYLEY            | #R53540    | #b36 }
; TABLE#
; .
; The eight groups of random locations used by this routine are:
; .
; #TABLE(default)<nowrap>
; { =h #REGe | =h #REGd=#b211 | =h #REGd=#b212 | =h #REGd=#b213 | =h #REGd=#b214 }
; { #b36     | 129,17         | 144,17         | 136,17         | 189,17 }
; { #b38     | 189,17         | 189,10         | 170,17         | 182,3 }
; { #b40     | 38,3           | 10,10          | 10,17          | 66,17 }
; { #b42     | 38,3           | 10,17          | 109,17         | 75,17 }
; { #b44     | 112,17         | 145,17         | 158,17         | 37,3 }
; { #b46     | 189,10         | 183,17         | 137,17         | 72,17 }
; { #b48     | 157,17         | 38,3           | 10,17          | 92,17 }
; { #b68     | 38,3           | 90,3           | 10,17          | 90,17 }
; TABLE#

; Determine the next move of a character following another character
;
; Used by the routines at #R25944 and #R62483. Returns with one of the
; following values in bits 0-2 of #REGa depending on the relative locations of
; the follower and his target:
; .
; #TABLE(default,centre)
; { =h #REGa | =h Meaning }
; { 0        | Follower is at the same coordinates as the target }
; { 1        | Follower should go (or continue going) upstairs }
; { 2        | Follower should go (or continue going) downstairs }
; { 3        | Follower should go left }
; { 4        | Follower should go right }
; TABLE#
; .
; In addition, bit 3 of #REGa will be set if the follower is facing a closed
; door, and #REGc will hold the identifier of the closed door (see #R28736).
;
; DE Target character's coordinates
; H Follower's character number (#b200-#b204, #b210)
@label=NEXTMV
c25843 PUSH DE       ; Save the target coordinates temporarily
 25844 CALL 28242    ; Is the follower on a staircase?
 25847 JR NC,25860   ; Jump if not
; The follower is on a staircase. At this point, #REGa=#b0 if the staircase
; goes up and to the left, #b128 (bit 7 set) if it goes up and to the right.
 25849 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 25851 XOR (HL)      ; Compare the staircase's direction with the follower's
 25852 RLCA          ; Set the carry flag if the character is descending the
                     ; staircase
 25853 LD A,1        ; {#REGa=1 if the follower is ascending the staircase, 2
 25855 ADC A,0       ; if descending}
 25857 POP DE        ; Restore the target coordinates to #REGde
 25858 SCF           ; Signal: follower is on a staircase (this is ignored by
                     ; both callers)
 25859 RET           ;
; The follower is not on a staircase.
*25860 CALL 25554    ; Get the region identifier for the follower's current
                     ; location
 25863 LD L,A        ; Copy this to #REGl
 25864 POP DE        ; Restore the target coordinates to #REGde
 25865 CALL 25554    ; Get the region identifier for the target coordinates
 25868 CP L          ; Compare the current and target regions
 25869 LD D,L        ; #REGd=region ID for the follower's current location
 25870 LD L,1        ; Point #REGhl at byte #b1 of the follower's buffer
 25872 JR NZ,25909   ; Jump if the follower is not in the same region as his
                     ; target
 25874 LD A,E        ; #REGa=target x-coordinate
*25875 SUB (HL)      ; Is the follower in exactly the same location as his
                     ; target?
 25876 RET Z         ; Return if so (with the carry flag reset)
; The follower is in the same region as his target, but still has some walking
; to do. At this point the carry flag is set if the follower is to the right of
; his target, and reset if he's to the left.
 25877 SBC A,A       ; {#REGa=3 if the follower must go left, 4 if right to
 25878 ADD A,4       ; reach the target}
 25880 PUSH AF       ; Save this value briefly
 25881 LD L,0        ; Point #REGhl at byte #b0 of the follower's buffer
 25883 RRCA          ; {Set bit 7 of #REGa if the follower is facing the right
 25884 XOR (HL)      ; way to reach his target}
 25885 RLCA          ; Push bit 7 of #REGa into the carry flag
 25886 JR C,25891    ; Jump if the follower is facing the right way to reach
                     ; his target
*25888 POP AF        ; #REGa=3 (go left) or 4 (go right)
 25889 AND A         ; Clear the carry flag (the follower is not on a
                     ; staircase)
 25890 RET           ;
; The follower is in the same region as his target, and is facing the right way
; to reach him. But are there any doors in the way?
*25891 CALL 28767    ; Check for closed doors in front of the follower
 25894 JR NC,25888   ; Jump if there are none
 25896 LD A,H        ; #REGa=follower's character number
 25897 CP 210        ; Is this ERIC (in demo mode)?
 25899 JR NZ,25905   ; Jump if not
 25901 POP AF        ; #REGa=3 (go left) or 4 (go right)
 25902 XOR 7         ; 3 (go left) becomes 4 (go right) and vice versa for ERIC
 25904 RET           ; Return with the carry flag reset and #REGc holding the
                     ; door identifier
*25905 POP AF        ; #REGa=3 (go left) or 4 (go right)
 25906 ADD A,8       ; Set bit 3 (#REGa=#b11, #b12): closed door ahead
 25908 RET           ; Return with the carry flag reset and #REGc holding the
                     ; door identifier
; The follower is not in the same region as his target. This means at least one
; visit to a staircase first.
*25909 SUB 129       ; {#REGa=identifier of the top or bottom of the staircase
 25911 LD E,A        ; (see #R25700#staircases)
 25912 LD A,(DE)     ; }
 25913 LD D,A        ; {#REGa=x-coordinate of the top or bottom of the
 25914 LD E,68       ; staircase the follower will have to go to first in order
 25916 LD A,(DE)     ; to reach his target}
 25917 CP (HL)       ; Is the follower standing at this staircase already?
 25918 JR NZ,25875   ; Jump if not
; The follower is at the top or bottom of the first staircase he must negotiate
; in order to reach his target. Is he facing the right way to begin his ascent
; or descent?
 25920 INC E         ; Point #REGde at the staircase direction indicator
 25921 DEC L         ; Point #REGhl at byte #b0 of the character's buffer
 25922 LD A,(DE)     ; #REGa=#b0 if the follower must face left to negotiate
                     ; the stairs, #b128 (bit 7 set) if right
 25923 XOR (HL)      ; {Set the carry flag if the follower is facing the wrong
 25924 RLCA          ; way}
 25925 JR NC,25934   ; Jump if the follower is facing the right way to
                     ; negotiate the stairs
 25927 LD A,(HL)     ; #REGa=follower's animatory state
 25928 RLCA          ; {#REGa=3 if the follower's facing right, 4 if facing
 25929 SBC A,A       ; left
 25930 ADD A,4       ; }
 25932 AND A         ; Clear the carry flag (the follower is not on a
                     ; staircase)
 25933 RET           ;
; The follower is facing the right way to begin his ascent or descent of the
; staircase.
*25934 INC E         ; {#REGa=LSB of the routine to make the follower ascend
 25935 LD A,(DE)     ; (#b56/#R25656) or descend (#b77/#R25677) the stairs}
 25936 AND 1         ; {#REGa=1 if the follower must ascend the stairs, 2 if he
 25938 INC A         ; must descend}
 25939 RET           ; Return with the carry flag reset

; Unused
@rsub=!25940
s25940 DEFS 4

; Make a teacher find ERIC
;
; Used by the routines at #R32379, #R61595, #R62794 and #R62815. Computes the
; teacher's next move in the search for ERIC.
;
; H Teacher's character number (#b200-#b204)
@label=FINDERIC
c25944 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 25946 BIT 0,(HL)    ; Is the teacher midstride?
 25948 JR Z,25963    ; Jump if not
; This entry point is used by the routines at #R32379, #R61595 and #R62794 to
; make the teacher who his chasing ERIC finish his stride.
*25950 CALL 25012    ; Update the SRB for the teacher's current animatory state
                     ; and location
 25953 LD B,A        ; Save the animatory state in #REGb temporarily
 25954 LD L,15       ; {Byte #b15 holds the y-coordinate adjustment to make as
 25956 LD A,(HL)     ; the teacher finishes this stride: 0 normally, 1 if
                     ; descending a staircase (see later in this routine)}
 25957 ADD A,D       ; {Make the appropriate y-coordinate adjustment
 25958 LD D,A        ; }
 25959 LD A,B        ; Restore the animatory state to #REGa
 25960 JP 25600      ; Make the teacher finish his stride
; The teacher is not midstride. Is he close enough to ERIC to stop the chase?
*25963 CALL 28242    ; Is the teacher on a staircase?
 25966 JR C,26007    ; Jump if so
@ssub=LD DE,(53760+1)
 25968 LD DE,(53761) ; Pick up ERIC's coordinates in #REGde
 25972 LD L,0        ; Byte #b0 holds the teacher's animatory state
 25974 BIT 7,(HL)    ; Is the teacher facing left?
 25976 LD L,1        ;
 25978 JR Z,25984    ; Jump if so
 25980 LD A,E        ; #REGa=ERIC's x-coordinate
 25981 SUB (HL)      ; Subtract that of the teacher
 25982 JR 25986      ;
*25984 LD A,(HL)     ; #REGa=teacher's x-coordinate
 25985 SUB E         ; Subtract that of ERIC
*25986 CP 4          ; Is ERIC less than 4 horizontal spaces in front of the
                     ; teacher?
 25988 JR NC,26004   ; Jump if not
 25990 INC L         ; #REGl=#b2
 25991 LD A,(HL)     ; #REGa=teacher's y-coordinate
 25992 SUB 4         ;
 25994 JR C,25999    ; Jump if the teacher's on the top floor
 25996 CP D          ; Is ERIC at least 4 vertical spaces above the teacher?
 25997 JR NC,26004   ; Jump if so
*25999 ADD A,7       ; {Set the carry flag if ERIC is at least 4 vertical
 26001 CP D          ; spaces below the teacher}
 26002 CCF           ; {Return if ERIC is within 3 vertical spaces either side
 26003 RET C         ; of the teacher}
; The teacher is not close enough to ERIC yet to stop chasing him. Now to
; figure out the teacher's next move.
*26004 CALL 25534    ; #REGd=ERIC's y-coordinate (or the y-coordinate of the
                     ; floor he's closest to if his feet are not on the floor)
*26007 CALL 25843    ; Work out how the teacher can reach ERIC from here
 26010 BIT 3,A       ; Is there a closed door in the way?
 26012 JP NZ,28834   ; Open it if so
; There is no closed door in the way. Is the teacher on a staircase?
 26015 LD BC,0       ; Initialise the staircase indicator to 0
 26018 CP 2          ; Is the teacher descending a staircase?
 26020 JR NZ,26023   ; Jump if not
 26022 INC B         ; #REGb=1 (teacher is descending a staircase)
*26023 JR NC,26026   ; Jump if the teacher is not ascending a staircase
 26025 DEC C         ; #REGc=-1 (teacher is ascending a staircase)
*26026 CP 3          ; Is the teacher on a staircase?
 26028 JR C,26045    ; Jump if so
 26030 LD L,0        ; Byte #b0 holds the teacher's animatory state
 26032 CP 4          ; Set the carry flag if the teacher should go left
 26034 BIT 7,(HL)    ; Set the zero flag if the teacher is facing left
 26036 JR C,26043    ; Jump if the teacher must go left to reach ERIC
 26038 JR NZ,26045   ; Jump if the teacher is facing right
*26040 JP 25648      ; Turn the teacher round
*26043 JR NZ,26040   ; Turn the teacher round if he's facing right
; Now #REGbc is still 0 if the teacher is not on a staircase. Otherwise,
; #REGb=1 and #REGc=0 if he's descending a staircase, or #REGb=0 and #REGc=-1
; if he's ascending a staircase. The value in #REGb is the y-coordinate
; adjustment to make when the teacher finishes this stride later, and the value
; in #REGc is the y-coordinate adjustment to make as he goes midstride now.
*26045 LD L,15       ; {Set byte #b15 of teacher's buffer to 1 if the teacher
 26047 LD (HL),B     ; is descending a staircase, or 0 if he's ascending a
                     ; staircase or not on one}
 26048 PUSH BC       ;
 26049 CALL 25012    ; Update the SRB for the teacher's current animatory state
                     ; and location
 26052 POP BC        ;
 26053 BIT 0,C       ; Is the teacher ascending a staircase?
 26055 JR Z,26058    ; Jump if not
 26057 DEC D         ; Up a stair as the teacher goes midstride
*26058 INC A         ; One foot forward (midstride)
 26059 JP 24880      ; Update the teacher's animatory state and location and
                     ; update the SRB

; Unused
@rsub=!26062
s26062 DEFS 6

; Check whether a character is beside a chair
;
; Used by the routines at #R26263, #R31092 and #R62460. The value returned in
; #REGa is as follows:
; .
; #TABLE(default,centre)
; { =h #REGa | =h Meaning }
; { #b0      | Character is facing left and standing beside a chair }
; { #b3      | Character must walk to the next chair to the left }
; { #b4      | Character must walk to the rightmost chair }
; { #b255    | Character is not in a classroom }
; TABLE#
;
; H Character number (#b183-#b210)
@label=BYSEAT
c26068 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 26070 LD A,(HL)     ; #REGa=character's y-coordinate
 26071 LD DE,54066   ; The table at #R54066 contains the x-coordinates of the
                     ; left ends of the classrooms
 26074 LD B,3        ; There are three sets of chairs on the top floor
 26076 CP B          ; Is the character on the top floor?
 26077 JR Z,26086    ; Jump if so
 26079 DEC B         ; #REGb=2 (two sets of chairs on the middle floor)
 26080 CP 10         ; Is the character on the middle floor?
 26082 JR NZ,26101   ; Jump if not
 26084 LD E,53       ; #REGde=#R54069
*26086 DEC L         ;
 26087 LD A,(HL)     ; #REGa=character's x-coordinate
 26088 EX DE,HL      ; #REGhl=#R54066 if the character is on the top floor,
                     ; #R54069 if he's on the middle floor
*26089 CP (HL)       ; Is the character to the left of this classroom?
 26090 JR C,26097    ; Jump if so
 26092 INC H         ; Point #REGhl at the x-coordinate of the right end of the
                     ; classroom (in the table at #R54322)
 26093 CP (HL)       ; Is the character in this classroom?
 26094 JR C,26104    ; Jump if so
 26096 DEC H         ;
*26097 INC L         ;
 26098 DJNZ 26089    ;
 26100 EX DE,HL      ;
*26101 LD A,255      ; Signal: the character is not in a classroom
 26103 RET           ;
; The character is in a classroom. But is he beside a chair?
*26104 INC H         ; Point #REGhl at the x-coordinate of the leftmost seat in
                     ; the classroom (in the table at #R54578)
 26105 CP (HL)       ; Is the character to the right of the leftmost chair?
 26106 JR NC,26112   ; Jump if so
*26108 LD A,4        ; Signal: the character must walk to the rightmost chair
 26110 EX DE,HL      ;
 26111 RET           ;
*26112 INC H         ; Point #REGhl at the x-coordinate of the rightmost seat
                     ; in the classroom (in the table at #R54834)
 26113 CP (HL)       ; Is the character to the left of the rightmost chair?
 26114 JR C,26120    ; Jump if so
*26116 LD A,3        ; Signal: the character must walk to the next chair to the
                     ; left
 26118 EX DE,HL      ;
 26119 RET           ;
; The character is between the leftmost and rightmost chairs in the classroom.
*26120 DEC E         ; #REGe=0
 26121 LD A,(DE)     ; #REGa=character's animatory state
 26122 INC E         ; #REGe=1
 26123 RLCA          ;
 26124 JR C,26108    ; Jump if the character is facing right
 26126 LD A,(DE)     ; #REGa=character's x-coordinate
 26127 XOR (HL)      ; {The chairs in a classroom have either all odd or all
 26128 RRCA          ; even x-coordinates; is the character standing beside
                     ; one?}
 26129 JR NC,26116   ; Jump if not
 26131 EX DE,HL      ;
 26132 XOR A         ; Signal: the character is facing left and standing beside
                     ; a chair
 26133 RET           ;
; The contents of the classroom/chairs location tables are as follows:
; .
; #TABLE(default,centre,centre,centre,centre)<nowrap>
; {  =c2,h Room                 | =c2,h Chairs }
; { #R54066(0)   | #R54322(23)  | #R54578(11)  | #R54834(22)  | Blue Room }
; { #R54067(40)  | #R54323(63)  | #R54579(50)  | #R54835(61)  | Yellow Room }
; { #R54068(159) | #R54324(180) | #R54580(168) | #R54836(179) | Top-floor room in the girls' skool }
; { #R54069(30)  | #R54325(54)  | #R54581(40)  | #R54837(53)  | Science Lab }
; { #R54070(159) | #R54326(179) | #R54582(167) | #R54838(178) | Middle-floor room in the girls' skool }
; TABLE#

; Unused
@rsub=!26134
s26134 DEFS 2

; Check whether a chair is occupied
;
; Used by the routine at #R26175. Returns with the zero flag set if the chair
; beside the character looking for a seat is already occupied by one of the
; potential occupants being checked.
;
; B Number of potential occupants to check
; C Animatory state mask (#b135 or #b143)
; D Number of the first potential occupant to check
; H Number of the character looking for a seat (#b183-#b209)
; L #b1
@label=CHECKSEAT
c26136 CALL 26145    ; Are any of the first #REGb potential occupants sitting
                     ; here?
 26139 RET Z         ; Return if so
 26140 LD BC,655     ; #REGb=#b2 (BOY WANDER and ANGELFACE), #REGc=#b143
 26143 LD D,206      ; #b206=BOY WANDER
; This entry point also is used by the routine at #R26175.
*26145 LD E,1        ;
 26147 LD A,(DE)     ; #REGa=x-coordinate of the potential occupant
 26148 CP (HL)       ; Compare with that of the character looking for a seat
 26149 JR NZ,26171   ; Jump ahead to consider the next potential occupant if
                     ; they don't match
 26151 INC E         ; #REGe=#b2
 26152 INC L         ; #REGl=#b2
 26153 LD A,(DE)     ; #REGa=y-coordinate of the potential occupant
 26154 DEC E         ; #REGe=#b1
 26155 CP (HL)       ; Compare with the y-coordinate of the character looking
                     ; for a seat
 26156 DEC HL        ; #REGl=#b1
 26157 JR NZ,26171   ; Jump if the potential occupant is not in the same
                     ; location as the character looking for a seat
 26159 DEC E         ; #REGe=#b0
 26160 LD A,(DE)     ; #REGa=potential occupant's animatory state
 26161 AND C         ; Discard the character-identifying bits and keep only the
                     ; 'direction' bit and 'action' bits (#REGc=10001111 for
                     ; BOY WANDER, ANGELFACE or ERIC, and 10000111 for anybody
                     ; else)
 26162 CP 4          ; Is the potential occupant sitting in the chair here?
 26164 JR NZ,26171   ; Jump if not
 26166 LD E,18       ; {Is there an uninterruptible subcommand routine address
 26168 LD A,(DE)     ; in bytes #b17 and #b18 of the potential occupant's
 26169 AND A         ; buffer?}
 26170 RET Z         ; Return if not
*26171 INC D         ; Next potential occupant to test
 26172 DJNZ 26145    ; Jump back until done
 26174 RET           ;

; Knock the current occupant (if any) out of a chair
;
; Used by the routines at #R26263 and #R62460. Knocks the current occupant (if
; any) out of the chair next to the character looking for a seat.
;
; H Number of the character looking for a seat (#b183-#b209)
@label=CLEARSEAT
c26175 LD D,183      ; #b183=little girl no. 1
 26177 LD L,1        ;
 26179 LD BC,4487    ; #REGb=#b17 (7 girls, 10 boys), #REGc=#b135 (animatory
                     ; state mask)
 26182 CALL 26145    ; Are any of these characters sitting in the chair?
 26185 JR Z,26215    ; Jump if so
 26187 LD BC,647     ; #REGb=#b2 (EINSTEIN and HAYLEY), #REGc=#b135 (animatory
                     ; state mask)
 26190 LD D,208      ; #b208=EINSTEIN
 26192 CALL 26136    ; Is one of the main kids sitting here?
 26195 JR Z,26215    ; Jump if so
@ssub=LD DE,53760+18
 26197 LD DE,53778   ; #REGd=#b210 (ERIC), #REGe=#b18
 26200 INC B         ; #REGb=1 (just ERIC)
 26201 XOR A         ; {Zero out byte #b18 of ERIC's buffer (to indicate that
 26202 LD (DE),A     ; he may be pushed out of the seat if he's in it)}
 26203 CALL 26145    ; Is ERIC sitting here?
 26206 RET NZ        ; Return if not
 26207 LD DE,32763   ; {#REGhl=#R32763 (ERIC's primary status flags)
 26210 EX DE,HL      ; }
@bfix=LD (HL),128
@bfix=/              ; that he's been knocked to the floor
 26211 SET 7,(HL)    ; Set bit 7 of ERIC's primary status flags, indicating
                     ; that he's been knocked to the floor; however, bit 7 is
                     ; ignored by the routine at #R63405 (because bit 2 is also
                     ; set), so ERIC actually stays in his seat (which is a
                     ; #BUG#seat(bug))
 26213 EX DE,HL      ; Restore the number of the character looking for a seat
                     ; to #REGh
 26214 RET           ;
; A character (other than ERIC) must be knocked out of the chair.
@ssub=LD A,26224/256
*26215 LD A,102      ; {Place the address of the uninterruptible subcommand
 26217 LD (DE),A     ; routine at #R26224 into bytes #b17 and #b18 of the
 26218 DEC E         ; buffer of the character who's been knocked out of the
@ssub=LD A,26224%256
 26219 LD A,112      ; chair
 26221 LD (DE),A     ; }
 26222 RET           ;

; Unused
@rsub=!26223
s26223 DEFB 0

; Deal with a character who's been dethroned (1)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a character's buffer by the routine at #R26175 when he's
; been knocked out of a chair.
;
; H Dethroned character's number (#b183-#b209)
@label=UNSEAT1
c26224 LD L,19       ; {Set the parameter controlling the delay before the
 26226 LD (HL),4     ; character gets up to look for another seat}
 26228 LD L,17       ; {Replace the address of this routine in bytes #b17 and
@ssub=LD (HL),26239%256
@rsub=LD (HL),26239%256 ; #b18 of the character's buffer with #R26239
@rsub=INC L
@rsub=LD (HL),26239/256 ; }
 26230 LD (HL),127   ; #b18 of the character's buffer with #R26239}
 26232 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 26235 INC A         ; #REGa=animatory state of character sitting on the floor
 26236 JP 24880      ; Update the character's animatory state and update the
                     ; SRB

; Deal with a character who's been dethroned (2)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a character's buffer by the routine at #R26224.
;
; H Dethroned character's number (#b183-#b209)
@label=UNSEAT2
c26239 LD L,19       ; Byte #b19 of the character's buffer holds the delay
                     ; counter
 26241 DEC (HL)      ; Is it time for the character to get up off the floor
                     ; yet?
 26242 RET NZ        ; Return if not
 26243 LD L,17       ; {Replace the address of this routine in bytes #b17 and
@ssub=LD (HL),26263%256
@rsub=LD (HL),26263%256 ; #b18 of the character's buffer with #R26263
@rsub=INC L
@rsub=LD (HL),26263/256 ; }
 26245 LD (HL),151   ; #b18 of the character's buffer with #R26263}
 26247 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 26250 AND 248       ; #REGa=animatory state of the character standing up
 26252 LD C,A        ; Store this in #REGc temporarily
 26253 LD A,H        ; #REGa=number of the character knocked out of the chair
 26254 CP 208        ; Is this EINSTEIN?
 26256 JR Z,26259    ; Jump if so
 26258 DEC E         ; #REGe=x-coordinate of the character upon standing up
                     ; (everyone but EINSTEIN will get up and try the seat in
                     ; front)
*26259 LD A,C        ; #REGa=animatory state of the character standing up
 26260 JP 24880      ; Update the character's animatory state and location and
                     ; update the SRB

; Deal with a character who is looking for a seat
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a character's buffer by the routine at #R26239 (after he's
; been knocked out of his chair and just got up to look for another one - or
; the same one, in EINSTEIN's case), or by the routine at #R26304.
;
; H Character number (#b183-#b209)
@label=FINDSEAT2
c26263 LD L,0        ; Byte #b0 holds the character's animatory state
 26265 BIT 0,(HL)    ; Is the character midstride?
 26267 JP NZ,25597   ; Finish the stride if so
 26270 CALL 26068    ; {Is the character standing beside a chair?
 26273 AND A         ; }
 26274 JR NZ,26293   ; Jump if not
 26276 CALL 26175    ; Knock anybody who's sitting here out of the way
 26279 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 26282 AND 248       ;
 26284 ADD A,4       ; #REGa=animatory state of the character (as if sitting in
                     ; a chair)
 26286 LD L,18       ; {Remove the address of this routine from bytes #b17 and
 26288 LD (HL),0     ; #b18 of the character's buffer}
 26290 JP 24880      ; Update the character's animatory state and update the
                     ; SRB
*26293 CP 4          ; {#REGa=#b0 if the character must walk back to the
 26295 SBC A,A       ; rightmost chair in the room, or #b255 if there is one in
                     ; front of him}
 26296 LD L,0        ; Byte #b0 holds the character's animatory state
 26298 XOR (HL)      ; {Reset the carry flag if the character must turn round
 26299 RLCA          ; }
 26300 JP 25646      ; Update the character's animatory state and update the
                     ; SRB

; Unused
@rsub=!26303
s26303 DEFB 0

; Make a character find a seat
;
; Used by command lists #R51516(#b0), #R51772(#b2), #R52028(#b4), #R52284(#b6),
; #R52540(#b8), #R58768(#b32), #R58779(#b34), #R59488(#b46), #R59499(#b48),
; #R59519(#b50), #R59530(#b52), #R59801(#b82), #R59812(#b84) and #R59823(#b86).
; Makes a character start looking for a seat.
;
; H Character number (#b183-#b209)
@label=FINDSEAT1
c26304 LD L,4        ; {Remove the address of this primary command routine from
 26306 LD (HL),0     ; bytes #b3 and #b4 of the character's buffer}
 26308 LD L,18       ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),26263/256
 26310 LD (HL),102   ; routine at #R26263 (make character look for a seat) into
 26312 DEC L         ; bytes #b17 and #b18 of the character's buffer
@ssub=LD (HL),26263%256
 26313 LD (HL),151   ; }
 26315 JP 26263      ; Start looking for a seat

; Get the next character of a message being spoken or written
;
; Used by the routines at #R26513, #R27144 and #R27419. Returns with the next
; character in #REGa.
;
; H Number of the character speaking or writing (#b183-#b209)
@label=NEXTCHR
c26318 LD L,16       ; {Bytes #b15 and #b16 hold the address of the next
 26320 LD A,(HL)     ; character in the sub-submessage being written/spoken (if
                     ; any)}
 26321 AND A         ; Are we working on a sub-submessage?
 26322 JR NZ,26332   ; Jump if so
 26324 LD L,14       ; {Bytes #b13 and #b14 hold the address of the next
 26326 LD A,(HL)     ; character in the submessage being written/spoken (if
                     ; any)}
 26327 AND A         ; Are we working on a submessage?
 26328 JR NZ,26332   ; Jump if so
 26330 LD L,12       ; We're working on a top-level message
*26332 LD D,(HL)     ; {#REGde=address of the next character in the
 26333 DEC L         ; (sub)(sub)message
 26334 LD E,(HL)     ; }
 26335 LD A,(DE)     ; Pick up the character code in #REGa
 26336 INC DE        ; {Move the pointer to the next character and store the
 26337 LD (HL),E     ; address for future reference
 26338 INC L         ;
 26339 LD (HL),D     ; }
 26340 AND A         ; Has the end of the (sub)(sub)message been reached?
 26341 JR NZ,26352   ; Jump if not
; We've reached the end of the (sub)(sub)message.
 26343 LD (HL),0     ; Signal: end of (sub)(sub)message
 26345 DEC L         ; #REGl=#b11 (top-level message), #b13 (submessage) or
                     ; #b15 (sub-submessage)
 26346 BIT 2,L       ; Has the end of the top-level message been reached
                     ; (#REGl=#b11)?
 26348 RET Z         ; Return if so
 26349 DEC L         ; {Otherwise go up to the submessage or the top-level
 26350 JR 26332      ; message and jump back to deal with it}
; We haven't reached the end of the (sub)(sub)message yet. Determine whether
; the next code is a regular character code or a pointer to another message.
*26352 SUB 32        ;
 26354 CP 96         ;
 26356 JR NC,26361   ; Jump with character codes #b1-#b31 or #b128 onwards
 26358 ADD A,32      ;
 26360 RET           ; Return with the standard ASCII code in #REGa
*26361 ADD A,32      ;
 26363 CP 3          ;
 26365 RET C         ; Return with character codes #b1 and #b2 (end of line)
; The next character in the message is actually a pointer to another message.
; Find the address of that message, and store it for future reference.
 26366 LD E,A        ; {#REGde points to the LSB of the start address of the
 26367 LD D,254      ; (sub)submessage}
 26369 INC L         ; #REGl=#b13 (submessage) or #b15 (sub-submessage)
 26370 LD A,(DE)     ; #REGa=LSB of the start address of the (sub)submessage
 26371 LD (HL),A     ; Store it in byte #b13 or #b15 of the character's buffer
 26372 INC L         ; #REGl=#b14 (submessage) or #b16 (sub-submessage)
 26373 INC D         ; {#REGa=MSB of the address of the (sub)submessage
 26374 LD A,(DE)     ; }
 26375 LD (HL),A     ; Store it in byte #b14 or #b16 of the character's buffer
 26376 JR 26332      ; Jump back to collect a character from this
                     ; (sub)submessage

; Unused
@rsub=!26378
s26378 DEFS 2

; Update the SRB for a blackboard
;
; Used by the routines at #R26513 and #R26639. Updates the #R32512(screen
; refresh buffer) (SRB) so that the character squares at (#REGe,#REGd) and
; (#REGe+1,#REGd) are marked dirty. Two character squares in a row are marked
; dirty to ensure that blackboard contents are properly displayed (characters
; written on a blackboard may cross character square boundaries).
;
; D y-coordinate of the play area
; E x-coordinate of the play area
@label=SRBXY
c26380 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 26383 SUB 2         ;
 26385 JR C,26389    ; Jump if the far left wall of the boys' skool is
                     ; on-screen
 26387 CP E          ; Is the leftmost point requiring refresh off-screen to
                     ; the left by at least two character squares?
 26388 RET NC        ; Return if so (nothing to do)
*26389 ADD A,33      ; #REGa=column of the play area at the far right of the
                     ; screen
 26391 CP E          ; Is the leftmost point requiring refresh off-screen to
                     ; the right?
 26392 RET C         ; Return if so (nothing to do)
 26393 PUSH DE       ; Save the coordinates for now
 26394 SUB 32        ; {#REGa=screen x-coordinate corresponding to the play
 26396 CPL           ; area x-coordinate in #REGe (-1, 0-31)
 26397 ADD A,E       ; }
 26398 BIT 7,A       ; Is the leftmost point requiring refresh on-screen?
 26400 JR Z,26403    ; Jump if so
 26402 INC A         ; #REGa=0
*26403 RLCA          ; {#REGa=8x (x=column of the screen containing the first
 26404 RLCA          ; character square to be refreshed)
 26405 RLCA          ; }
 26406 LD E,A        ; Store this in #REGe temporarily
 26407 AND 56        ; {Set the instruction at #R26428 below to #S/SET n,(HL)/
 26409 CPL           ; where n is the appropriate bit in the SRB byte
 26410 DEC A         ;
@ssub=LD (26428+1),A
 26411 LD (26429),A  ; }
 26414 PUSH AF       ;
 26415 LD A,E        ; #REGa=8x again
 26416 RLCA          ; {Point #REGhl at the appropriate byte of the SRB
 26417 RLCA          ;
 26418 AND 3         ;
 26420 ADD A,D       ;
 26421 ADD A,D       ;
 26422 ADD A,D       ;
 26423 ADD A,D       ;
 26424 LD E,A        ;
 26425 LD D,127      ;
 26427 EX DE,HL      ; }
@label=BOARDSRB1
 26428 SET 0,(HL)    ; Set the appropriate bit in the SRB byte for the leftmost
                     ; character square that needs refreshing; this instruction
                     ; is modified earlier in this routine to set the required
                     ; bit
 26430 POP AF        ;
 26431 ADD A,56      ;
 26433 JR C,26443    ; Jump unless we've just set bit 0 of an SRB byte
 26435 INC L         ; Next SRB byte
 26436 LD A,L        ; {Does this SRB byte correspond to the first byte of the
 26437 AND 3         ; next row of the screen?}
 26439 JR Z,26450    ; If so, skip it
 26441 LD A,254      ; Otherwise set bit 7 in this SRB byte
*26443 OR 192        ;
@ssub=LD (26448+1),A
 26445 LD (26449),A  ; Set the instruction at #R26448 below to #S/SET m,(HL)/
                     ; where m is the appropriate bit in the SRB byte
@label=BOARDSRB2
 26448 SET 0,(HL)    ; Set the appropriate bit in the SRB byte for the
                     ; rightmost character square that needs refreshing; this
                     ; instruction is modified immediately before execution to
                     ; set the required bit
*26450 EX DE,HL      ; Restore the original contents of #REGhl
 26451 POP DE        ; Restore the play area coordinates to #REGde
 26452 RET           ;

; Get the identifier and coordinates of the blackboard close to a character
;
; Used by the routines at #R24133, #R26513, #R26752, #R28658 and #R61696. If
; the character is not standing at a blackboard, the routine returns with the
; carry flag set. Otherwise the routine returns with the carry flag reset,
; #REGb holding the blackboard identifier (the LSB of #R32596, #R32602,
; #R32608, #R32614 or #R32620), and #REGde holding the coordinates of the top
; left-hand square of the board.
;
; H Character number (#b200-#b204, #b206)
@label=BOARDID
c26453 LD B,3        ; There are three blackboards on the top floors
 26455 LD DE,54071   ; The table at #R54071 contains the x-coordinates of the
                     ; left edges of the blackboards
 26458 LD L,2        ; Byte #b2 of the character's buffer holds his
                     ; y-coordinate
 26460 LD A,(HL)     ; Pick this up in #REGa
 26461 DEC L         ; #REGl=#b1
 26462 CP B          ; Is the character on the top floor?
 26463 JR Z,26472    ; Jump if so
 26465 LD E,58       ; #REGde=#R54074
 26467 DEC B         ; #REGb=2 (two blackboards on the middle floors)
 26468 CP 10         ; Is the character on the middle floor?
 26470 JR NZ,26484   ; Jump if not
*26472 LD A,(DE)     ; #REGa=x-coordinate of the left edge of a blackboard
 26473 CP (HL)       ; Is the character to the left of this blackboard?
 26474 JR NC,26484   ; Jump if so
@label=BOARDDIST
 26476 ADD A,4       ; {Is the character no more than 4 (or 12, if coming from
 26478 CP (HL)       ; #R28658) spaces to the right of the left edge of this
                     ; blackboard?}
 26479 JR NC,26486   ; Jump if so
 26481 INC E         ; Next blackboard
 26482 DJNZ 26472    ;
*26484 SCF           ; Signal: the character is not standing at a blackboard
 26485 RET           ;
; The character is standing close enough to the blackboard (to either write on
; it or start wiping it).
*26486 EX DE,HL      ; Now #REGhl points to the blackboard info table
 26487 LD A,(HL)     ; #REGa=x-coordinate of the left edge of the blackboard
                     ; (from the table at #R54071)
 26488 INC H         ;
 26489 LD B,(HL)     ; #REGb=blackboard identifier (from the table at #R54327)
 26490 INC H         ;
 26491 LD H,(HL)     ; #REGh=y-coordinate of the top row of the blackboard
                     ; (from the table at #R54583)
 26492 LD L,A        ; Pass the x-coordinate to #REGl
 26493 AND A         ; Clear the carry flag to indicate success
 26494 EX DE,HL      ; #REGde=coordinates of the top-left corner of the
                     ; blackboard
 26495 RET           ;
; The contents of the blackboard info tables are as follows:
; .
; #TABLE(default,centre,centre,centre)<wrapalign>
; { =h x         | =h ID          | =h y       | =h Room }
; { #R54071(3)   | #R54327(#b84)  | #R54583(3) | Blue Room }
; { #R54072(41)  | #R54328(#b90)  | #R54584(3) | Yellow Room }
; { #R54073(161) | #R54329(#b96)  | #R54585(3) | Top-floor room in the girls'
;                                                skool }
; { #R54074(32)  | #R54330(#b102) | #R54586(9) | Science Lab }
; { #R54075(161) | #R54331(#b108) | #R54587(9) | Middle-floor room in the
;                                                girls' skool }
; TABLE#

; Move the bike if it's obstructing the boys' skool door or the gate
;
; Used by the routine at #R29052.
;
; A Bike's animatory state
; DE (96,17) or (136,17)
@label=MVBIKE
c26496 AND 5         ; Is the bike lying on the floor?
 26498 JR NZ,26510   ; Jump if not
 26500 LD H,211      ; #b211=bike
 26502 PUSH DE       ; Save the bike's new location temporarily
 26503 CALL 25012    ; Update the SRB for the bike's current animatory state
                     ; and location
 26506 POP DE        ; Restore the bike's new location to #REGde
 26507 JP 24880      ; Update the bike's location and update the SRB
; The bike is not lying on the floor, so either ERIC is riding it, or it's
; travelling of its own accord. In this case, ALBERT must wait for it to pass
; before closing the skool door or gate.
*26510 POP BC        ; Drop the return address, which has the effect of making
                     ; ALBERT wait
 26511 RET           ;

; Unused
@rsub=!26512
s26512 DEFB 0

; Write a single character on a blackboard
;
; Used by the routine at #R26752. Returns with the zero flag set if the end of
; the message has been reached.
;
; H Number of the character writing on the board (#b200-#b204, #b206)
@label=WRITECHR
c26513 CALL 26318    ; #REGa=ASCII code of the next character from the message
                     ; being written
; This entry point is used by the routine at #R24175 when ERIC's writing on a
; board.
*26516 LD C,A        ; #REGc=ASCII code of the next character from the message
                     ; being written
 26517 CALL 26453    ; Collect information about the blackboard
 26520 LD A,C        ;
 26521 LD C,B        ; {Point #REGbc at the blackboard's buffer (#R32596,
 26522 LD B,127      ; #R32602, #R32608, #R32614 or #R32620)}
 26524 AND A         ; Have we reached the end of the message?
 26525 JR NZ,26531   ; Jump if not
 26527 DEC A         ; #REGa=#b255
*26528 LD (BC),A     ; Set the first byte of the blackboard's buffer to #b255
                     ; if the message is finished, or the the pixel column
                     ; number for the next letter to be written otherwise
 26529 INC A         ; Set the zero flag if the end of the message has been
                     ; reached
 26530 RET           ;
; We haven't reached the end of the message yet. Examine the next character to
; be written.
*26531 CP 2          ; Character code #b2 is newline
 26533 JR NZ,26539   ; Jump unless we're starting a new line
 26535 LD A,64       ; This is the pixel column number of the start of the
                     ; bottom line of the blackboard
 26537 JR 26528      ;
; The next character to be written is printable (as opposed to newline).
*26539 PUSH HL       ; Save the character number (in #REGh) for now
 26540 LD L,A        ; Place the ASCII code of the character to be written in
                     ; #REGl
 26541 LD H,215      ; Now (#REGhl)=bit width of this character
 26543 LD A,(BC)     ; #REGa=current pixel column number on the blackboard
 26544 AND 63        ; {Set the carry flag if there's not enough room on the
 26546 ADD A,192     ; current line to print the next character (plus one blank
 26548 SCF           ; pixel column)
 26549 ADC A,(HL)    ; }
 26550 LD A,(BC)     ; #REGa=current pixel column number on the blackboard
 26551 JR NC,26557   ; Jump if there's enough room on the current line for the
                     ; character
 26553 CPL           ; {Otherwise move to the other line of the blackboard by
 26554 AND 64        ; setting the current pixel column number to 0 or 64 as
 26556 LD (BC),A     ; appropriate}
*26557 RRCA          ; {Divide the pixel column number by 8 to get the
 26558 RRCA          ; corresponding character square number (0-7); also keep
 26559 RRCA          ; bit 3 for now to check which line of the board we're on
 26560 AND 15        ; }
 26562 CP 8          ; Are we on the top line of the board?
 26564 JR C,26569    ; Jump if so (#REGa=0-7)
 26566 INC D         ; #REGd=4 or 9 (y-coordinate of the bottom line of the
                     ; board)
 26567 AND 7         ; #REGa=0-7
*26569 ADD A,E       ; {#REGe=x-coordinate of the blackboard tile on which the
 26570 LD E,A        ; next character will be written}
 26571 CALL 26380    ; Update the SRB for this blackboard
 26574 LD A,(BC)     ; #REGa=current pixel column number on the blackboard
 26575 AND 7         ; {Modify the #S/RES n,(HL)/ instruction at #R26609 below
 26577 ADD A,A       ; to reset the appropriate bit for the current pixel
 26578 ADD A,A       ; column
 26579 ADD A,A       ;
 26580 CPL           ;
 26581 SUB 65        ;
@ssub=LD (26609+1),A
 26583 LD (26610),A  ; }
 26586 LD A,(BC)     ; #REGa=current pixel column number on the blackboard
 26587 ADD A,(HL)    ; Add the bit-width of character to be written
 26588 INC A         ; Add 1 to make a blank vertical pixel line after the
                     ; character to be written
 26589 LD (BC),A     ; Set the pixel column number for the next character to be
                     ; written
 26590 LD C,(HL)     ; #REGc=bit-width of the character to be written
 26591 EX DE,HL      ; Now #REGde points at the bitmap data for the character
                     ; to be written on the board, and #REGhl holds the
                     ; coordinates of the blackboard tile on which the
                     ; character will be written
 26592 LD A,H        ; #REGa=blackboard tile y-coordinate
 26593 LD H,181      ; {Pick up the Q value (#b0<=Q<=#b143) for the blackboard
 26595 LD L,(HL)     ; tile from page #R46336(#b181) in #REGl (see #R24684)}
 26596 ADD A,160     ; {Collect the LSB of the base address of the skool UDG
 26598 LD H,A        ; for the blackboard tile in #REGl
 26599 LD L,(HL)     ; }
*26600 LD H,128      ; The base page for all blackboard tile UDGs is #b128
 26602 INC D         ; Point #REGde at the next pixel column of bitmap data for
                     ; the character to be written
 26603 LD A,(DE)     ; Pick this up in #REGa
 26604 LD B,8        ; 8 horizontal pixel lines in each character square
*26606 RLCA          ; Should a bit of chalk appear here?
 26607 JR NC,26611   ; Jump if not
@label=CHALK
 26609 RES 7,(HL)    ; Reset the appropriate bit in the skool UDG for the
                     ; blackboard tile, thus making a bit of chalk appear; this
                     ; instruction is modified by this routine to reset the
                     ; required bit
*26611 INC H         ; Next row of the blackboard tile UDG
 26612 DJNZ 26606    ; Jump back until all 8 rows are done
@ssub=LD A,(26609+1)
 26614 LD A,(26610)  ; {Change the #S/RES n,(HL)/ instruction at #R26609 above
 26617 OR 64         ; to #S/RES n-1,(HL)/ if n>0, or #S/RES 7,(HL)/ if n=0
 26619 SUB 8         ;
 26621 AND 191       ;
@ssub=LD (26609+1),A
 26623 LD (26610),A  ; }
 26626 CP 190        ; Did we just draw the rightmost vertical pixel line in
                     ; the current blackboard tile?
 26628 JR NZ,26631   ; Jump if so
 26630 INC L         ; Set #REGl to the LSB of the base address of the skool
                     ; UDG for the next blackboard tile to the right
*26631 DEC C         ; Next pixel column of the character bitmap
 26632 JR NZ,26600   ; Jump back to do the remaining pixel columns
 26634 INC C         ; Reset the zero flag (the message is not finished yet)
 26635 POP HL        ; Restore the character number to #REGh
 26636 RET           ;

; Unused
@rsub=!26637
s26637 DEFS 2

; Make a teacher wipe a blackboard
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of the teacher's buffer by the routine at #R61696.
;
; H Teacher's character number (#b201-#b204)
@label=WIPE
c26639 CALL 28658    ; Collect information about the board
 26642 LD L,11       ; {32 distinct actions are needed to wipe the board; store
 26644 LD (HL),32    ; this counter in byte #b11 of the teacher's buffer}
 26646 INC L         ; #REGl=#b12
 26647 LD A,E        ; #REGa=x-coordinate of the left edge of the board
 26648 ADD A,7       ; #REGa=x-coordinate of the right edge of the board
 26650 LD (HL),A     ; Store this in byte #b12 of the teacher's buffer
 26651 INC L         ; {Place the y-coordinate of the top line of the board
 26652 LD (HL),D     ; into byte #b13 of the teacher's buffer}
 26653 INC L         ; {And the board identifier (LSB of #R32596, #R32602,
 26654 LD (HL),B     ; #R32608, #R32614 or #R32620) into byte #b14}
 26655 LD L,9        ; {Change the routine address in bytes #b9 and #b10 of the
@ssub=LD (HL),26659%256
@rsub=LD (HL),26659%256 ; teacher's buffer to #R26659 (below)
@rsub=INC L
@rsub=LD (HL),26659/256 ; }
 26657 LD (HL),35    ; teacher's buffer to #R26659 (below)}
@label=WIPE0
 26659 LD L,11       ; Byte #b11 holds the board-wiping action counter
 26661 DEC (HL)      ; Decrement the counter
 26662 JP P,26678    ; Jump if the board has not yet been fully wiped
; The teacher has finished wiping the board. Mark the board as clean, and move
; the teacher on to his next task.
 26665 LD L,14       ; {Collect the board identifier in #REGl
 26667 LD L,(HL)     ; }
 26668 LD H,127      ; #REGhl now points to the board's buffer
 26670 LD (HL),0     ; {Signal that the board has been wiped by zeroing the
 26672 INC L         ; first two bytes of the blackboard's buffer
 26673 LD (HL),0     ; }
 26675 JP 25488      ; Now the job's been done, terminate this interruptible
                     ; subcommand
; The board's not clean yet. Work out what the teacher has to do next: wipe, or
; move down the board to the next spot.
*26678 CALL 25012    ; Update the SRB for the teacher's current animatory state
                     ; and location
 26681 AND 120       ; #REGa=teacher's base animatory state
 26683 LD L,11       ; Point #REGhl at the board-wiping action counter
 26685 BIT 0,(HL)    ; Is the teacher midstride or wiping (arm up)?
 26687 JR Z,26742    ; Jump if so
 26689 BIT 1,(HL)    ; Are we ready for a wipe action?
 26691 JR Z,26697    ; Jump if so
 26693 INC A         ; #REGa=animatory state of the teacher midstride
 26694 JP 24880      ; Update the teacher's animatory state and update the SRB
; The teacher's next action will be a wipe, so raise his arm.
*26697 ADD A,7       ; #REGa=animatory state of the teacher with his arm up
 26699 CALL 24880    ; Update the teacher's animatory state and update the SRB
 26702 LD L,12       ; {Collect the x-coordinate of the part of the board to be
 26704 LD E,(HL)     ; wiped into #REGe}
 26705 DEC (HL)      ; Decrease this x-coordinate ready for the next wipe
 26706 INC L         ; {Collect the y-coordinate of the top line of the
 26707 LD D,(HL)     ; blackboard into #REGd}
 26708 CALL 26380    ; Update the SRB for the top line of the blackboard
 26711 INC D         ; #REGd=y-coordinate of the bottom line of the blackboard
 26712 CALL 26380    ; Update the SRB for the bottom line of the blackboard
 26715 LD A,D        ; {Prepare #REGh for picking up skool UDG base address
 26716 ADD A,160     ; LSBs later
 26718 LD H,A        ; }
 26719 LD D,181      ; {Pick up the Q value (#b0<=Q<=#b143) for the lower
 26721 LD A,(DE)     ; blackboard tile being wiped from page #R46336(#b181) in
 26722 LD L,A        ; #REGl}
 26723 LD A,(HL)     ; {Collect the LSB of the base address of the skool UDG
 26724 LD L,A        ; for this blackboard tile in #REGl}
 26725 SUB 8         ; {Set #REGe to the LSB of the base address of the skool
 26727 LD E,A        ; UDG for the upper blackboard tile}
 26728 LD H,128      ; {The base page for all blackboard tile UDGs is #b128
 26730 LD D,H        ; }
 26731 LD B,8        ; 8 lines per character square
 26733 LD A,255      ; #b255=blank blackboard byte
*26735 LD (HL),A     ; Clear a pixel line in the skool UDG for the lower
                     ; blackboard tile
 26736 LD (DE),A     ; Clear a pixel line in the skool UDG for the upper
                     ; blackboard tile
 26737 INC H         ; Next pixel row of the lower blackboard tile UDG
 26738 INC D         ; Next pixel row of the upper blackboard tile UDG
 26739 DJNZ 26735    ; Jump back until the two blackboard tile UDGs have been
                     ; cleared
 26741 RET           ;
; The teacher is either wiping or midstride while on his way to the next spot
; along the board. At this point, #REGa holds the teacher's base animatory
; state.
*26742 BIT 1,(HL)    ; Is the teacher wiping?
 26744 JR Z,26747    ; Jump if so
 26746 DEC E         ; The teacher is midstride, so now move him one space to
                     ; the left
*26747 JP 24880      ; Update the teacher's animatory state and location and
                     ; update the SRB

; Unused
@rsub=!26750
s26750 DEFS 2

; Make a character write on a blackboard
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of the character's buffer by the routines at #R32497 and #R61696.
;
; H Character number (#b201-#b204, #b206)
@label=WRITEBRD
c26752 CALL 26453    ; Collect information about the board
 26755 INC B         ; {Point #REGbc at the second byte of the board's buffer
 26756 LD C,B        ;
 26757 LD B,127      ; }
 26759 LD A,(BC)     ; Pick this up in #REGa
 26760 AND A         ; Has the board been written on already?
 26761 JP NZ,25488   ; Terminate this interruptible subcommand if so
 26764 LD A,H        ; #REGa=character's number
 26765 LD (BC),A     ; Signal: this character wrote on the board
 26766 DEC C         ; {Point #REGbc at the first byte of the board's buffer
 26767 LD A,1        ; (#R32596, #R32602, #R32608, #R32614 or #R32620) and
 26769 LD (BC),A     ; initialise the pixel column to 1}
 26770 LD L,16       ; {Make sure there are no (sub)submessage addresses lying
 26772 LD (HL),0     ; around in bytes #b13-#b16 of the character's buffer
 26774 LD L,14       ;
 26776 LD (HL),0     ; }
 26778 LD A,H        ; #REGa=character's number (#b201-#b204, #b206)
 26779 CP 206        ; {Set #REGe as follows: #b32=MR WITHIT, #b38=MR ROCKITT,
 26781 ADC A,59      ; #b44=MR CREAK, #b50=MISS TAKE, #b56=BOY WANDER
 26783 LD E,A        ;
 26784 ADC A,A       ;
 26785 ADD A,E       ;
 26786 ADD A,A       ;
 26787 LD E,A        ; }
*26788 CALL 25233    ; {Collect a random number between 0 and 5 in #REGa
 26791 AND 7         ;
 26793 CP 6          ;
 26795 JR NC,26788   ; }
 26797 ADD A,E       ; {Now #REGe=blackboard message number
 26798 LD E,A        ; }
 26799 LD D,254      ; {Pick up the address of the message and place it into
 26801 LD L,11       ; bytes #b11 and #b12 of the character's buffer
 26803 LD A,(DE)     ;
 26804 LD (HL),A     ;
 26805 INC D         ;
 26806 INC L         ;
 26807 LD A,(DE)     ;
 26808 LD (HL),A     ; }
 26809 LD L,9        ; {Replace the address of this routine in bytes #b9 and
@ssub=LD (HL),26813%256
@rsub=LD (HL),26813%256 ; #b10 of the character's buffer with #R26813 (below)
@rsub=INC L
@rsub=LD (HL),26813/256 ; }
 26811 LD (HL),189   ; #b10 of the character's buffer with #R26813 (below)}
@label=WRITEBRD0
 26813 CALL 26513    ; Write one letter on the board
 26816 JR NZ,26829   ; Jump unless the character has finished writing
; This entry point is used by the routine at #R27904.
*26818 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 26821 AND 248       ; #REGa=base animatory state of the character (arm down)
 26823 CALL 24880    ; Update the character's animatory state and update the
                     ; SRB
 26826 JP 25488      ; Terminate this interruptible subcommand
; The character hasn't finished writing yet. Figure out his next arm movement
; (up or down).
*26829 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 26832 RRCA          ; {Set the carry flag if the character's arm is raised
 26833 RLCA          ; }
 26834 JR C,26841    ; Jump if the character's arm is raised
 26836 OR 7          ; #REGa=animatory state of the character with his arm up
*26838 JP 24880      ; Update the character's animatory state and location and
                     ; update the SRB
*26841 AND 248       ; #REGa=base animatory state of character (arm down)
 26843 JR 26838      ; Jump back to update the SRB

; Unused
@rsub=!26845
s26845 DEFS 4

; Update the SRB so that the speech bubble is not corrupted
;
; Used by the routines at #R25248, #R26910 and #R27144. Resets the bits in the
; #R32512(screen refresh buffer) (SRB) that correspond to the speech bubble and
; lip, so that they are not overwritten by sprite tiles when the display is
; updated. Returns with the carry flag set if the speech bubble is on-screen,
; and with #REGhl pointing at the first byte of the SRB.
@label=BUBBLESRB
c26849 LD HL,32760   ; {#R32760 holds the LSB of the SRB address corresponding
 26852 LD A,(HL)     ; to the lip of the speech bubble (or 0 if there is no
                     ; bubble on-screen)}
 26853 LD L,A        ; #REGl=0 (and #REGhl=#R32512) if no one is speaking
 26854 AND A         ; Is anyone speaking at the moment?
 26855 RET Z         ; Return if not
@ssub=LD L,32767%256
 26856 LD L,255      ; #REGhl=#R32767
 26858 LD A,(HL)     ; #REGa=leftmost column of the play area on screen
@ssub=LD L,32762%256
 26859 LD L,250      ; #REGhl=#R32762, which holds the column of the play area
                     ; that was at the far left of the screen the last time
                     ; this routine was called
 26861 CP (HL)       ; Set the zero flag if the screen hasn't scrolled, set the
                     ; carry flag if the screen has scrolled right, or reset
                     ; the carry flag if it has scrolled left
 26862 LD (HL),A     ; Update #R32762 to the current leftmost column on-screen
@ssub=LD L,32760%256
 26863 LD L,248      ; #REGhl=#R32760
 26865 JR Z,26888    ; Jump if the screen hasn't scrolled since the last time
                     ; this routine was called
; The screen has scrolled since the last time this routine was called. Check
; which way it scrolled and update #R32760 accordingly.
 26867 LD A,(HL)     ; #REGa=LSB of the speech bubble lip SRB address
 26868 JR NC,26883   ; Jump if the screen has scrolled left
; The screen has scrolled right since the last time this routine was called.
 26870 AND 3         ; #REGa=0-3 (quarter of the screen occupied by the bubble
                     ; before the scroll)
 26872 CP 3          ; Was the bubble in the rightmost quarter?
 26874 JR NZ,26880   ; Jump if not
; The speech bubble has been scrolled off the screen.
*26876 LD (HL),0     ; Set #R32760 to 0 (the bubble is no longer on-screen)
 26878 LD L,(HL)     ; #REGl=0
 26879 RET           ; Return with the carry flag reset
*26880 INC (HL)      ; The speech bubble has been scrolled to the right (and is
                     ; still on-screen)
 26881 JR 26888      ;
; The screen has scrolled left since the last time this routine was called.
*26883 AND 3         ; #REGa=0-3 (quarter of the screen occupied by the bubble
                     ; before the scroll)
 26885 JR Z,26876    ; Jump if the bubble was in the leftmost quarter (and is
                     ; therefore no longer on-screen)
 26887 DEC (HL)      ; The speech bubble has been scrolled to the left (and is
                     ; still on-screen)
; Now that #R32760 has been adjusted to compensate for any recent scrolling of
; the screen, adjust the appropriate SRB bytes for the speech bubble and lip.
*26888 LD L,(HL)     ; #REGhl=address of the SRB byte corresponding to the lip
                     ; of the speech bubble
 26889 LD A,(32761)  ; The bit set in #REGa corresponds to the bit of the SRB
                     ; byte that corresponds to the lip of the speech bubble
 26892 CPL           ;
 26893 AND (HL)      ; Make sure this bit is reset
 26894 LD (HL),A     ; Restore the SRB byte with the relevant bit reset
 26895 LD A,L        ;
 26896 ADD A,252     ; {Reset the bits of the SRB corresponding to the bottom
 26898 LD L,A        ; line of the speech bubble
 26899 LD (HL),0     ; }
 26901 ADD A,252     ; {Reset the bits of the SRB corresponding to the top line
 26903 LD L,A        ; of the speech bubble
 26904 LD (HL),0     ; }
 26906 LD L,(HL)     ; #REGl=0
 26907 SCF           ; Signal: the speech bubble is still on-screen
 26908 RET           ;

; Unused
@rsub=!26909
s26909 DEFB 0

; Remove the speech bubble
;
; Used by the routine at #R27144. Sets the bits in the #R32512(screen refresh
; buffer) (SRB) that correspond to the the speech bubble and lip, so that they
; are removed (replaced by play area tiles) next time the display is updated.
@label=RMBUBBLE
c26910 PUSH HL       ;
 26911 CALL 26849    ; Reset the bits in the SRB corresponding to speech bubble
@ssub=LD L,32760%256
 26914 LD L,248      ; {#REGhl=#R32760, which holds the LSB of the SRB address
 26916 LD A,(HL)     ; corresponding to the lip of the speech bubble (if any);
                     ; pick this up in #REGa}
 26917 AND A         ; Is the speech bubble on-screen?
 26918 JR Z,26939    ; Jump if not
 26920 LD (HL),0     ; Signal: no one's talking now
 26922 LD L,A        ; #REGhl points to the SRB byte corresponding to the lip
                     ; of the speech bubble
 26923 LD A,(32761)  ; The bit set in #REGa is the bit of that SRB byte that
                     ; corresponds to the lip's location
 26926 OR (HL)       ; {Update the speech bubble lip SRB byte with this bit set
 26927 LD (HL),A     ; (forcing a refresh of the screen where the lip is)}
 26928 LD A,L        ; {Update the SRB for where the bottom line of the speech
 26929 ADD A,252     ; bubble is
 26931 LD L,A        ;
 26932 LD (HL),255   ; }
 26934 ADD A,252     ; {Update the SRB for where the top line of the speech
 26936 LD L,A        ; bubble is
 26937 LD (HL),255   ; }
*26939 POP HL        ;
 26940 RET           ;

; Print a speech bubble UDG
;
; Used by the routine at #R26958.
;
; DE UDG address
; HL Attribute file address
@label=BUBBLEUDG
c26941 PUSH HL       ; Save the attribute file address temporarily
 26942 LD (HL),56    ; INK 0: PAPER 7
 26944 LD A,H        ; {Set #REGhl to the corresponding display file address
 26945 AND 11        ;
 26947 ADD A,A       ;
 26948 ADD A,A       ;
 26949 ADD A,A       ;
 26950 LD H,A        ; }
 26951 EX DE,HL      ;
 26952 CALL 24869    ; Copy the speech bubble UDG onto the screen
 26955 EX DE,HL      ;
 26956 POP HL        ; Restore the attribute file address to #REGhl
 26957 RET           ;

; Print the speech bubble
;
; Used by the routine at #R27144. Returns with the carry flag set if the
; character about to speak is off-screen.
;
; H Number of the character about to speak (#b200-#b204, #b208)
@label=SHOWBUBBLE
c26958 LD A,(32767)  ; {#REGb=leftmost column of the play area on screen
 26961 LD B,A        ; }
 26962 LD L,1        ; Byte #b1 holds the character's x-coordinate
 26964 LD A,(HL)     ; {#REGa=x-coordinate of the character's head (and
 26965 INC A         ; therefore of the speech bubble lip when it's printed)}
 26966 SUB B         ; {Return with the carry flag set if the character's head
 26967 RET C         ; is off-screen to the left}
 26968 CP 32         ; {Return with the carry flag set if the character's head
 26970 CCF           ; is off-screen to the right
 26971 RET C         ; }
 26972 LD C,A        ; 0<=#REGc<=31 (screen x-coordinate of the character's
                     ; head)
 26973 AND 7         ; {Point #REGde at an entry in the 8-byte table at
 26975 ADD A,120     ; #R57720, whose contents are (#b128, #b64, #b32, #b16,
 26977 LD E,A        ; #b8, #b4, #b2, #b1)
 26978 LD D,225      ; }
 26980 LD A,(DE)     ; {The bit set in #REGa corresponds to the bit that needs
 26981 LD (32761),A  ; to be set in the SRB byte for the lip of the speech
                     ; bubble; store it in #R32761}
 26984 LD A,C        ; #REGa=screen column for lip of speech bubble (0-31)
 26985 RRCA          ; {Set #REGe to 0, 1, 2 or 3 (quarter of the screen in
 26986 RRCA          ; which the bubble will be printed)
 26987 RRCA          ;
 26988 AND 3         ;
 26990 LD E,A        ; }
 26991 LD A,H        ; #REGa=number of the character about to speak
 26992 INC L         ; #REGl=2, which byte holds the character's y-coordinate
 26993 CP 208        ; {#REGa=0 for EINSTEIN, -1 for a teacher
 26995 SBC A,A       ; }
 26996 ADD A,(HL)    ; #REGa=y-coordinate of the lip of the speech bubble
 26997 PUSH HL       ;
 26998 ADD A,A       ; {Compute the LSB of the address of the SRB byte
 26999 ADD A,A       ; corresponding to the location of the speech bubble lip
 27000 LD L,A        ; and store it in #R32760
 27001 ADD A,E       ;
 27002 LD (32760),A  ; }
 27005 LD A,B        ; {Put the current column of the play area at the far left
 27006 LD (32762),A  ; of the screen into #R32762 for later use by the routine
                     ; at #R26849}
 27009 LD H,11       ; {#REGhl=attribute file address for the lip of the speech
 27011 ADD HL,HL     ; bubble
 27012 ADD HL,HL     ;
 27013 ADD HL,HL     ;
 27014 LD A,L        ;
 27015 ADD A,C       ;
 27016 LD L,A        ; }
 27017 LD DE,39136   ; #R39136: Lip UDG
 27020 CALL 26941    ; Print the lip of the speech bubble
@keep
 27023 LD BC,65504   ; #REGbc=-32
 27026 ADD HL,BC     ; Up a line
 27027 PUSH HL       ; Store this attribute file address
 27028 LD A,L        ; {#REGhl=attribute file address for the top left corner
 27029 AND 248       ; of the speech bubble
 27031 LD L,A        ;
 27032 ADD HL,BC     ; }
 27033 LD DE,39392   ; #R39392: Top left corner UDG
 27036 CALL 26941    ; Print the top left corner of the speech bubble
 27039 LD C,6        ; There are 6 UDGs in the top middle section of the speech
                     ; bubble
*27041 LD DE,39648   ; #R39648: Top-middle section UDG
 27044 INC L         ;
 27045 CALL 26941    ; Print a top-middle section UDG
 27048 DEC C         ;
 27049 JR NZ,27041   ; Jump back until all of the top middle section has been
                     ; printed
 27051 LD DE,39904   ; #R39904: Top right corner UDG
 27054 INC L         ;
 27055 CALL 26941    ; Print the top right corner of the speech bubble
 27058 LD C,25       ; {#REGhl=attribute file address for bottom left corner of
 27060 ADD HL,BC     ; speech bubble}
 27061 LD DE,40160   ; #R40160: Bottom left corner UDG
 27064 CALL 26941    ; Print the bottom left corner of the speech bubble
 27067 LD C,6        ; There are 6 UDGs in the bottom middle section of the
                     ; speech bubble
*27069 LD DE,40416   ; #R40416: Bottom-middle section UDG
 27072 INC L         ;
 27073 CALL 26941    ; Print a bottom-middle section UDG
 27076 DEC C         ;
 27077 JR NZ,27069   ; Jump back until all of the bottom middle section has
                     ; been printed
 27079 INC L         ;
 27080 LD DE,40672   ; #R40672: Bottom right corner UDG
 27083 CALL 26941    ; Print the bottom right corner of the speech bubble
 27086 POP HL        ; Retrieve the attribute file address for the spot above
                     ; the lip of the speech bubble
 27087 LD A,H        ; {Set #REGhl to the address of the bottom pixel line of
 27088 AND 11        ; the character square above the lip
 27090 ADD A,A       ;
 27091 ADD A,A       ;
 27092 ADD A,A       ;
 27093 ADD A,7       ;
 27095 LD H,A        ; }
 27096 LD (HL),66    ; 'Open' the part above the lip (previously closed by a
                     ; middle section UDG)
@nowarn
 27098 LD HL,23360   ; {Clear the first 64 bytes at #R23296 (which will be used
*27101 DEC L         ; as a buffer for the speech text graphic data by the
 27102 LD (HL),0     ; routine at #R27144)
 27104 JR NZ,27101   ; }
 27106 POP HL        ; Restore the character number to #REGh
 27107 AND A         ; {Return with the carry flag reset to signal that the
 27108 RET           ; speech bubble has been printed}

; Unused
@rsub=!27109
s27109 DEFB 0

; Place a font character bitmap into a message graphic buffer
;
; Used by the routines at #R27419 and #R27144. Appends a font character bitmap
; (corresponding to the ASCII code in #REGa) to the existing contents of a
; message graphic buffer.
;
; A ASCII code
; C Pixel columns remaining in the buffer
; HL' Buffer address
@label=CHR2BUF
c27110 LD E,A        ; #REGe=ASCII code (#b32-#b127)
 27111 LD D,215      ; Point #REGde at the appropriate entry in the table of
                     ; font character bitmap widths at #R55072
 27113 LD A,(DE)     ; #REGa=width of the font character in pixels (1-5)
 27114 LD B,A        ; Store this in #REGb
*27115 INC D         ;
 27116 LD A,(DE)     ; #REGa=bit pattern for one pixel column of the font
                     ; character
 27117 CALL 27125    ; Slide this into the message buffer
 27120 DEC C         ; One fewer pixel column remaining in the message buffer
 27121 DJNZ 27115    ; Jump back until all pixel columns for the font character
                     ; have been copied into the message buffer
 27123 DEC C         ; One fewer pixel column remaining in the message buffer
; This entry point is used by the routine at #R27419.
*27124 XOR A         ; #REGa=0 (blank pixel column)
*27125 EXX           ;
 27126 PUSH HL       ;
 27127 LD C,8        ; 8 pixels per column
*27129 LD B,32       ; 32 (during startup) or 8 bytes per pixel row (this
                     ; instruction is set to #S/LD B/,#n8 before the game
                     ; starts; see #R21408)
 27131 RRCA          ; Push a pixel into the carry flag
*27132 RL (HL)       ; {Drag the pixel into the message buffer and shove the
 27134 DEC HL        ; existing pixels one place to the left
 27135 DJNZ 27132    ; }
 27137 DEC C         ;
 27138 JR NZ,27129   ; Jump back to collect the next pixel up
 27140 POP HL        ; Restore the address of the last byte in the message
                     ; buffer to #REGhl'
 27141 EXX           ;
 27142 RET           ;

; Unused
@rsub=!27143
s27143 DEFB 0

; Make a character speak
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of the character's buffer by the routine at #R61533, #R61555,
; #R61696, #R62032 or #R62815.
;
; E Message number
; H Character number (#b200-#b204, #b208)
@label=SPEAK
c27144 LD L,11       ; {Store the message number in byte #b11 of the
 27146 LD (HL),E     ; character's buffer}
; The address of this entry point is placed into bytes #b9 and #b10 of
; EINSTEIN's buffer by the routine at #R61440.
@label=*
*27147 LD L,16       ; {Clear bytes #b12-#b16 of the character's buffer, thus
 27149 LD B,5        ; removing the addresses of any old (sub)(sub)messages
*27151 LD (HL),0     ;
 27153 DEC L         ;
 27154 DJNZ 27151    ; }
 27156 LD E,(HL)     ; #REGe=message number
 27157 LD D,254      ; {Pick up the address of the message and place it into
 27159 LD A,(DE)     ; bytes #b11 and #b12 of the character's buffer
 27160 LD (HL),A     ;
 27161 INC D         ;
 27162 LD A,(DE)     ;
 27163 INC L         ;
 27164 LD (HL),A     ; }
; If somebody else is already speaking, this entry point is used while this
; character waits his turn to speak.
@label=SPEAK0
 27165 LD A,(32760)  ; #R32760 holds the LSB of the SRB address corresponding
                     ; to the lip of the speech bubble (or 0 if there is no
                     ; bubble on-screen)
 27168 LD L,9        ; {Place the address of the entry point at #R27165 into
@ssub=LD (HL),27165%256
@rsub=LD (HL),27165%256 ; bytes #b9 and #b10 of the character's buffer
@rsub=INC L
@rsub=LD (HL),27165/256 ; }
 27170 LD (HL),29    ; bytes #b9 and #b10 of the character's buffer}
 27172 AND A         ; Is anyone else speaking at the moment?
 27173 RET NZ        ; Return if so
@ssub=LD (HL),27182%256
@rsub=>LD (HL),27182/256 ; {Place the address of the entry point at #R27182
@rsub=>DEC L             ; into bytes #b9 and #b10 of the character's buffer
@rsub=/LD (HL),27182%256 ; }
 27174 LD (HL),46    ; Place the address of the entry point at #R27182 into
                     ; bytes #b9 and #b10 of the character's buffer
 27176 CALL 26958    ; Print the speech bubble if the character's head is
                     ; on-screen
 27179 RET NC        ; Return if the character's head is on-screen
 27180 JR 27205      ; Otherwise make this routine relinquish control of the
                     ; character
; This entry point is used while the character is speaking.
@label=SPEAK1
 27182 PUSH HL       ;
 27183 CALL 26849    ; Update the SRB so that the speech bubble is not
                     ; corrupted
 27186 POP HL        ;
 27187 JR NC,27202   ; Jump if the speech bubble is no longer on-screen
 27189 EXX           ; {Point #REGhl' at the end of the buffer (at #R23296)
@nowarn
 27190 LD HL,23359   ; which will contain the speech text graphic data
 27193 EXX           ; }
 27194 LD B,2        ; We scroll the message two letters at a time
*27196 CALL 26318    ; Collect in #REGa the next character code from the
                     ; message
 27199 AND A         ; Has the message finished?
 27200 JR NZ,27208   ; Jump if not
; The message has finished, or the speech bubble has been scrolled off the
; screen. Either way, the character has finished speaking.
*27202 CALL 26910    ; Update the SRB to get rid of the speech bubble
*27205 JP 25488      ; Terminate this interruptible subcommand
; The character has not finished speaking.
*27208 PUSH BC       ;
 27209 CALL 27110    ; Roll the font character bitmap into the message buffer
 27212 POP BC        ;
 27213 DJNZ 27196    ; Jump back until two more letters have been rolled into
                     ; the buffer
 27215 LD L,29       ; {Reset the walk/run bit in byte #b29 of the character's
 27217 RES 7,(HL)    ; buffer to make sure he speaks slowly}
 27219 LD A,(32760)  ; {Now #REGa=LSB of the address of the SRB byte
 27222 SUB 8         ; corresponding to the top line of the speech bubble}
 27224 LD L,A        ; {Set #REGhl to the display file address of the start of
 27225 RRCA          ; the top pixel line of text
 27226 RRCA          ;
 27227 AND 24        ;
 27229 ADD A,68      ;
 27231 LD H,A        ;
 27232 LD A,L        ;
 27233 ADD A,A       ;
 27234 ADD A,A       ;
 27235 ADD A,A       ;
 27236 LD L,A        ;
@rsub=!27237
 27237 NOP           ;
 27238 INC L         ; }
@nowarn
 27239 LD DE,23298   ; The speech text graphic data is stored in the 64-byte
                     ; buffer at #R23296
 27242 EX DE,HL      ;
 27243 CALL 27255    ; Print the top 4 pixel rows of the text inside the speech
                     ; bubble
 27246 ADD A,32      ; {Set #REGde to the display file address of the start of
 27248 LD E,A        ; the 5th pixel row of text
 27249 JR C,27256    ;
 27251 LD A,D        ;
 27252 SUB 8         ;
 27254 LD D,A        ; }
*27255 LD A,E        ; Save the LSB of the base display file address
*27256 LD B,4        ; 4 pixel lines at a time
*27258 PUSH BC       ;
 27259 LD BC,6       ; There are 6 character squares inside the speech bubble
 27262 LDIR          ; Copy a row of 6 bytes to the screen
 27264 INC L         ; {Move #REGhl to the start of the next row of pixel data
 27265 INC L         ; in the message buffer}
 27266 LD E,A        ; Restore the LSB of the base display file address
 27267 INC D         ; Next pixel row down
 27268 POP BC        ;
 27269 DJNZ 27258    ; Jump back until all 4 pixel rows in this half have been
                     ; copied to the screen
 27271 RET           ;

; Unused
@rsub=!27272
s27272 DEFS 4

; Save the area of the screen that will be overwritten by a message box
;
; Used by the routines at #R29716, #R29896 and #R62668. Returns with the carry
; flag set if the message box would be off-screen. Otherwise copies the area of
; the screen that will be overwritten by the message box into the buffer at
; #R58152, and returns with the attribute file address for the top-left corner
; of the message box in #REGde.
;
; DE Coordinates of the point above the character's head
@label=SCR2BUF
c27276 LD A,(32767)  ; {#REGb=leftmost column of the play area on screen
 27279 LD B,A        ; }
 27280 LD A,E        ; #REGa=x-coordinate of the character's head
 27281 AND 248       ; #REGa=x-coordinate of the left edge of the message box
 27283 SUB B         ; {Return with the carry flag set if the message box would
 27284 CP 32         ; be off-screen to the right
 27286 CCF           ;
 27287 RET C         ; }
 27288 LD E,A        ; #REGe=0, 8, 16 or 24: screen x-coordinate of the left
                     ; edge of the message box
 27289 LD A,D        ; #REGa=y-coordinate of the point above the character's
                     ; head
 27290 SUB 3         ; #REGa=y-coordinate of the top line of the message box
 27292 RET C         ; Return with the carry flag set if this would be off the
                     ; top of the screen
; The message box is going to be printed. Prepare for that by saving the area
; of the screen that will be overwritten.
 27293 LD D,0        ; #REGde=0, 8, 16 or 24
 27295 PUSH HL       ; Save #REGhl
 27296 ADD A,A       ; {Set #REGhl the to the attribute file address for the
 27297 ADD A,A       ; top left corner of the message box
 27298 ADD A,A       ;
 27299 LD L,A        ;
 27300 LD H,22       ;
 27302 ADD HL,HL     ;
 27303 ADD HL,HL     ;
 27304 ADD HL,DE     ; }
 27305 PUSH HL       ; Save this base attribute file address
 27306 LD DE,58152   ; Point #REGde at the buffer used to save the screen area
                     ; overwritten by the message box (at #R58152)
 27309 LD A,3        ; {Copy three rows of eight attribute bytes each from the
*27311 LD BC,8       ; screen into the first 24 bytes of the buffer
 27314 LDIR          ;
 27316 LD C,24       ;
 27318 ADD HL,BC     ;
 27319 DEC A         ;
 27320 JR NZ,27311   ; }
 27322 POP HL        ; Restore the base attribute file address to #REGhl
 27323 PUSH HL       ; And save it again
 27324 LD A,H        ; {Set #REGhl to the display file address for the top left
 27325 SUB 80        ; corner of the message box
 27327 ADD A,A       ;
 27328 ADD A,A       ;
 27329 ADD A,A       ;
 27330 LD H,A        ; }
 27331 LD C,3        ; There are 3 rows of UDGs to copy
*27333 LD A,8        ; 8 pixel rows per UDG
 27335 PUSH BC       ;
*27336 PUSH HL       ;
 27337 LD C,8        ; 8 UDGs per row
 27339 LDIR          ; Copy one row of pixels into the buffer
 27341 POP HL        ;
 27342 INC H         ; Move #REGhl to the next row of pixels on screen
 27343 DEC A         ;
 27344 JR NZ,27336   ; Jump back until all 8 pixel rows for this row of UDGs
                     ; have been copied into the buffer
 27346 LD A,L        ; {Move #REGhl to the display file address for the start
 27347 ADD A,32      ; of the top row of pixels for the next row of UDGs
 27349 LD L,A        ;
 27350 JR C,27356    ;
 27352 LD A,H        ;
 27353 SUB 8         ;
 27355 LD H,A        ; }
*27356 POP BC        ;
 27357 DEC C         ; One more row of UDGs copied
 27358 JR NZ,27333   ; Jump back until all 3 rows have been done
 27360 POP DE        ; Drop the base attribute file address into #REGde
 27361 POP HL        ; Restore the original contents of #REGhl
 27362 RET           ; Return with the carry flag reset

; Unused
@rsub=!27363
s27363 DEFB 0

; Copy a graphic buffer to the screen
;
; Used by the routines at #R27462 (to print a message box above a character's
; head, or to print the lesson), #R29716 (to restore the area of the screen
; overwritten by a message box) and #R62910 (to print the Back to Skool logo
; and the Score/Lines/Hi-Sc box).
;
; DE Attribute file address
; HL Graphic buffer address
@label=BUF2SCR
c27364 PUSH DE       ; Save the attribute file address temporarily
 27365 LD A,3        ; There are 3 rows of character squares
*27367 LD BC,8       ; There are 8 character squares in each row
 27370 LDIR          ; Copy one row of attribute bytes to the screen
 27372 LD C,24       ; {Point #REGde at the start of the next row down
 27374 EX DE,HL      ;
 27375 ADD HL,BC     ;
 27376 EX DE,HL      ; }
 27377 DEC A         ;
 27378 JR NZ,27367   ; Jump back to copy the remaining attributes to the screen
; The attribute bytes have been copied to the screen. Now for the graphic
; bytes.
 27380 POP DE        ; Restore the attribute file address to #REGde
 27381 LD A,D        ; {Set #REGde to the appropriate display file address
 27382 SUB 80        ;
 27384 ADD A,A       ;
 27385 ADD A,A       ;
 27386 ADD A,A       ;
 27387 LD D,A        ; }
 27388 LD C,3        ; There are 3 rows of character squares
*27390 LD A,8        ; There are 8 rows of pixels per character square
 27392 PUSH BC       ; Save the character square row counter
*27393 PUSH DE       ;
 27394 LD C,8        ; There are 8 bytes in each row of pixels
 27396 LDIR          ; Copy one row of pixels to the screen
 27398 POP DE        ;
 27399 INC D         ; Point to the display file address of the next pixel row
 27400 DEC A         ;
 27401 JR NZ,27393   ; Jump back to fill in the remaining pixel rows for this
                     ; row of character squares
 27403 LD A,E        ; {Set #REGde to the start address of the first pixel row
 27404 ADD A,32      ; in the next row of character squares
 27406 LD E,A        ;
 27407 JR C,27413    ;
 27409 LD A,D        ;
 27410 SUB 8         ;
 27412 LD D,A        ; }
*27413 POP BC        ; Restore the character square row counter to #REGc
 27414 DEC C         ;
 27415 JR NZ,27390   ; Jump back to fill in the remaining rows of character
                     ; squares
 27417 RET           ;

; Unused
@rsub=!27418
s27418 DEFB 0

; Write a line of text into a graphic buffer
;
; Used by the routines at #R20665 and #R27462. Writes a line of text into a
; graphic buffer (at #R23296 or #R58408) and centres it.
;
; DE Message address
; HL Buffer address
@label=TXT2BUF
@ssub=LD (54784+11),DE
c27419 LD (54795),DE ; Save the message address in bytes #b11 and #b12 of the
                     ; character buffer in page #R54784(#b214)
; This entry point is used by the routine at #R27462 to write the second line
; of text into the message box graphic buffer at #R58408.
*27423 PUSH HL       ; {Copy the buffer address to #REGhl'
 27424 EXX           ;
 27425 POP HL        ; }
@label=BUFSIZE
 27426 LD BC,0       ; #REGb=0 (during startup) or 64, #REGc=0 (this
                     ; instruction is set to #S/LD BC/,#n16384 before the game
                     ; starts; see #R21408)
*27429 LD (HL),C     ; {Create 64 (or 256) empty pixel columns in the buffer
 27430 INC HL        ;
 27431 DJNZ 27429    ; }
 27433 DEC HL        ;
 27434 EXX           ;
 27435 LD H,214      ; We are using the character buffer in page #R54784(#b214)
                     ; to process the message
@label=TXTWIDTH
 27437 LD C,255      ; The message box is 255 (during startup) or 64 pixels
                     ; wide (this instruction is set to #S/LD C/,#n64 before
                     ; the game starts; see #R21408)
*27439 CALL 26318    ; #REGa=ASCII code of the next character in the message
 27442 CP 3          ; Is the ASCII code 0, 1 or 2 (end of line)?
 27444 JR C,27451    ; Jump if so to centre the text
 27446 CALL 27110    ; Slide the bitmap for CHR$(#REGa) into the buffer
 27449 JR 27439      ; Jump back to do the next character
*27451 SRL C         ; Now #REGc=half the number of unused pixel columns left
                     ; in the buffer
 27453 RET Z         ; Return if this is zero (the buffer is full)
*27454 CALL 27124    ; {Create #REGc empty pixel columns in the buffer, thus
 27457 DEC C         ; centring the message
 27458 JR NZ,27454   ; }
 27460 RET           ;

; Unused
@rsub=!27461
s27461 DEFB 0

; Print a message box
;
; Used by the routines at #R29716 and #R32433. Prepares the text of a message
; in the graphic buffer at #R58408 and then copies the buffer to the screen.
;
; A Message number
; C Message box attribute byte
; DE Attribute file address at which to print the message box
@label=PRTMSGBOX
c27462 LD HL,58408   ; The graphic data for the message box will be stored in
                     ; the buffer at #R58408 before being copied to the screen
 27465 LD B,24       ; 24=3 rows of 8 character squares
*27467 LD (HL),C     ; {Prepare the attribute bytes in the buffer
 27468 INC L         ;
 27469 DJNZ 27467    ; }
 27471 PUSH DE       ; Save the attribute file address temporarily
 27472 LD L,A        ; {Set #REGde to the start address of the message
 27473 LD H,254      ;
 27475 LD E,(HL)     ;
 27476 INC H         ;
 27477 LD D,(HL)     ; }
@ssub=LD HL,58432+24
 27478 LD HL,58456   ; Point #REGhl at the address in the buffer corresponding
                     ; to the start of the fourth row of pixels from the top of
                     ; the message box (the first three rows are always empty)
 27481 CALL 27419    ; Prepare the first line of text in the buffer
@ssub=LD HL,58432+88
 27484 LD HL,58520   ; Point #REGhl at the address in the buffer corresponding
                     ; to the start of the 12th row of pixels from the top
 27487 CALL 27423    ; Prepare the second line of text in the buffer
 27490 POP DE        ; Retrieve the attribute file address for the message box
 27491 LD HL,58408   ; Point to the start of the buffer
 27494 JP 27364      ; Transfer the buffer to the screen

; Print the score, lines total or hi-score (2)
;
; Continues from the routine at #R29613. Prepares the buffer at #R58123 with
; the graphic data for the digits whose character codes are stored at #R58112,
; then copies the graphic data to the screen at the location specified by
; #REGde.
;
; DE Display file address
@label=PRINTNUM2
c27497 PUSH DE       ; Save the display file address
@ssub=LD HL,58123+20
 27498 LD HL,58143   ; {Clear the 21-byte buffer at #R58123, which will hold
 27501 LD B,21       ; the graphic data for the number to be printed (21 bytes
*27503 LD (HL),0     ; = 7 pixel rows, 3 bytes per row)
 27505 DEC L         ;
 27506 DJNZ 27503    ; }
 27508 LD L,B        ; #REGhl=#R58112 (where the ASCII codes of the digits are
                     ; stored)
*27509 LD A,(HL)     ; Pick up the ASCII code of the next digit
 27510 AND A         ; Have we done all the digits?
 27511 JR Z,27552    ; Jump if so
 27513 LD E,A        ; #REGe=ASCII code for the digit (#b48-#b57)
 27514 LD D,215      ; Point #REGde at the appropriate entry in the table of
                     ; font character bitmap widths at #R55072
 27516 INC HL        ; {Point #REGhl at the next digit and save this address
 27517 PUSH HL       ; for later}
 27518 LD A,(DE)     ; #REGa=width of the font character bitmap (in pixels)
 27519 LD C,A        ; Copy this to #REGc
*27520 INC D         ; Point #REGde at the next bitmap pixel column
 27521 LD A,(DE)     ; #REGa=next pixel column of bitmap data for this digit
*27522 LD L,31       ; Point #REGhl at the last byte of the graphic data buffer
 27524 LD B,7        ; There are 7 rows of pixels in the buffer
 27526 RRCA          ; Skip the bottom row of pixels in the bitmap data
*27527 RRCA          ; {Roll a pixel column into the buffer
 27528 RL (HL)       ;
 27530 DEC HL        ;
 27531 RL (HL)       ;
 27533 DEC HL        ;
 27534 RL (HL)       ;
 27536 DEC HL        ;
 27537 DJNZ 27527    ; }
 27539 DEC C         ; Next pixel column
 27540 JP M,27548    ; Jump if we've done them all (plus a blank column)
 27543 JR NZ,27520   ; Jump back until all the pixel columns of the bitmap for
                     ; the digit have been done
 27545 XOR A         ; {Then jump back to add a blank pixel column
 27546 JR 27522      ; }
*27548 POP HL        ; #REGhl=address of the next digit
@rsub=!27549
 27549 NOP           ;
 27550 JR 27509      ; Jump back to deal with this digit
; The graphic data for the digits has been rolled into the buffer at #R58123.
; Now we copy the buffer to the screen.
*27552 LD L,11       ; #REGhl=#R58123 (start address of the buffer)
 27554 LD BC,2047    ; #REGb=7 (number of pixel rows), #REGc=#b255
 27557 POP DE        ; #REGde=appropriate display file address
 27558 LD A,E        ;
*27559 LDI           ; {Copy three bytes (one pixel row) from the buffer to the
 27561 LDI           ; screen
 27563 LDI           ; }
 27565 LD E,A        ; {Point #REGde at the start of the next row down
 27566 INC D         ; }
 27567 DJNZ 27559    ; Jump back until all 7 pixel rows are done
 27569 RET           ;

; Unused
@rsub=!27570
s27570 DEFS 2

; Compute the decimal digits of a number
;
; Used by the routines at #R29613 and #R29716. Computes the ASCII codes for the
; digits of the number held in #REGde, and stores them in the buffer at
; #R58112.
;
; DE Number
@label=NUM2ASCII
@ssub=LD HL,58112+11
@nowarn
c27572 LD HL,58123   ;
 27575 LD B,L        ; #REGb=11
*27576 DEC L         ; {Clear the buffer at #R58112, which will be used to
 27577 LD (HL),0     ; store the ASCII codes of the digits
 27579 DJNZ 27576    ; }
 27581 LD A,48       ; #b48 is the code for '0'
; Before inserting any ASCII codes into the buffer, we need to figure out
; whether the first digit is the 10000s, 1000s, 100s, 10s or units digit.
@keep
 27583 LD BC,55536   ; #REGbc=-10000
 27586 EX DE,HL      ; #REGde=#R58112
 27587 ADD HL,BC     ; Subtract 10000
 27588 JR C,27620    ; Jump if it 'went'
 27590 SBC HL,BC     ; Otherwise add the 10000 back
@keep
 27592 LD BC,64536   ; #REGbc=-1000
 27595 ADD HL,BC     ; Subtract 1000
 27596 JR C,27633    ; Jump if it 'went'
 27598 SBC HL,BC     ; Otherwise add the 1000 back
@keep
 27600 LD BC,65436   ; #REGbc=-100
 27603 ADD HL,BC     ; Subtract 100
 27604 JR C,27646    ; Jump if it 'went'
 27606 SBC HL,BC     ; Otherwise add the 100 back
 27608 LD C,246      ; #REGbc=-10
 27610 ADD HL,BC     ; Subtract 10
 27611 JR C,27658    ; Jump if it 'went'
 27613 SBC HL,BC     ; Otherwise add the 10 back
 27615 LD A,L        ; #REGa=units left
 27616 AND A         ; Are there any?
 27617 RET Z         ; Return if not (nothing to do)
 27618 JR 27666      ; Jump forward to place the units digit into the buffer
; Compute and insert the 10000s digit.
*27620 INC A         ; {Get the ASCII code for the 10000s digit in #REGa
 27621 ADD HL,BC     ;
 27622 JR C,27620    ; }
 27624 SBC HL,BC     ;
@keep
 27626 LD BC,64536   ; #REGbc=-1000
 27629 LD (DE),A     ; Place the 10000s digit into the buffer
 27630 LD A,47       ;
 27632 INC E         ; Move #REGde along to the next slot in the buffer
; Compute and insert the 1000s digit.
*27633 INC A         ; {Get the ASCII code for the 1000s digit in #REGa
 27634 ADD HL,BC     ;
 27635 JR C,27633    ; }
 27637 SBC HL,BC     ;
@keep
 27639 LD BC,65436   ; #REGbc=-100
 27642 LD (DE),A     ; Place the 1000s digit into the buffer
 27643 LD A,47       ;
 27645 INC E         ; Move #REGde along to the next slot in the buffer
; Compute and insert the 100s digit.
*27646 INC A         ; {Get the ASCII code for the 100s digit in #REGa
 27647 ADD HL,BC     ;
 27648 JR C,27646    ; }
 27650 SBC HL,BC     ;
 27652 LD (DE),A     ; Place the 100s digit into the buffer
 27653 LD C,246      ; #REGbc=-10
 27655 LD A,47       ;
 27657 INC E         ; Move #REGde along to the next slot in the buffer
; Compute and insert the 10s digit.
*27658 INC A         ; {Get the ASCII code for the 10s digit in #REGa
 27659 ADD HL,BC     ;
 27660 JR C,27658    ; }
 27662 SBC HL,BC     ;
 27664 LD (DE),A     ; Place the 10s digit into the buffer
 27665 INC E         ; Move #REGde along to the next slot in the buffer
; Compute and insert the units digit.
*27666 LD A,L        ; #REGa=number of units left
 27667 ADD A,48      ; #REGa=ASCII code for the units digit
 27669 LD (DE),A     ; Place this into the buffer
 27670 RET           ;

; Unused
@rsub=!27671
s27671 DEFB 0

; Alter UDG references in the play area for a door, a window, a cup or the bike
;
; Used by the routines at #R24028, #R27860, #R28736 and #R64077. The UDG
; reference tables used by this routine are organised into entries of four
; bytes each. Each entry corresponds to a single UDG within the matrix of UDGs
; for the door, window, cup or bike:
; .
; #TABLE(default,centre)
; { =h Byte        | =h Contents }
; { 1              | y-coordinate }
; { 2              | x-coordinate }
; { 3              | UDG reference }
; { 4 (bits 0-3)   | BRIGHT/PAPER attributes }
; { 4 (bits 6 & 7) | UDG base page identifier }
; TABLE#
; .
; The data tables used are located as follows:
; .
; #TABLE(default,centre)
; { =h Address | =h Object }
; { #R56637    | Left study door (closed) }
; { #R56893    | Left study door (open) }
; { #R57088    | Right study door (closed) }
; { #R57344    | Right study door (open) }
; { #R56576    | Science Lab storeroom door (closed) }
; { #R56832    | Science Lab storeroom door (open) }
; { #R57149    | Boys' skool door (closed) }
; { #R57405    | Boys' skool door (open) }
; { #R63744    | Skool gate (closed) }
; { #R64000    | Skool gate (open) }
; { #R56064    | Drinks cabinet door (closed) }
; { #R56320    | Drinks cabinet door (open) }
; { #R55040    | Top-floor window (closed) }
; { #R55296    | Top-floor window (open) }
; { #R55552    | Middle-floor window (closed) }
; { #R55808    | Middle-floor window (open) }
; { #R56081    | Cups in the boys' skool (empty) }
; { #R56694    | Leftmost cup in the boys' skool (containing water) }
; { #R56699    | Leftmost cup in the boys' skool (containing sherry) }
; { #R56950    | Middle cup in the boys' skool (containing water) }
; { #R56955    | Middle cup in the boys' skool (containing sherry) }
; { #R57206    | Rightmost cup in the boys' skool (containing water) }
; { #R57211    | Rightmost cup in the boys' skool (containing sherry) }
; { #R56337    | Cup in the girls' skool (empty) }
; { #R57462    | Cup in the girls' skool (containing water) }
; { #R57467    | Cup in the girls' skool (containing sherry) }
; { #R57600    | Tree (with no bike attached) }
; { #R57856    | Tree (with bike attached) }
; TABLE#
;
; HL UDG reference table address
@label=ALTERUDGS
c27672 LD A,(HL)     ; {Pick up the y-coordinate (Y) in #REGd
 27673 LD D,A        ; }
 27674 INC A         ; {Return if we found the end-of-table marker (#b255)
 27675 RET Z         ; }
 27676 INC HL        ; Point #REGhl at byte 2 of this table entry
 27677 LD E,(HL)     ; Pick up the x-coordinate (X) in #REGe
 27678 INC HL        ; Point #REGhl at byte 3 of this table entry
 27679 PUSH HL       ;
 27680 LD A,(32767)  ; {#REGc=leftmost column of the play area on screen
 27683 LD C,A        ; }
 27684 LD A,E        ; {Jump if (X,Y) is off-screen (no need to update the
 27685 SUB C         ; screen refresh buffer)
 27686 JR C,27717    ;
 27688 CP 32         ;
 27690 JR NC,27717   ; }
; (X,Y) corresponds to a location that is currently on-screen, so we have to
; update the #R32512(screen refresh buffer) (SRB).
 27692 LD C,A        ; 0<=#REGc<=31 (screen x-coordinate)
 27693 AND 7         ; {Point #REGhl at an entry in the 8-byte table at
 27695 ADD A,120     ; #R57720, whose contents are (#b128, #b64, #b32, #b16,
 27697 LD L,A        ; #b8, #b4, #b2, #b1)
 27698 LD H,225      ; }
 27700 LD B,(HL)     ; Pick up this entry in #REGb
 27701 LD A,C        ; 0<=#REGa<=31 (screen x-coordinate)
 27702 RRCA          ; {Point #REGhl at the byte of the SRB corresponding to
 27703 RRCA          ; (X,Y)
 27704 RRCA          ;
 27705 AND 3         ;
 27707 ADD A,D       ;
 27708 ADD A,D       ;
 27709 ADD A,D       ;
 27710 ADD A,D       ;
 27711 LD L,A        ;
 27712 LD H,127      ; }
 27714 LD A,(HL)     ; {Set the appropriate bit in the SRB byte
 27715 OR B          ;
 27716 LD (HL),A     ; }
; The UDG reference (i.e. the LSB of the base address of the skool UDG) for the
; skool location (X,Y) must be modified to reflect the change in status of the
; door, window, cup or bike.
*27717 LD L,E        ; {Point #REGhl at the Q value (#b0<=Q<=#b143) in page
 27718 LD H,181      ; #R46336(#b181) for the x-coordinate X (see #R24684)}
 27720 LD E,(HL)     ; Pick up the Q value in #REGe
 27721 LD A,D        ; {Set #REGde to the address where the UDG reference for
 27722 ADD A,160     ; (X,Y) is stored
 27724 LD D,A        ; }
 27725 POP HL        ; Point #REGhl at byte 3 of the table entry
 27726 LD A,(HL)     ; Pick up the replacement UDG reference in #REGa
 27727 INC HL        ; Point #REGhl at byte 4 of the table entry
 27728 LD (DE),A     ; Replace the UDG reference for the skool location (X,Y)
                     ; with the one collected from the table entry
; The attribute byte for the skool location (X,Y) must be modified too.
 27729 LD A,(HL)     ; Pick up byte 4 of the table entry in #REGa
 27730 AND 15        ; Keep only bits 0-3 (the BRIGHT and PAPER attributes)
 27732 LD B,A        ; Copy them to #REGb
 27733 LD A,E        ; #REGa=Q (#b0<=Q<=#b143)
 27734 LD C,A        ; Save the Q value in #REGc for later
 27735 ADD A,104     ; {Point #REGde at byte #b180+INT(Q/2) of page Y+#b160,
 27737 SCF           ; where the BRIGHT and PAPER attributes for the skool
 27738 RRA           ; location (X,Y) are stored
 27739 LD E,A        ; }
 27740 JR C,27753    ; Jump if Q is odd (BRIGHT and PAPER in bits 0-3)
 27742 LD A,B        ; {Shift the BRIGHT and PAPER attributes from bits 0-3 to
 27743 RRCA          ; bits 4-7 of #REGb
 27744 RRCA          ;
 27745 RRCA          ;
 27746 RRCA          ;
 27747 LD B,A        ; }
 27748 LD A,(DE)     ; {Pick up the current attribute byte for the skool
 27749 AND 15        ; location (X,Y), keeping bits 0-3 as they are}
 27751 JR 27756      ; Jump forward to adjust bits 4-7 appropriately
*27753 LD A,(DE)     ; {Pick up the current attribute byte for the skool
 27754 AND 240       ; location (X,Y), keeping bits 4-7 as they are}
*27756 OR B          ; {Adjust bits 0-3 (if Q is odd) or bits 4-7 (Q is even)
 27757 LD (DE),A     ; of the attribute byte for the skool location (X,Y)}
; Finally, the base page (#b128, #b136, #b144 or #b152) for the new skool UDG
; reference must be set.
 27758 LD A,(HL)     ; Pick up byte 4 of the table entry in #REGa again
 27759 AND 192       ; Keep only bits 6 and 7
 27761 BIT 6,A       ; {Set #REGb=10001000 if these bits are 11, 10000000 (10),
 27763 JR Z,27767    ; 00001000 (01) or 00000000 (00)
 27765 SUB 56        ;
*27767 LD B,A        ; }
 27768 LD A,C        ; #REGa=Q
 27769 LD C,136      ; #REGc=10001000
 27771 SRL A         ; {Set #REGa=INT(Q/4), and shift #REGb and #REGc right (Q
 27773 JR NC,27779   ; #S/AND/ 3) times
 27775 RRC B         ;
 27777 RRC C         ;
*27779 SRL A         ;
 27781 JR NC,27791   ;
 27783 RRC B         ;
 27785 RRC C         ;
 27787 RRC B         ;
 27789 RRC C         ; }
*27791 ADD A,144     ; {Point #REGde at byte #b144+INT(Q/4) of page Y+#b160,
 27793 LD E,A        ; where the UDG MSB identifier bit-pair for skool location
                     ; (X,Y) is held (see #R24684)}
 27794 LD A,(DE)     ; Pick up the current MSB identifier byte in #REGa
 27795 OR C          ; {Replace bits (0,4), (1,5), (2,6) or (3,7) in this byte
 27796 XOR C         ; with the corresponding bits in #REGb
 27797 OR B          ; }
 27798 LD (DE),A     ; Store the new MSB identifier byte
; Move to the next entry in the table.
 27799 INC HL        ; Point #REGhl at the first byte of the next entry in the
                     ; table
 27800 JP 27672      ; Jump back to process it

; Unused
@rsub=!27803
s27803 DEFB 0

; Check whether any characters were punched
;
; Used by the routine at #R30664. Returns with the carry flag reset if someone
; was hit in the face, and #REGd holding the character number of the stricken
; one.
;
; B Number of potential victims to check
; C #b0 if the puncher is facing right, #b128 if left
; D Character number of the first potential victim to check
; H Puncher's character number: #b207 (ANGELFACE) or #b210 (ERIC)
@label=CHECKHIT
c27804 CALL 27820    ; Are any characters in front of the puncher's fist?
 27807 RET C         ; Return if not
 27808 LD E,0        ;
 27810 LD A,(DE)     ; #REGa=animatory state of the character in front of the
                     ; puncher's fist
 27811 AND 128       ; Keep only the 'direction' bit (bit 7)
 27813 XOR C         ; Compare with the direction bit of the punching character
 27814 RET Z         ; Return with the carry flag reset if the punched
                     ; character was facing the puncher (i.e. was hit in the
                     ; face)
 27815 INC D         ; Otherwise move on to the next potential victim
 27816 DJNZ 27804    ; Jump back to consider any remaining potential victim
 27818 SCF           ; Signal: no characters were hit
 27819 RET           ;

; Check whether any characters have been hit by a fist, pellet or conker
;
; Used by the routines at #R27804, #R29896 and #R30380. Returns with the carry
; flag reset if someone is in the same location as the fist, pellet or conker,
; and with #REGd holding that person's character number.
;
; B Number of potential victims to check
; D Character number of the first potential victim to check
; H Puncher's, pellet's or conker's character number
@label=CHKTARGET
c27820 EX DE,HL      ;
*27821 LD L,1        ; Point #REGhl at byte #b1 of the next potential target's
                     ; character buffer
 27823 LD E,L        ; Point #REGde at byte #b1 of the puncher's, pellet's or
                     ; conker's character buffer
 27824 LD A,(DE)     ; #REGa=x-coordinate of the fist/pellet/conker
 27825 CP (HL)       ; Does this match the target character's x-coordinate?
 27826 JR Z,27834    ; Jump if so
*27828 INC H         ; Move to the next potential target
 27829 DJNZ 27821    ; Jump back until all potential targets have been checked
 27831 EX DE,HL      ;
 27832 SCF           ; Signal: no character was hit
 27833 RET           ;
; A potential victim of the fist, pellet or conker was found at the right
; x-coordinate. What about the y-coordinate?
*27834 INC L         ; Point #REGhl at byte #b2 of the next potential target's
                     ; character buffer
 27835 INC E         ; Point #REGde at byte #b2 of the puncher's, pellet's, or
                     ; conker's character buffer
 27836 LD A,(DE)     ; #REGa=y-coordinate of the fist/pellet/conker
 27837 CP (HL)       ; Does this match the target character's y-coordinate?
 27838 JR NZ,27828   ; Jump back to consider the next character if not
; The potential victim's coordinates are a perfect match.
 27840 LD A,H        ; #REGa=number of the stricken character
 27841 CP 210        ; Was ERIC hit?
 27843 JR Z,27853    ; Jump if so
 27845 LD L,18       ; {Bytes #b17 and #b18 of the character's buffer may hold
 27847 LD A,(HL)     ; the address of an uninterruptible subcommand routine
                     ; (which would prevent him from being knocked over); pick
                     ; up the MSB in #REGa}
*27848 AND A         ; Can this character be knocked over at the moment?
 27849 JR NZ,27828   ; Jump back to consider the next character if not
 27851 EX DE,HL      ; Transfer the stricken character's number to #REGd
 27852 RET           ;
; ERIC was the potential victim.
*27853 LD A,(32763)  ; Collect ERIC's status flags from #R32763; now #REGa=0
                     ; unless ERIC is engaged in some activity other than
                     ; walking
 27856 JR 27848      ;

; Unused
@rsub=!27858
s27858 DEFS 2

; Prepare the doors, windows, cups and bike for new game
;
; Used by the routine at #R62910. Opens the boys' skool door and the skool
; gate, closes all the other doors, closes the windows, empties the cups, and
; chains the bike to the tree.
@label=INITDOORS
c27860 LD HL,57686   ; Point #REGhl at the first entry in the initialisation
                     ; table at #R57686
*27863 LD E,(HL)     ; {Pick up an entry from the initialisation table in
@rsub=INC HL
 27864 INC L         ; #REGde, which will then point at a data table concerning
 27865 LD D,(HL)     ; a door, window, cup or bike}
@rsub=INC HL
 27866 INC L         ; {Move #REGhl along to the next entry in the
 27867 PUSH HL       ; initialisation table and save the pointer for now}
 27868 EX DE,HL      ; Point #REGhl at the door/window/cup/bike data table
 27869 CALL 27672    ; Alter UDG references and attributes in the play area
 27872 POP HL        ; Restore the pointer to the initialisation table
 27873 LD A,L        ; {Have we reached the end of the initialisation table?
@ssub=CP 57712%256
 27874 CP 112        ; }
 27876 JR NZ,27863   ; Jump back if not
 27878 LD HL,32756   ; #R32756 holds the door/window flags
 27881 LD (HL),24    ; Set bits 3 and 4: skool gate and boys' skool door open
 27883 RET           ;

; Unused
@rsub=!27884
s27884 DEFS 2

; Get the x-coordinate range within which a character can see or be seen
;
; Used by the routines at #R28002 and #R28029. Returns with #REGc and #REGb
; holding the lower and upper x-coordinates of the range within which the
; target character can see or be seen. This routine is called with #REGh
; holding either (a) the character number of a teacher (to determine where kids
; must be in order to get lines), or (b) the character number of a kid (to
; determine where a teacher must be in order to give lines).
;
; H Target character's number
@label=VISRANGE
c27886 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 27888 LD D,(HL)     ; #REGd=character's y-coordinate
 27889 DEC L         ; #REGl=#b1
 27890 LD E,(HL)     ; #REGe=character's x-coordinate
 27891 LD C,0        ; Prepare a lower limit of 0 in case #REGe<10
 27893 LD A,E        ; #REGa=X (character's x-coordinate)
 27894 SUB 10        ;
 27896 JR C,27899    ;
 27898 LD C,A        ; #REGc=max(0, X-10) (lower limit of the range)
*27899 ADD A,20      ;
 27901 LD B,A        ; #REGb=X+10 (upper limit of the range)
 27902 RET           ;

; Unused
@rsub=!27903
s27903 DEFB 0

; Control a boy during assembly
;
; Used by command lists #R57942(#b20), #R59151(#b40) and #R58862(#b88). Makes a
; boy find a spot to sit down in the assembly hall, and stay seated until
; assembly is finished.
;
; H Boy's character number (#b190-#b199, #b206-#b208)
@label=INASSEMBLY
c27904 LD A,H        ; {Determine the x-coordinate at which this boy will sit
 27905 AND 3         ; during assembly based on his character number (#REGh)
 27907 CPL           ; and his current x-coordinate (in byte #b1 of the
 27908 LD L,1        ; character buffer)
 27910 ADD A,(HL)    ; }
 27911 LD L,11       ; {Store this x-coordinate in byte #b11 of the boy's
 27913 LD (HL),A     ; character buffer}
; Having determined where the boy will sit, send him there.
@nowarn
 27914 LD BC,25581   ; {Redirect control to the routine at #R25581 (walk to
 27917 CALL 25503    ; location) and then return to #R27920}
; This entry point is used after the boy has reached the point where he will
; sit.
@label=*
*27920 LD L,0        ; Byte #b0 of the character buffer holds the boy's
                     ; animatory state
 27922 BIT 7,(HL)    ; Is he facing left?
 27924 JP Z,25648    ; Make him turn round to face the stage if so
 27927 LD L,4        ; {Remove the address of this routine's entry point
 27929 LD (HL),0     ; (#R27920) from bytes #b3 and #b4 of the character buffer
                     ; }
 27931 CALL 25012    ; Update the SRB for the boy's current animatory state and
                     ; location
 27934 AND 240       ; {#REGa=animatory state of the boy sitting on the floor
 27936 ADD A,5       ; }
 27938 CALL 30534    ; Update the boy's animatory state, update the SRB, and
                     ; place the address of the entry point at #R27941 (below)
                     ; into bytes #b17 and #b18 of the character buffer
; This entry point is used after the boy has sat down facing the stage.
@label=SITASSEM
 27941 LD A,(32640)  ; {Check bit 7 of #R32640 (set by #R61658, reset by
 27944 RLCA          ; #R62032): has assembly finished yet?}
 27945 RET C         ; Return if not
 27946 LD L,18       ; {Remove the address of this routine's entry point
 27948 LD (HL),0     ; (#R27941) from bytes #b17 and #b18 of the character's
                     ; buffer, triggering a move to the next command in the
                     ; command list}
 27950 JP 26818      ; Make the boy stand up before continuing, though

; Unused
@rsub=!27953
s27953 DEFB 0

; Check whether a target character can be seen by another character
;
; Used by the routines at #R28002 and #R28029. This routine checks through
; #REGb' 'spotter' characters starting with character #REGh'. If any spotter is
; close enough to the target to be able to see it, the routine returns with
; #REGa holding a non-zero value, #REGh holding the spotter's character number,
; and the carry flag set if the spotter is facing the right way to see it
; (reset otherwise). If no spotters are close enough to the target to be able
; to see it, the routine returns with #REGa holding 0 and the carry flag reset.
;
; B Upper x-coordinate of the target range
; C Lower x-coordinate of the target range
; D Target character's y-coordinate
; E Target character's x-coordinate
; B' Number of spotters to check
; H' Character number of the first spotter to check
@label=VISIBLE
c27954 EXX           ;
*27955 LD L,2        ; {Pick up the spotter's coordinates in #REGde'; we are
 27957 LD D,(HL)     ; going to check whether this character can see the target
 27958 DEC L         ;
 27959 LD E,(HL)     ; }
 27960 LD A,D        ; Transfer the spotter's y-coordinate to #REGa
 27961 EXX           ;
 27962 SUB D         ; Subtract the target's y-coordinate
 27963 JR NC,27967   ; Jump if the spotter is below or level with the target
 27965 NEG           ;
*27967 CP 4          ; Is the spotter within 3 y-coordinates of the target?
 27969 JR NC,27980   ; Jump if not
 27971 EXX           ;
 27972 LD A,E        ; #REGa=spotter's x-coordinate
 27973 EXX           ;
 27974 CP C          ; {Compare this with the lower and upper limits of the
 27975 JR C,27980    ; range within which the target can be seen, and jump to
 27977 CP B          ; #R27987 if the spotter is within seeing range
 27978 JR C,27987    ; }
; This entry point is used by the routine at #R28002.
*27980 EXX           ;
; This entry point is used by the routine at #R28029.
*27981 INC H         ; {The last spotter was not within seeing range of the
 27982 DJNZ 27955    ; target; try the next spotter}
 27984 EXX           ;
 27985 XOR A         ; Signal: none of the spotters was within range
 27986 RET           ;
; We've found a spotter within seeing range of the target. But is he facing the
; right way?
*27987 CP E          ; Does the spotter's x-coordinate match the target's?
 27988 JR Z,27999    ; Jump if so
 27990 LD A,0        ; The carry flag is now set if the spotter is to the left
                     ; of the target
 27992 RRA           ; #REGa=#b128 if the spotter is to the left of the target,
                     ; #b0 if to the right
 27993 EXX           ;
 27994 LD L,0        ; Point #REGhl' at the spotter's animatory state
 27996 XOR (HL)      ; Compare this orientation with the direction in which the
                     ; spotter is facing
 27997 EXX           ;
 27998 RLCA          ;
*27999 CCF           ; Set the carry flag if the spotter's facing the right way
                     ; to see the target
 28000 LD A,B        ; Set #REGa to something non-zero to indicate that the
                     ; spotter was within range
 28001 RET           ;

; Check whether ERIC can be seen by an adult
;
; Used by the routine at #R32062. Returns with the carry flag set if there is
; an adult nearby who can see ERIC, and #REGa holding the adult's character
; number. Otherwise returns with the carry flag reset and #REGa holding 0.
@label=WITNESS
c28002 LD H,210      ; #b210=ERIC
; This entry point is used by the routines at #R30555 (with #REGh=#b206: BOY
; WANDER) and #R30706 (with #REGh=#b207: ANGELFACE).
*28004 CALL 27886    ; Collect in #REGc and #REGb the lower and upper
                     ; x-coordinates of the 'visibility region' (20 character
                     ; spaces wide) around the boy
 28007 EXX           ;
 28008 LD H,200      ; #b200=MR WACKER
 28010 LD B,6        ; There are 6 adult characters
 28012 EXX           ;
 28013 CALL 27954    ; Find the first adult character inside the visibility
                     ; region (if any)
 28016 JR C,28025    ; Jump if we found one who can see the boy
*28018 AND A         ; Are there any adult characters left to check?
 28019 RET Z         ; Return with the carry flag reset if not
 28020 CALL 27980    ; We must have found an adult character who is facing the
                     ; wrong way to see the boy; skip this character and find
                     ; the next one inside the visibility region
 28023 JR NC,28018   ; Jump if there are no others inside the visibility
                     ; region, or we found another one facing the wrong way
; We found an adult character inside the visibility region and facing the right
; way to see the boy.
*28025 EXX           ;
 28026 LD A,H        ; #REGa=character number of the adult who saw the boy
 28027 EXX           ;
 28028 RET           ; Return with the carry flag set

; Check for main kids near a teacher
;
; Used by the routine at #R30102. Returns with the character number of the
; nearest main kid (or 0 if none of them was close enough) in #REGa.
;
; H Teacher's character number (#b200-#b204)
@label=NEARESTKID
c28029 CALL 27886    ; Get the lower and upper x-coordinates of the teacher's
                     ; range of vision in #REGc and #REGb
 28032 LD L,0        ; Default assumption: no kids nearby
 28034 EXX           ;
 28035 LD H,206      ; #b206=BOY WANDER
 28037 LD BC,1535    ; #REGb'=5 (main kids including ERIC), #REGc'=255 (initial
                     ; value for the distance of the nearest main kid)
 28040 EXX           ;
 28041 CALL 27954    ; Find the first main kid within range (if any)
*28044 AND A         ; Set the zero flag if we've checked all the main kids
 28045 LD A,L        ; #REGa=character number of the nearest kid so far, or 0
                     ; if there are none
 28046 RET Z         ; Return if we've finished checking all the main kids
 28047 LD A,E        ; #REGa=teacher's x-coordinate
 28048 EXX           ;
 28049 SUB E         ; Subtract the x-coordinate of the kid
 28050 JR NC,28054   ; Jump if the kid's to the left of teacher
 28052 NEG           ;
*28054 CP C          ; Is this kid closer to the teacher than the last?
 28055 JR NC,28062   ; Jump if not
 28057 LD C,A        ; #REGc'=distance from the teacher of the nearest kid
                     ; found so far
 28058 LD A,H        ; #REGa=character number of this kid
 28059 EXX           ;
 28060 LD L,A        ; Store the character number of the nearest kid in #REGl
 28061 EXX           ;
*28062 CALL 27981    ; Find the next main kid within range (if any)
 28065 JR 28044      ; Jump back to compare distances

; Check whether a location is on the assembly hall stage
;
; Used by the routine at #R25554. Returns to the caller of #R25554 with the
; carry flag reset if the location is on the stage. Returns to #R25554
; otherwise.
;
; D y-coordinate
; E x-coordinate
@label=ONSTAGE
@keep
c28067 LD BC,46651   ; #REGb=#b182, #REGc=#b59
 28070 LD A,D        ; #REGa=y-coordinate of the location
 28071 CP 14         ; The assembly hall stage's y-coordinate is 14
 28073 RET NZ        ; Return to #R25554 if the location is not there
 28074 LD A,E        ; #REGa=x-coordinate of the location
 28075 CP 90         ; {Return to #R25554 unless 74<=#REGa<90 (the rough
 28077 RET NC        ; vicinity of the stage)
 28078 CP 74         ;
 28080 RET C         ; }
 28081 POP BC        ; Drop the return address from the stack
 28082 LD A,192      ; #REGa=#b192: region identifier for the assembly hall
                     ; stage (see #R25554)
 28084 RET           ; Return with the carry flag reset (indicating that the
                     ; location is not on a staircase) to the caller of #R25554

; Determine which floor ERIC's on when he's not standing directly on one
;
; Continues from the routine at #R25534, having determined that ERIC's feet are
; not on the floor. On entry, the zero flag is set if (a) ERIC is jumping and
; the zero flag was set (by chance) upon entering the routine at #R25534, or
; (b) bits 1 and 2 of ERIC's status flags at #R32749 are both reset. Returns
; with #REGd=#b17 if the zero flag is set upon entry (regardless of which floor
; ERIC is on, which is a #BUG#jumpAbsent(bug)); otherwise returns with
; #REGd=#b3, #b10, #b14 or #b17, indicating which floor ERIC is directly above.
;
; D ERIC's y-coordinate
; E ERIC's x-coordinate
@label=GETERICY2
c28085 LD A,D        ; #REGa=ERIC's y-coordinate
@bfix=CP 17          ; Is ERIC on the bottom floor?
 28086 LD D,17       ; #b17=bottom floor
@bfix=/              ; Return with #REGd=#b17 if so
 28088 RET Z         ; Return with #REGd=#b17 if the zero flag was set upon
                     ; entry (regardless of which floor ERIC is on, which is a
                     ; #BUG#jumpAbsent(bug))
 28089 LD D,3        ; #b3=top floor
 28091 CP 4          ; Is ERIC directly above the top floor?
 28093 RET C         ; Return with #REGd=#b3 if so
 28094 LD D,10       ; #b10=middle floor
 28096 CP 11         ; Is ERIC directly above the middle floor?
 28098 RET C         ; Return with #REGd=#b10 if so
 28099 LD D,17       ; #b17=bottom floor
 28101 CP 15         ; Is ERIC below the height of the stage?
 28103 RET NC        ; Return with #REGd=#b17 if so
 28104 LD A,E        ; #REGa=ERIC's x-coordinate
 28105 CP 76         ; {Return with #REGd=#b17 if ERIC is not directly above
 28107 RET C         ; the assembly hall stage
 28108 CP 82         ;
 28110 RET NC        ; }
 28111 LD D,14       ; #b14=assembly hall stage
 28113 RET           ;

; Put ERIC midstride
;
; Used by the routines at #R28315 and #R28484. Puts ERIC midstride after 'Q'
; (up), 'A' (down), 'O' (left) or 'P' (right) was pressed.
;
; BC ERIC's post-midstride coordinates
; DE ERIC's midstride coordinates
@label=MVERIC1
c28114 PUSH DE       ; Save ERIC's midstride coordinates temporarily
@ssub=LD HL,53760+5
 28115 LD HL,53765   ; Point #REGhl at byte #b5 of ERIC's buffer
 28118 LD (HL),B     ; {Place ERIC's post-midstride coordinates into bytes #b4
 28119 DEC L         ; and #b5 of his buffer
 28120 LD (HL),C     ; }
 28121 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 28124 POP DE        ; Restore ERIC's midstride coordinates to #REGde
 28125 LD L,3        ;
 28127 INC A         ; #REGa=ERIC's next animatory state (midstride)
 28128 PUSH AF       ; Save this briefly
 28129 INC A         ; {#REGa=ERIC's post-midstride animatory state
 28130 AND 250       ; }
 28132 LD (HL),A     ; Store this in byte #b3 of ERIC's buffer
 28133 POP AF        ; #REGa=ERIC's next animatory state (midstride)
 28134 CALL 24880    ; Update ERIC's animatory state (to midstride) and
                     ; location and update the SRB
 28137 LD L,4        ; 4=small value for ERIC's main action timer (fast)
 28139 LD A,(32753)  ; #R32753 holds the keypress table offset of the last key
                     ; pressed
 28142 BIT 3,A       ; Was the last key pressed upper case (fast)?
 28144 JR Z,28148    ; Jump if so
 28146 LD L,9        ; 9=large value for ERIC's main action timer (slow)
*28148 LD H,L        ; {Initialise ERIC's main action timer at #R32755 and the
 28149 LD (32754),HL ; midstride/mid-action timer at #R32754 to the same value}
 28152 JP 29012      ; Make a walking sound effect

; Unused
@rsub=!28155
s28155 DEFS 5

; Move ERIC from the midstride or mid-action position and scroll the screen if
; necessary
;
; Called from the main loop at #R63210 when ERIC is midstride or just about to
; finish an action (such as firing the water pistol or bending over to catch a
; mouse).
@label=MVERIC2
c28160 LD H,210      ; #b210=ERIC
 28162 CALL 25012    ; Update the SRB for ERIC's current animatory state
                     ; (midstride) and location
 28165 LD L,3        ; {#REGa=ERIC's post-midstride/post-action animatory state
 28167 LD A,(HL)     ; }
 28168 INC L         ; {Collect ERIC's post-midstride/post-action coordinates
 28169 LD E,(HL)     ; in #REGde
 28170 INC L         ;
 28171 LD D,(HL)     ; }
; This entry point is used by the routines at #R23808 and #R64259 with
; #REGh=#b210 (ERIC).
*28172 CALL 24880    ; Update ERIC's animatory state and location and update
                     ; the SRB
 28175 CALL 29012    ; Make a sound effect
; This entry point is used by the routine at #R31723 with #REGh=#b210 (ERIC).
*28178 LD L,0        ; Point #REGhl at byte #b0 of ERIC's buffer
 28180 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 28183 BIT 7,(HL)    ; Check the 'direction' bit of ERIC's animatory state
 28185 LD L,1        ; Byte #b1 of ERIC's buffer holds his x-coordinate
 28187 JR Z,28202    ; Jump if ERIC's facing left
; ERIC is facing right. Check whether the screen should be scrolled left.
 28189 CP 160        ; {Return if the whole of the girls' skool is on-screen
 28191 RET Z         ; (no need to scroll)}
 28192 SUB (HL)      ; {Return if ERIC is 1-21 spaces from the left edge of the
@bfix=|ADD A,21      ; screen (no need to scroll)
@bfix=|RET P         ; }
 28193 CP 235        ; screen (no need to scroll); note that this doesn't
 28195 RET NC        ; handle the case where ERIC's x-coordinate is 0, which is
                     ; a #BUG#farLeft(bug)}
 28196 CALL 25248    ; Update the display
 28199 JP 25026      ; Scroll the screen to the left
; ERIC is facing left. Check whether the screen should be scrolled right.
*28202 AND A         ; Is the far left wall of the boys' skool on-screen?
 28203 RET Z         ; Return if so (no need to scroll the screen)
 28204 SUB (HL)      ; {Is ERIC more than 9 character spaces from the left edge
 28205 CP 247        ; of the screen?}
 28207 RET C         ; Return if so (no need to scroll the screen)
 28208 CALL 25248    ; Update the display
 28211 JP 25080      ; Scroll the screen to the right

; Unused
@rsub=!28214
s28214 DEFS 2

; Turn ERIC round
;
; Used by the routines at #R28436, #R28460, #R28484, #R28576 and #R64316.
@label=TURNERIC
c28216 CALL 29012    ; Make a sound effect
 28219 LD A,(32753)  ; Collect the keypress offset of the last keypress from
                     ; #R32753
 28222 BIT 3,A       ; Bit 3 of #REGa is reset if an upper case key was pressed
 28224 LD HL,1024    ; #REGh=4 (fast), #REGl=0 (not midstride)
 28227 JR Z,28231    ; Jump if an upper case (fast) key was pressed
 28229 LD H,9        ; 9=slow
*28231 LD (32754),HL ; Initialise ERIC's main action timer at #R32755 to 4
                     ; (fast) or 9 (slow), and reset the midstride/mid-action
                     ; timer at #R32754 to 0
 28234 LD H,210      ; #b210=ERIC
 28236 JP 25648      ; Turn ERIC round

; Unused
@rsub=!28239
s28239 DEFB 0

; Check whether a character is on a staircase
;
; Used by the routines at #R23887, #R24263, #R28436, #R28460, #R28484, #R28576,
; #R28992 and #R62423 to check whether ERIC is on a staircase, and by the
; routines at #R25843 and #R25944 to check whether ERIC or a teacher is on a
; staircase. Returns with the carry flag reset if the character is not on a
; staircase. Otherwise returns with the carry flag set and #REGa holding #b0
; (if the staircase goes up and to the left) or #b128 (if the staircase goes up
; and to the right).
;
; H Character number (#b200-#b204, #b210)
@label=ONSTAIRS
c28240 LD H,210      ; #b210=ERIC
; This entry point is used by the routines at #R25843 and #R25944.
*28242 LD L,1        ; {Collect the character's coordinates in #REGde
 28244 LD E,(HL)     ;
 28245 INC L         ;
 28246 LD D,(HL)     ; }
 28247 LD A,D        ; #REGa=character's y-coordinate
 28248 CP 3          ; Is the character on the top floor?
 28250 RET Z         ; Return with the carry flag reset if so
 28251 CP 10         ; Is the character on the middle floor?
 28253 RET Z         ; Return with the carry flag reset if so
 28254 CP 17         ; Is the character on the bottom floor?
 28256 RET Z         ; Return with the carry flag reset if so
 28257 CP 14         ; The assembly hall stage has y-coordinate 14
 28259 JR NZ,28269   ; Jump if the character's y-coordinate doesn't match that
 28261 LD A,E        ; #REGa=character's x-coordinate
 28262 CP 82         ; This is the x-coordinate of the right-hand edge of the
                     ; assembly hall stage
 28264 JR NC,28269   ; Jump if the character's to the right of this
 28266 CP 76         ; This is the x-coordinate of the left-hand edge of the
                     ; assembly hall stage
 28268 RET NC        ; Return with the carry flag reset if the character's on
                     ; the stage
; The character is not standing on the top floor, middle floor, bottom floor or
; assembly hall stage, so he must be on a staircase. Determine the orientation
; of the staircase.
*28269 LD A,D        ; #REGa=character's y-coordinate
 28270 CP 10         ; Is the character somewhere between the middle and bottom
                     ; floors?
 28272 JR NC,28287   ; Jump if so
 28274 LD A,E        ; #REGa=character's x-coordinate
 28275 CP 64         ; Is the character on the stairs leading up to the
                     ; Revision Library?
 28277 JR C,28283    ; Jump if so
*28279 LD A,0        ; Signal: character is on an up-and-to-the-left staircase
 28281 SCF           ; Signal: character's on a staircase
 28282 RET           ; Return with the carry flag set and #REGa=#b0
*28283 LD A,128      ; Signal: character is on an up-and-to-the-right staircase
 28285 SCF           ; Signal: character's on a staircase
 28286 RET           ; Return with the carry flag set and #REGa=#b128
*28287 CP 15         ;
 28289 LD A,E        ; #REGa=character's x-coordinate
 28290 JR C,28298    ; Jump if the character is on or above the level of the
                     ; assembly hall stage
 28292 CP 128        ; Is the character on either the stairs leading down from
                     ; the stage or the stairs leading down from the toilets in
                     ; the boys' skool?
 28294 JR C,28279    ; Jump if so
 28296 JR 28283      ; The character is on the stairs leading down to the
                     ; bottom floor in the girls' skool
*28298 CP 64         ; Is the character on either the stairs leading down to
                     ; the stage or the stairs leading down to the bottom floor
                     ; in the girls' skool?
 28300 JR NC,28283   ; Jump if so
 28302 LD A,0        ; Signal: character is on an up-and-to-the-left staircase
                     ; (the one leading down from the toilets in the boys'
                     ; skool, in fact)
 28304 RET           ; Return with the carry flag set and #REGa=0

; Deal with ERIC when he has stepped off the stage
;
; Used by the routine at #R28315.
@label=OFFSTAGE
c28305 LD HL,32763   ; {Set bit 1 at #R32763, indicating to the routine at
 28308 LD (HL),2     ; #R63405 that it should inspect #R32749 to see how to
                     ; deal with ERIC}
 28310 JP 64242      ; Handle ERIC's descent to the floor

; Unused
;
; Code remnants.
@rsub=!28313-28314
u28313 DEFB 8
 28314 RET

; Check for walls and closed doors in front of ERIC
;
; Used by the routines at #R28436 and #R28460. Impedes ERIC's progress if he's
; confronted by an immovable object, or opens the Science Lab storeroom door
; (if ERIC has the key and is trying to go right at the relevant location).
; Also sends ERIC down the first step of the staircase leading down to the
; assembly hall stage, or begins his descent off the assembly hall stage (if
; ERIC is trying to go left at the relevant location).
;
; D ERIC's y-coordinate
; E x-coordinate of the spot in front of ERIC
@label=CHKWALLS
c28315 LD A,E        ; #REGa=x-coordinate of the spot in front of ERIC
 28316 CP 191        ; Is ERIC facing the far right wall of the girls' skool?
 28318 RET NC        ; Return if so (ERIC can't walk through walls)
 28319 LD HL,32756   ; #R32756 holds the doors flags
 28322 LD A,D        ; #REGa=ERIC's y-coordinate
 28323 CP 3          ; Is ERIC on the top floor?
 28325 JR NZ,28363   ; Jump if not
; ERIC is on the top floor.
 28327 LD A,E        ; #REGa=x-coordinate of the spot in front of ERIC
 28328 CP 159        ; Is ERIC facing the far wall of the top-floor room in the
                     ; girls' skool?
 28330 RET Z         ; Return if so
 28331 CP 92         ; Is ERIC facing the window on the top floor of the boys'
                     ; skool?
 28333 RET Z         ; Return if so
 28334 CP 72         ; Is ERIC facing the head's left study door?
 28336 JR NZ,28341   ; Jump if not
 28338 BIT 0,(HL)    ; Is the head's left study door closed?
 28340 RET Z         ; Return if so
*28341 CP 83         ; Is ERIC facing the head's right study door?
 28343 JR NZ,28348   ; Jump if not
 28345 BIT 1,(HL)    ; Is the head's right study door closed?
 28347 RET Z         ; Return if so
; ERIC's path is not blocked, so let him move forward.
*28348 LD A,(53760)  ; #REGa=ERIC's animatory state
 28351 LD C,E        ; {Copy the coordinates of the spot in front of ERIC (his
 28352 LD B,D        ; post-midstride coordinates) from #REGde to #REGbc}
 28353 BIT 7,A       ; Is ERIC facing right?
 28355 JR NZ,28359   ; Jump if so
 28357 INC E         ;
 28358 INC E         ;
*28359 DEC E         ; Set #REGe to ERIC's current x-coordinate (which will
                     ; also be his midstride x-coordinate)
 28360 JP 28114      ; Put ERIC midstride
; ERIC's not on the top floor. Is he on the middle floor?
*28363 CP 10         ; Is ERIC on the middle floor?
 28365 JR NZ,28397   ; Jump if not
; ERIC is on the middle floor.
 28367 LD A,E        ; #REGa=x-coordinate of the spot in front of ERIC
 28368 CP 159        ; Is ERIC facing the far wall of the middle-floor
                     ; classroom in the girls' skool?
 28370 RET Z         ; Return if so
 28371 CP 94         ; Is ERIC facing the window on the middle floor of the
                     ; boys' skool?
 28373 RET Z         ; Return if so
@bfix=CP 62
 28374 CP 63         ; Is ERIC facing the far wall of the Science Lab
                     ; storeroom?
 28376 RET Z         ; Return if so
 28377 CP 84         ; Is ERIC about to descend the stairs from the middle
                     ; floor to the stage?
 28379 JR NZ,28385   ; Jump if not
 28381 INC E         ; #REGe=85 (ERIC's current x-coordinate)
 28382 JP 28606      ; Start moving ERIC down a stair
*28385 CP 54         ; Is ERIC facing the Science Lab storeroom door?
 28387 JR NZ,28348   ; Jump if not
 28389 BIT 2,(HL)    ; Is the Science Lab storeroom door closed?
 28391 JP Z,29681    ; Jump if so (and open it if ERIC has the key)
*28394 RET Z         ; Return if the door/gate is (still) closed
 28395 JR 28348      ; Otherwise move ERIC forward
; ERIC's not on the top floor or the middle floor. Is he on the bottom floor?
*28397 CP 17         ; Is ERIC on the bottom floor?
 28399 LD A,E        ; #REGa=x-coordinate of the spot in front of ERIC
 28400 JR NZ,28421   ; Jump if not
; ERIC is on the bottom floor.
 28402 CALL 29030    ; Let ERIC go no further if ALBERT's in his way
 28405 LD A,E        ; #REGa=x-coordinate of the spot in front of ERIC
 28406 CP 94         ; Is ERIC facing the boys' skool door?
 28408 JR NZ,28413   ; Jump if not
 28410 BIT 3,(HL)    ; Is the boys' skool door closed?
 28412 RET Z         ; Return if so
*28413 CP 133        ; Is ERIC facing the skool gate?
 28415 JR NZ,28348   ; Jump if not
 28417 BIT 4,(HL)    ; Is the skool gate closed?
 28419 JR 28394      ; Jump back and return if so, or move ERIC forward if not
; ERIC is on the assembly hall stage.
*28421 CP 82         ; Is ERIC about to ascend the stairs from the stage to the
                     ; middle floor?
 28423 JR NZ,28429   ; Jump if not
 28425 DEC E         ; #REGe=81 (ERIC's current x-coordinate)
 28426 JP 28514      ; Start moving ERIC up a stair
*28429 CP 76         ; Is ERIC about to jump off the stage?
 28431 JP Z,28305    ; Jump if so to deal with ERIC's descent to the floor
 28434 JR 28348      ; Otherwise move ERIC forward

; 'P' pressed - right
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'P' or
; '8' is pressed.
@label=RIGHT
c28436 LD A,(53760)  ; #REGa=ERIC's animatory state
 28439 BIT 7,A       ; Is ERIC facing left?
 28441 JP Z,28216    ; Turn ERIC round if so
 28444 CALL 28240    ; Is ERIC on a staircase?
 28447 JR C,28453    ; Jump if so
; This entry point is used by the routines at #R28484 and #R28576.
*28449 INC E         ; #REGe=x-coordinate of the spot in front of ERIC
 28450 JP 28315      ; Check for walls and closed doors in ERIC's path
; ERIC is on a staircase.
*28453 RLA           ; Does the staircase ERIC's on go up and to the right?
 28454 JP C,28514    ; Go up a stair if so
 28457 JP 28606      ; Otherwise go down a stair

; 'O' pressed - left
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'O' or
; '5' is pressed.
@label=LEFT
c28460 LD A,(53760)  ; #REGa=ERIC's animatory state
 28463 BIT 7,A       ; Is ERIC facing right?
 28465 JP NZ,28216   ; Turn ERIC round if so
 28468 CALL 28240    ; Is ERIC on a staircase?
 28471 JR C,28477    ; Jump if so
; This entry point is used by the routines at #R28484 and #R28576.
*28473 DEC E         ; #REGe=x-coordinate of the spot in front of ERIC
 28474 JP 28315      ; Check for walls and closed doors in ERIC's path
; ERIC is on a staircase.
*28477 RLA           ; Does the staircase ERIC's on go down and to the left?
 28478 JP C,28606    ; Go down a stair if so
 28481 JP 28514      ; Otherwise go up a stair

; 'Q' pressed - up
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'Q' or
; '7' is pressed.
@label=UP
c28484 CALL 28240    ; Check whether ERIC is on a staircase
 28487 LD L,0        ; Point #REGhl at byte #b0 of ERIC's buffer
 28489 JR C,28569    ; Jump if ERIC's on a staircase
 28491 BIT 7,(HL)    ; Check the 'direction' bit of ERIC's animatory state
 28493 LD A,D        ; #REGa=ERIC's y-coordinate
 28494 JR Z,28540    ; Jump if ERIC's facing left
 28496 CP 10         ; Is ERIC on the middle floor?
 28498 JR Z,28535    ; Jump if so
 28500 CP 14         ; Is ERIC on the assembly hall stage?
 28502 JR Z,28530    ; Jump if so
 28504 CP 17         ; Is ERIC on the bottom floor?
*28506 JP NZ,28449   ; Move ERIC one space to the right if not
 28509 LD A,E        ; #REGa=ERIC's x-coordinate
 28510 CP 176        ; This is the x-coordinate of the bottom of the stairs
                     ; leading up to the middle floor of the girls' skool
*28512 JR NZ,28506   ; Jump if ERIC is not at that point
; This entry point is used by the routines at #R28315, #R28436 and #R28460.
*28514 DEC D         ; Up a stair
 28515 LD B,D        ; #REGb=ERIC's post-midstride y-coordinate
; This entry point is used by the routine at #R28576.
*28516 LD A,(53760)  ; #REGa=ERIC's animatory state
 28519 LD C,E        ; #REGc=ERIC's current x-coordinate
 28520 BIT 7,A       ; Is ERIC facing left?
 28522 JR Z,28526    ; Jump if so
 28524 INC C         ;
 28525 INC C         ;
*28526 DEC C         ; #REGc=ERIC's post-midstride x-coordinate
 28527 JP 28114      ; Put ERIC midstride
; ERIC is on the assembly hall stage, facing right.
*28530 LD A,E        ; #REGa=ERIC's x-coordinate
 28531 CP 81         ; This is the x-coordinate of the bottom of the stairs
                     ; leading up from the stage to the middle floor
 28533 JR 28512      ; Move ERIC up a stair if he's here
; ERIC is on the middle floor, facing right.
*28535 LD A,E        ; #REGa=ERIC's x-coordinate
 28536 CP 19         ; This is the x-coordinate of the bottom of the stairs
                     ; leading up to the Revision Library
 28538 JR 28512      ; Move ERIC up a stair if he's here
; ERIC is facing left.
*28540 CP 10         ; Is ERIC on the middle floor?
 28542 JR NZ,28556   ; Jump if not
 28544 LD A,E        ; #REGa=ERIC's x-coordinate
 28545 CP 91         ; This is the x-coordinate of the bottom of the stairs
                     ; leading up to the head's study
 28547 JR Z,28514    ; Move ERIC up a stair if he's here
 28549 CP 186        ; This is the x-coordinate of the bottom of the stairs
                     ; leading up to the top floor of the girls' skool
*28551 JP NZ,28473   ; Move ERIC one space left if he's not here
 28554 JR 28514      ; Otherwise move him up a stair
*28556 CP 17         ; Is ERIC on the bottom floor?
 28558 JR NZ,28551   ; Jump if not
 28560 LD A,E        ; #REGa=ERIC's x-coordinate
 28561 CP 22         ; This is the x-coordinate of the bottom of the stairs
                     ; leading up to the middle floor at the far left of the
                     ; boys' skool
 28563 JR Z,28514    ; Move ERIC up a stair if he's here
 28565 CP 83         ; This is the x-coordinate of the bottom of the stairs
                     ; leading up to the assembly hall stage
 28567 JR 28551      ; Move ERIC up a stair if he's here
; ERIC is on a staircase.
*28569 XOR (HL)      ; {Set the carry flag if ERIC is facing the wrong way to
 28570 RLA           ; ascend the stairs}
 28571 JP C,28216    ; Turn ERIC round if he's facing the wrong way
 28574 JR 28514      ; Make ERIC go up a stair otherwise

; 'A' pressed - down
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'A' or
; '6' is pressed.
@label=DOWN
c28576 CALL 28240    ; Check whether ERIC is on a staircase
 28579 LD L,0        ; Point #REGhl at byte #b0 of ERIC's buffer
 28581 JR C,28650    ; Jump if ERIC's on a staircase
 28583 BIT 7,(HL)    ; Check the 'direction' bit of ERIC's animatory state
 28585 LD A,D        ; #REGa=ERIC's y-coordinate
 28586 JR Z,28625    ; Jump if ERIC is facing left
 28588 CP 3          ; Is ERIC on the top floor?
 28590 JR Z,28616    ; Jump if so
 28592 CP 10         ; Is ERIC on the middle floor?
 28594 JR Z,28611    ; Jump if so
 28596 CP 14         ; Is ERIC on the assembly hall stage?
*28598 JP NZ,28449   ; Move ERIC one space to the right if not
 28601 LD A,E        ; #REGa=ERIC's x-coordinate
 28602 CP 80         ; This is the x-coordinate of the top of the stairs
                     ; leading from the stage to the bottom floor
*28604 JR NZ,28598   ; Jump if ERIC is not here
; This entry point is used by the routines at #R28315, #R28436 and #R28460.
*28606 LD B,D        ; {#REGb=ERIC's post-midstride y-coordinate (down a stair)
 28607 INC B         ; }
 28608 JP 28516      ; Move ERIC one space right or left too
; ERIC is on the middle floor, facing right.
*28611 LD A,E        ; #REGa=ERIC's x-coordinate
 28612 CP 15         ; This is the x-coordinate of the top of the stairs
                     ; leading down to the bottom floor at the far left of the
                     ; boy's skool
 28614 JR 28604      ; Move ERIC down a stair if he's here
; ERIC is on the top floor, facing right.
*28616 LD A,E        ; #REGa=ERIC's x-coordinate
 28617 CP 84         ; This is the x-coordinate of the top of the stairs just
                     ; outside the head's study
 28619 JR Z,28606    ; Move ERIC down a stair if he's here
 28621 CP 179        ; This is the x-coordinate of the top of the stairs
                     ; leading down to the middle floor in the girls' skool
 28623 JR 28604      ; Move ERIC down a stair if he's here
; ERIC is facing left.
*28625 CP 10         ; Is ERIC on the middle floor?
 28627 JR Z,28641    ; Jump if so
 28629 CP 3          ; Is ERIC on the top floor?
*28631 JP NZ,28473   ; Move ERIC one space left if not
 28634 LD A,E        ; #REGa=ERIC's x-coordinate
 28635 CP 26         ; This is the x-coordinate of the top of the stairs
                     ; leading down from the Revision Library
*28637 JR NZ,28631   ; Move ERIC one space left if he's not here
 28639 JR 28606      ; Otherwise move him down a stair
; ERIC is on the middle floor, facing left.
*28641 LD A,E        ; #REGa=ERIC's x-coordinate
 28642 CP 85         ; This is the x-coordinate of the top of the stairs
                     ; leading down to the stage
 28644 JR Z,28606    ; Move ERIC down a stair if he's here
 28646 CP 183        ; This is the x-coordinate of the top of the stairs
                     ; leading down to the bottom floor in the girls' skool
 28648 JR 28637      ; Move ERIC down a stair if he's here
; ERIC is on a staircase.
*28650 XOR (HL)      ; {Reset the carry flag if ERIC is facing the wrong way to
 28651 RLA           ; descend the stairs}
 28652 JP NC,28216   ; Turn ERIC round if he's facing the wrong way
 28655 JR 28606      ; Otherwise move him down a stair

; Unused
@rsub=!28657
s28657 DEFB 0

; Collect the identifier and coordinates of a blackboard that will be wiped
;
; Used by the routine at #R26639 to collect information about the blackboard
; that is going to be wiped by a teacher. Returns with #REGb holding the
; blackboard identifier (the LSB of #R32596, #R32602, #R32608, #R32614 or
; #R32620), and #REGde holding the coordinates of the top left-hand square of
; the board.
;
; H Teacher's character number (#b201-#b204)
@label=BOARDID2
c28658 LD A,12       ; {Change the instruction at #R26476 to #S/ADD A/,#n12
@ssub=LD (26476+1),A
 28660 LD (26477),A  ; (for the purpose of this routine, a teacher is
                     ; considered to be standing next to a blackboard if he's
                     ; within 12 spaces to the right of its left edge)}
 28663 CALL 26453    ; Collect information about the blackboard the teacher is
                     ; standing next to
 28666 LD A,4        ; {Change the instruction at #R26476 back to #S/ADD A/,#n4
@ssub=LD (26476+1),A
 28668 LD (26477),A  ; }
 28671 RET           ;

; Check for walls, closed doors and ALBERT in front of the bike
;
; Used by the routines at #R29194 (when the bike is travelling of its own
; accord, or ERIC is standing on the saddle) and #R29278 (when ERIC is sitting
; on the bike). Returns with the zero flag set if a wall or closed door lies in
; the bike's path, or the carry flag set if ALBERT is impeding the bike's
; progress.
;
; A ERIC's or the bike's animatory state
; E ERIC's or the bike's x-coordinate
@label=BIKEPATH
c28672 RLCA          ; Set the carry flag if the bike is facing right
 28673 LD HL,32756   ; #R32756 holds the doors flags
 28676 LD A,E        ; #REGa=ERIC's/bike's x-coordinate
 28677 JR NC,28722   ; Jump if the bike is facing left
; The bike is travelling to the right.
 28679 CP 189        ; Has the bike hit the far right wall of the girls' skool?
 28681 RET Z         ; Return with the zero flag set if so
 28682 CP 93         ; Is the boys' skool door in front of the bike?
 28684 JR NZ,28692   ; Jump if not
*28686 BIT 3,(HL)    ; Is the boys' skool door open?
 28688 JR NZ,28719   ; Jump if so
*28690 CP A          ; {Return with the zero flag set if the bike has hit the
 28691 RET           ; boys' skool door or the skool gate}
*28692 CP 132        ; Is the skool gate in front of the bike?
 28694 JR NZ,28702   ; Jump if not
*28696 BIT 4,(HL)    ; Is the skool gate closed?
 28698 JR Z,28690    ; Jump if so
 28700 JR 28719      ;
; Neither the skool door nor the skool gate is in the way. What about ALBERT?
*28702 LD A,(52480)  ; #REGa=ALBERT's animatory state
 28705 CP 127        ; #AS127: Is ALBERT facing left with his arm up?
 28707 JR NZ,28719   ; Jump if not
@ssub=LD A,(52480+1)
 28709 LD A,(52481)  ; #REGa=ALBERT's x-coordinate
 28712 SUB 2         ; #REGa=x-coordinate of the spot 2 spaces in front of
                     ; ALBERT
 28714 CP E          ; Is the bike here?
 28715 JR NZ,28719   ; Jump if not
 28717 SCF           ; Signal: ALBERT is stopping the bike
 28718 RET           ;
; No obstruction lies in the bike's path.
*28719 LD A,L        ; Set #REGa to a non-zero value
 28720 AND A         ; {Return with the zero and carry flags reset
 28721 RET           ; }
; The bike is travelling to the left.
*28722 CP 1          ; Has the bike hit the far left wall of the boys' skool?
 28724 RET Z         ; Return with the zero flag set if so
 28725 CP 96         ; Is the boys' skool door in front of the bike?
 28727 JR Z,28686    ; Jump back if so to check whether it's open
 28729 CP 135        ; Is the skool gate in front of the bike?
 28731 JR Z,28696    ; Jump back if so to check whether it's open
 28733 AND A         ; {Return with the zero and carry flags reset
 28734 RET           ; }

; Unused
@rsub=!28735
s28735 DEFB 0

; Open or close a door or window
;
; Used by the routines at #R28855, #R28877 and #R29681. On entry, #REGa holds
; the door/window identifier:
; .
; #TABLE(default,centre)
; { =h ID | =h Door/window }
; { #b1   | Left study door }
; { #b2   | Right study door }
; { #b4   | Science Lab storeroom door }
; { #b8   | Boys' skool door }
; { #b16  | Skool gate }
; { #b32  | Drinks cabinet door }
; { #b64  | Top floor window }
; { #b128 | Middle floor window }
; TABLE#
;
; A Door/window identifier (see table above)
; B 0 (close it) or 1 (open it)
@label=MVDOORWIN
c28736 PUSH HL       ;
 28737 LD HL,32756   ; #R32756 holds the doors flags
 28740 LD C,A        ; Copy the door identifier to #REGc
 28741 LD A,(HL)     ; Pick up the doors flags in #REGa
 28742 OR C          ;
 28743 DEC B         ; Are we opening the door/window?
 28744 JR Z,28747    ; Jump if so
 28746 XOR C         ;
*28747 LD (HL),A     ; Restore the doors flags with the appropriate bit set or
                     ; reset
 28748 LD A,C        ; #REGa=door identifier
@nowarn
@ssub=LD HL,57686-1
 28749 LD HL,57685   ; {Point #REGhl at the appropriate entry in the doors and
@rsub=INC HL
*28752 INC L         ; windows table at #R57686
@rsub=INC HL
 28753 INC L         ;
 28754 RRCA          ;
 28755 JR NC,28752   ; }
 28757 LD A,(HL)     ; Pick up the MSB of the entry in #REGa
 28758 ADC A,B       ; Add 1 if opening the door/window
@rsub=DEC HL
 28759 DEC L         ; Point #REGhl at the LSB of the entry
 28760 LD L,(HL)     ; Pick this up in #REGl
 28761 LD H,A        ; Now #REGhl=address from the doors and windows table
                     ; (+#w256 if opening)
 28762 CALL 27672    ; Alter UDG references in the play area and update the SRB
                     ; for the newly opened or closed door/window
 28765 POP HL        ;
 28766 RET           ;

; Check for a closed door in front of a character
;
; Used by the routines at #R25843 and #R28814. Returns with the carry flag set
; if the character is facing a closed door, and #REGc holding the door
; identifier:
; .
; #TABLE(default,centre)
; { =h ID | =h Door }
; { #b1   | Left study door }
; { #b2   | Right study door }
; { #b4   | Science Lab storeroom door }
; { #b8   | Boys' skool door }
; { #b16  | Skool gate }
; TABLE#
;
; H Character number (#b183-#b210)
@label=CHKDOOR
c28767 LD L,0        ; {Pick up the character's animatory state in #REGa
 28769 LD A,(HL)     ; }
 28770 RLCA          ; {Set #REGa=-1 if the character is facing left, 1 if
 28771 CCF           ; facing right
 28772 SBC A,A       ;
 28773 ADD A,A       ;
 28774 INC A         ; }
 28775 INC L         ; Byte #b1 of the character's buffer holds his
                     ; x-coordinate
 28776 ADD A,(HL)    ; Add this to #REGa
 28777 LD E,A        ; #REGe=x-coordinate of the location directly in front of
                     ; the character
 28778 INC L         ; #REGl=#b2
 28779 LD D,(HL)     ; Pick up the character's y-coordinate in #REGd
 28780 PUSH HL       ;
 28781 LD HL,47422   ; #R47422 is the address of the door location table
 28784 LD BC,1281    ; #REGb=5 (there are 5 doors), #REGc=1 (the left study
                     ; door is the first one)
*28787 LD A,E        ; #REGa=x-coordinate of the location directly in front of
                     ; the character
 28788 CP (HL)       ; Compare this with the x-coordinate of the door
 28789 INC HL        ;
 28790 JR NZ,28796   ; Jump if the x-coordinates don't match
 28792 LD A,D        ; #REGa=character's y-coordinate
 28793 CP (HL)       ; Compare this with the y-coordinate of the door
 28794 JR Z,28804    ; Jump if they match (the character is standing at this
                     ; door)
*28796 INC HL        ;
 28797 RLC C         ; Move the set bit in #REGc one place to the left
 28799 DJNZ 28787    ; Jump back to consider the remaining doors
 28801 POP HL        ;
 28802 XOR A         ; Reset the carry flag: there is no door in front of the
                     ; character
 28803 RET           ;
; The character is standing in front of a door.
*28804 LD A,(32756)  ; Pick up the doors flags from #R32756
 28807 AND C         ; Check the bit corresponding to the door
 28808 POP HL        ;
 28809 RET NZ        ; Return with the carry flag reset if the door is open
 28810 SCF           ; Set the carry flag: the door is closed
 28811 RET           ;

; Unused
@rsub=!28812
s28812 DEFS 2

; Check for a closed door in a character's path and open it if allowed
;
; Used by the routine at #R25581. Checks for a closed door in the character's
; path and makes him open it if he's an adult.
;
; H Character number (#b183-#b209)
@label=DOOROPEN
c28814 CALL 28767    ; Check for closed doors in the character's path
 28817 JP NC,25012   ; Update the SRB for the character's current animatory
                     ; state and location if no doors need opening
 28820 LD A,H        ; #REGa=character number
 28821 SUB 200       ; {Are we dealing with a teacher or ALBERT (i.e. someone
 28823 CP 6          ; who can open doors)?}
 28825 JR C,28833    ; Jump if so
 28827 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 28830 XOR 128       ; Characters who can't open doors have bit 7 of their
                     ; animatory state flipped (i.e. they are turned around)
 28832 RET           ; Return to place the character midstride
; The character we're dealing with is confronted by a closed door and is able
; to open it.
*28833 POP DE        ; Drop the return address; we will handle updating the SRB
                     ; and setting the character's new animatory state here
                     ; instead
; This entry point is used by the routine at #R25944.
*28834 LD L,19       ; {Place the identifier of the closed door (see #R28767)
 28836 LD (HL),C     ; into byte #b19 of the character's buffer}
 28837 INC L         ; #REGl=#b20
 28838 LD (HL),1     ; Signal: open the door
; This entry point is used by the routines at #R29052 and #R62572.
*28840 LD L,18       ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),28855/256
 28842 LD (HL),112   ; routine at #R28855 into bytes #b17 and #b18 of the
 28844 DEC L         ; character's buffer
@ssub=LD (HL),28855%256
 28845 LD (HL),183   ; }
 28847 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 28850 OR 7          ; #REGa=animatory state of the character with his arm up
                     ; (to open the door)
 28852 JP 24880      ; Update the character's animatory state and update the
                     ; SRB

; Make a character open or close a door
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of the character's buffer by the routine at #R28814.
;
; H Character number (#b200-#b205)
@label=CHRMVDOOR
c28855 LD L,18       ; {Remove the address of this routine from bytes #b17 and
 28857 LD (HL),0     ; #b18 of the character's buffer}
 28859 INC L         ; #REGl=#b19
 28860 LD A,(HL)     ; #REGa=door identifier (see #R28736)
 28861 INC L         ; #REGl=#b20
 28862 LD B,(HL)     ; #REGb=0 if the character is going to close the door, or
                     ; 1 if he's going to open it
; This entry point is used by the routine at #R63801.
*28863 CALL 28736    ; Open or close the door
 28866 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state
 28869 AND 248       ; #REGa=animatory state of the character with his arm down
 28871 JP 24880      ; Update the character's animatory state and update the
                     ; SRB

; Unused
@rsub=!28874
s28874 DEFS 3

; Close any temporarily open doors if necessary
;
; Used by the routine at #R63156. Checks the left study door, right study door,
; and Science Lab storeroom door, and closes any that are open (provided nobody
; is standing in the doorway).
@label=SHUTDOORS
c28877 LD A,(32758)  ; {Return unless #R32758 (which is decremented on every
 28880 CP 4          ; pass through the main loop, and cycles through the
 28882 RET NZ        ; values #b1-#b15) holds #b4 at the moment}
 28883 LD A,(32756)  ; #R32756 holds the doors flags
 28886 LD HL,318     ; #REGh=#b1 (left study door), #REGl=#b62
 28889 BIT 0,A       ; Is the left study door open?
 28891 CALL NZ,28908 ; If so, close it if possible
 28894 LD HL,576     ; #REGh=#b2 (right study door), #REGl=#b64
 28897 BIT 1,A       ; Is the right study door open?
 28899 CALL NZ,28908 ; If so, close it if possible
 28902 BIT 2,A       ; Is the Science Lab storeroom door open?
 28904 RET Z         ; Return if not
 28905 LD HL,1090    ; #REGh=#b4 (Science Lab storeroom door), #REGl=#b66
; At this point #REGh holds the identifier of a door that is open, and #REGl
; holds the LSB of the address of the entry in the table at #R47422 containing
; the location of the door.
*28908 PUSH HL       ; Save the door identifier briefly
 28909 LD H,185      ; Point #REGhl at the door location table entry
 28911 LD A,(HL)     ; #REGa=x-coordinate of the door
 28912 INC L         ;
 28913 LD D,(HL)     ; #REGd=y-coordinate of the door
 28914 DEC A         ; {Set #REGc=X-1 and #REGe=X+2, where X is the
 28915 LD C,A        ; x-coordinate of the door; any character whose
 28916 ADD A,3       ; x-coordinate is in this range will prevent the door from
 28918 LD E,A        ; closing}
@ssub=LD HL,46848+1
 28919 LD HL,46849   ; #REGl=#b1, #REGh=#b183 (little girl no. 1)
 28922 LD B,32       ; 32 game characters (#b183-#b214)
*28924 LD A,(HL)     ; #REGa=character's x-coordinate
 28925 CP C          ; Is the character to the left of the door?
 28926 JR C,28939    ; Jump if so
 28928 CP E          ; Is the character to the right of the door?
 28929 JR NC,28939   ; Jump if so
 28931 INC L         ; #REGl=#b2
 28932 LD A,D        ; #REGa=y-coordinate of the door
 28933 SUB (HL)      ; Subtract the character's y-coordinate
 28934 DEC L         ; #REGl=#b1
 28935 CP 2          ; Is the character standing in the doorway?
 28937 JR C,28943    ; Jump if so
*28939 INC H         ; Next character
 28940 DJNZ 28924    ; Jump back until all 32 characters have been checked
 28942 AND A         ; Reset the carry flag: no one is standing in the doorway
*28943 POP HL        ; Restore the door identifier to #REGh
 28944 LD A,H        ; Copy it to #REGa
 28945 CALL NC,28736 ; Close the door if no one's in the way
@rsub=!28948
 28948 LD A,(32756)  ; Pick up the doors flags in #REGa before returning
                     ; (ignored by the caller)
 28951 RET           ;

; Score 100 points and make the sound of a mouse being caught
;
; Used by the routine at #R31573.
;
; A #b10
@label=CATCHMOUSE
c28952 CALL 29621    ; Add 100 to the score and print it
 28955 LD L,3        ; Three squeaks
*28957 LD A,4        ; {Set the squeak sound effect parameters: #REGa=#b4
 28959 LD BC,6674    ; (green border); #REGb=#b26 (pitch); #REGc=#b18
 28962 LD D,6        ; (alternating yellow border); #REGd=#b6 (duration)}
 28964 CALL 29836    ; Squeak once
 28967 LD D,60       ; {Pause briefly
*28969 DEC DE        ;
 28970 LD A,D        ;
 28971 OR E          ;
 28972 JR NZ,28969   ; }
 28974 DEC L         ; Next squeak
 28975 JR NZ,28957   ; Jump back until all 3 squeaks have been done
 28977 RET           ;

; Make a female character stop jumping
;
; Used by the routine at #R31078.
;
; H Character number (#b183-#b189, #b204 or #b209)
@label=STOPJPING
c28978 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 28981 LD A,252      ; {Determine which floor the character is currently on or
*28983 ADD A,7       ; above (she may be on a chair or still in the air)
 28985 CP D          ;
 28986 JR C,28983    ; }
 28988 LD D,A        ; #REGd=#b3, #b10 or #b17 (top, middle or bottom floor)
 28989 JP 30115      ; Restore the character's original animatory state and put
                     ; her feet back on the floor

; 'D' pressed - drop stinkbomb
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'D' or
; 'U' is pressed.
@label=DROPSBOMB
c28992 LD A,(32747)  ; #R32747 holds the inventory flags
 28995 RLCA          ; Does ERIC have any stinkbombs?
 28996 RET NC        ; Return if not
 28997 CALL 28240    ; Is ERIC on a staircase?
 29000 RET C         ; Return if so
 29001 CALL 57910    ; If buffer #b213 (normally used by BOY WANDER's pellet)
                     ; is available, prepare it and return here
 29004 LD A,7        ; #AS7: animatory state of ERIC dropping a stinkbomb (arm
                     ; up)
@nowarn
 29006 LD HL,63586   ; Routine at #R63586: deal with a dropped stinkbomb
 29009 JP 57642      ; Update ERIC's animatory state and drop the stinkbomb

; Make a walking sound effect (blue border)
;
; Used by the routines at #R21920, #R28114, #R28160, #R28216, #R29574, #R62178,
; #R62438, #R64242 and #R64259.
@label=WALKSOUND
c29012 PUSH BC       ;
 29013 LD A,1        ; The border will be blue
; This entry point is used by the routine at #R21419 with #REGa=#b6 (yellow
; border).
*29015 LD C,7        ; Initialise the sound effect duration counter
*29017 XOR 16        ; {Produce the sound effect
 29019 OUT (254),A   ;
 29021 LD B,192      ;
*29023 DJNZ 29023    ;
 29025 DEC C         ;
 29026 JR NZ,29017   ; }
 29028 POP BC        ;
 29029 RET           ;

; Prevent ERIC from getting past ALBERT if necessary
;
; Used by the routine at #R28315. Impedes ERIC's progress if ALBERT is standing
; right in front of him with his arm up.
;
; E x-coordinate of the spot in front of ERIC
@label=STOPERIC
c29030 LD A,(53760)  ; #REGa=ERIC's animatory state
 29033 RLCA          ; Is ERIC facing left?
 29034 RET NC        ; Return if so
 29035 LD A,(52480)  ; #REGa=ALBERT's animatory state
 29038 CP 127        ; #AS127: Is ALBERT facing left with his arm up?
 29040 RET NZ        ; Return if not
@ssub=LD A,(52480+1)
 29041 LD A,(52481)  ; #REGa=ALBERT's x-coordinate
@rsub=DEC A
 29044 SUB 1         ;
 29046 CP E          ; Is ERIC standing in front of ALBERT (facing him)?
 29047 RET NZ        ; Return if not
 29048 POP BC        ; Drop the return address, preventing any forward movement
                     ; by ERIC
 29049 RET           ; Return to the main loop

; Unused
@rsub=!29050
s29050 DEFS 2

; Make a character open or close a door
;
; Used by command lists #R58368(#b22), #R58880(#b24), #R59136(#b26),
; #R57956(#b28), #R59724(#b76) and #R59765(#b78). This routine works on two
; parameters. First the door identifier:
; .
; #TABLE(default,centre)<wrapalign>
; { =h ID | =h Door             | =h Command lists }
; { #b8   | Boys' skool door    | #R59724(#b76), #R59765(#b78) }
; { #b16  | Skool gate          | #R59724(#b76), #R59765(#b78) }
; { #b32  | Drinks cabinet door | #R58368(#b22), #R58880(#b24), #R59136(#b26),
;                                 #R57956(#b28) }
; TABLE#
; .
; And then the action identifier:
; .
; #TABLE(default)
; { 0 | Close it }
; { 1 | Open it }
; TABLE#
;
; H #b204 (MISS TAKE) or #b205 (ALBERT)
@label=MOVEDOOR
c29052 LD L,3        ; {Replace the address of this routine in bytes #b3 and
@ssub=LD (HL),29061%256
@rsub=LD (HL),29061%256 ; #b4 of the character's buffer with #R29061 (below)
@rsub=INC L
@rsub=LD (HL),29061/256 ; }
 29054 LD (HL),133   ; #b4 of the character's buffer with #R29061 (below)}
 29056 LD L,19       ; {Copy the door identifier and open/close parameter from
 29058 CALL 25188    ; the command list into bytes #b19 and #b20 of the
                     ; character's buffer}
@label=MOVEDOOR0
 29061 LD L,19       ;
 29063 LD A,(HL)     ; #REGa=door identifier
 29064 CP 8          ; Is it the boys' skool door?
 29066 JR NZ,29101   ; Jump if not
@ssub=LD A,(54016+1)
 29068 LD A,(54017)  ; #REGa=x-coordinate of the bike
 29071 CP 94         ; Is the bike in the boys' skool?
 29073 JR C,29087    ; Jump if so
 29075 LD DE,4448    ; (#REGe,#REGd)=(96,17)
; This entry point is used by the routine at #R29101 with
; (#REGe,#REGd)=(136,17):
*29078 CP E          ; Set the carry flag if the bike is blocking the way
 29079 LD A,(54016)  ; #REGa=bike's animatory state
 29082 CALL C,26496  ; Move the bike to the location in #REGde if it's blocking
                     ; the boys' skool door or the skool gate
 29085 LD H,205      ; #b205=ALBERT
; This entry point is used by the routine at #R29101.
*29087 LD L,4        ; {Remove the address of this routine from bytes #b3 and
 29089 LD (HL),0     ; #b4 of the character's buffer}
 29091 JP 28840      ; Open or close the door

; Unused
@rsub=!29094
s29094 DEFS 7

; Move the bike if it's obstructing the skool gate
;
; This is a branch of the routine at #R29052.
;
; A #b8 (boys' skool door) or #b16 (skool gate)
@label=MVBIKEGATE
c29101 CP 16         ; Is the skool gate being opened or closed?
 29103 JR NZ,29087   ; Jump if not
@ssub=LD A,(54016+1)
 29105 LD A,(54017)  ; #REGa=bike's x-coordinate
 29108 CP 133        ; Is the bike to the left of the skool gate?
 29110 JR C,29087    ; Jump if so
 29112 LD DE,4488    ; #REGe=136, #REGd=17
 29115 JR 29078      ; Move the bike if it's obstructing the skool gate

; Unused
@rsub=!29117
s29117 DEFB 0

; Get the ASCII code of the last key pressed
;
; Used by the routines at #R24175, #R29178, #R62178, #R62483 and #R63166.
; Returns with the zero flag set if no key of interest was pressed. Otherwise
; returns with #REGa holding the ASCII code of the last key pressed.
@label=READKEY
c29118 LD A,(32748)  ; #REGa=0 if we're using the keyboard, 1 if using Kempston
 29121 AND A         ; Are we using the keyboard?
 29122 JR Z,29154    ; Jump if so
 29124 IN A,(31)     ;
 29126 AND 31        ; Any input from the joystick?
 29128 JR Z,29154    ; Jump if not
 29130 LD L,80       ; #b80='P' (RIGHT)
 29132 RRCA          ;
 29133 JR C,29151    ; Jump if the joystick was moved right
 29135 DEC L         ; #REGl=#b79='O' (LEFT)
 29136 RRCA          ;
 29137 JR C,29151    ; Jump if the joystick was moved left
 29139 LD L,65       ; #b65='A' (DOWN)
 29141 RRCA          ;
 29142 JR C,29151    ; Jump if the joystick was moved down
 29144 LD L,81       ; #b81='Q' (UP)
 29146 RRCA          ;
 29147 JR C,29151    ; Jump if the joystick was moved up
 29149 LD L,102      ; #b102='f' (fire)
*29151 LD A,L        ; Pass the appropriate character code to #REGa
 29152 AND A         ; Reset the zero flag (we have input)
 29153 RET           ;
; This entry point is used by the startup routines at #R20896, #R21152 and
; #R21664.
@nowarn
*29154 LD HL,23611   ; Point #REGhl at the system variable FLAGS
 29157 BIT 5,(HL)    ; Check the keypress flag
 29159 RES 5,(HL)    ; Reset the flag ready for the next keypress
 29161 RET Z         ; Return if no key was pressed
@nowarn
 29162 LD A,(23560)  ; Collect the ASCII code of the key last pressed
 29165 CP 13         ; Was it ENTER?
 29167 JR Z,29173    ; Jump if so
 29169 CP 32         ; Was it a control character?
 29171 JR C,29176    ; Jump if so
*29173 CP 128        ; Was it an extended character?
 29175 RET C         ; Return if not
; This entry point is used by the routine at #R29118.
*29176 XOR A         ; Set the zero flag to indicate that no (relevant) key was
                     ; pressed
 29177 RET           ;

; Get the keypress offset of the last key pressed
;
; Used by the routines at #R29278, #R29462, #R62483 and #R64316. Returns with
; the zero flag set if no game keys were pressed. Otherwise returns with #REGa
; holding the value from the #R58624(keypress offset table) corresponding to
; the last key pressed. This offset (an even number from #b80 to #b120) points
; at an entry in the keypress address table at #R58704. Each entry in that
; table is the address of the routine for handling a keypress.
@label=KEYOFFSET
c29178 CALL 29118    ; Collect the ASCII code of the last key pressed in #REGa
 29181 RET Z         ; Return if no key was pressed
 29182 SUB 48        ; We're only interested in keys with codes #b48 onwards
 29184 JR C,29176    ; Jump if none of these was pressed
 29186 LD L,A        ; {Point #REGhl at the relevant entry in the keypress
 29187 LD H,229      ; offset table at #R58624}
 29189 LD A,(HL)     ; Pick up the offset from that table
 29190 AND A         ; Set the zero flag if the offset is #b0 (i.e. not a game
                     ; key)
 29191 RET           ;

; Unused
@rsub=!29192
s29192 DEFS 2

; Control the bike when ERIC's not sitting on the saddle
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of the bike's buffer by the routine at #R29278. It controls the
; bike when it is wheeling along on its own (after ERIC has dismounted), or
; when ERIC is standing on the saddle.
@label=WHEELBIKE
c29194 LD HL,32752   ; #R32752 holds the bike's momentum
 29197 LD A,(HL)     ; Pick this up in #REGa
 29198 SUB 7         ; Is it time for the bike to come to rest?
 29200 JR NC,29223   ; Jump if not
; It's time for the bike to come to rest.
@ssub=LD L,32749%256
 29202 LD L,237      ; #REGhl=#R32749 (ERIC's status flags)
 29204 BIT 7,(HL)    ; Is ERIC standing on the saddle of the bike?
 29206 JR Z,29210    ; Jump if not
 29208 LD (HL),16    ; Set bit 4 at #R32749: ERIC is falling and will not land
                     ; on his feet
*29210 LD H,211      ; #b211=bike
 29212 CALL 25012    ; Update the SRB for the bike's current animatory state
                     ; and location
 29215 DEC A         ; #REGa=animatory state of the bike resting on the floor
 29216 LD L,18       ; {Remove the address of this routine from bytes #b17 and
 29218 LD (HL),0     ; #b18 of the bike's buffer}
 29220 JP 24880      ; Update the bike's animatory state and update the SRB
; The bike still has some momentum left. Check whether it has hit anything.
*29223 LD (HL),A     ; Set the bike's remaining momentum at #R32752
 29224 LD HL,(54016) ; {#REGe=bike's x-coordinate, #REGa=bike's animatory state
 29227 LD A,L        ;
 29228 LD E,H        ; }
 29229 CALL 28672    ; Check for walls, closed doors or ALBERT in the bike's
                     ; path
@ssub=LD L,32749%256
 29232 LD L,237      ; #REGhl=#R32749 (ERIC's status flags)
 29234 JR NC,29242   ; Jump if ALBERT's not impeding the bike's progress
 29236 BIT 7,(HL)    ; Is ERIC standing on the saddle of the bike?
 29238 JR Z,29252    ; Jump if not
 29240 LD (HL),16    ; Set bit 4: ERIC is falling and will not land on his feet
*29242 JR NZ,29252   ; Jump if there are no walls or closed doors in the bike's
                     ; path
 29244 BIT 7,(HL)    ; Is ERIC standing on the saddle of the bike?
 29246 JR Z,29210    ; Jump if not
 29248 LD (HL),64    ; Set bit 6: ERIC has hit a wall or closed door while
                     ; standing on the saddle of the bike
 29250 JR 29210      ;
*29252 LD H,211      ; #b211=bike
 29254 CALL 29264    ; Move the bike and one space forward and update the SRB
 29257 LD A,(32749)  ; #R32749 holds ERIC's status flags
 29260 RLCA          ; Is ERIC standing on the saddle of the bike?
 29261 RET NC        ; Return if not
; This entry point is used by the routine at #R29278.
*29262 LD H,210      ; #b210=ERIC
; This entry point is used by the routine at #R30380.
*29264 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 29267 RLCA          ;
 29268 RRCA          ;
 29269 JR C,29273    ; Jump if the character is facing right
 29271 DEC E         ;
 29272 DEC E         ;
*29273 INC E         ; Now #REGe=x-coordinate of the spot in front of the
                     ; character
 29274 JP 31723      ; Update the character's location, update the SRB, and
                     ; scroll the screen if necessary

; Unused
@rsub=!29277
s29277 DEFB 0

; Deal with ERIC when he's riding the bike
;
; Called by the routine at #R63405 when bit 0 at #R32749 is set (by the routine
; at #R29462). Listens for and responds appropriately to keypresses while ERIC
; is sitting on the saddle of the bike.
@label=RIDINGBIKE
c29278 LD HL,32755   ; #R32755 holds ERIC's main action timer
 29281 DEC (HL)      ; Is it time to deal with ERIC yet?
 29282 JR NZ,29402   ; Jump if not
 29284 INC (HL)      ; Set ERIC's action timer to 1, ensuring that we pass
                     ; through the following section of code on the next call
                     ; to this routine if no pedalling is detected this time
                     ; (if 'left' or 'right' is pressed, the action timer will
                     ; be reset to 5)
 29285 CALL 29178    ; #REGa=value from the #R58624(keypress offset table)
                     ; corresponding to the key just pressed (if any)
 29288 LD HL,32750   ; #R32750 holds the offset of the last key pressed while
                     ; ERIC was riding the bike
 29291 JR Z,29402    ; Jump if no keys were pressed since the last check
 29293 SET 3,A       ; We don't distinguish between fast (upper case) and slow
                     ; (lower case) keypresses while ERIC is riding the bike
 29295 CP 88         ; Was 'left' pressed?
 29297 JR Z,29303    ; Jump if so
 29299 CP 90         ; Was 'right' pressed?
 29301 JR NZ,29333   ; Jump if not
*29303 CP (HL)       ; Was the key just pressed the same as the last one
                     ; pressed?
 29304 JR Z,29402    ; Jump if so
; The 'left' key was pressed after a non-left key, or the 'right' key was
; pressed after a non-right key. In other words, ERIC pedalled.
 29306 LD (HL),A     ; Store the offset of the key just pressed in #R32750
@ssub=LD L,32755%256
 29307 LD L,243      ; #REGhl=#R32755 (ERIC's main action timer)
 29309 LD (HL),5     ; Reset this to 5
@ssub=LD L,32752%256
 29311 LD L,240      ; #REGhl=#R32752 (bike momentum)
 29313 LD A,(HL)     ; {Increase the bike's momentum, but not beyond #b255
 29314 ADD A,12      ;
 29316 JR NC,29320   ;
 29318 LD A,255      ;
*29320 LD (HL),A     ; }
 29321 LD H,210      ; #b210=ERIC
 29323 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 29326 XOR 1         ; Now #REGa=ERIC's new animatory state (#AS12, #AS13,
                     ; #AS140 or #AS141)
 29328 CALL 24880    ; Update ERIC's animatory state and update the SRB
 29331 JR 29402      ;
; Neither 'left' nor 'right' was pressed.
*29333 CP 92         ; Was 'up' pressed?
 29335 JR NZ,29382   ; Jump if not
@ssub=LD L,32749%256
 29337 LD L,237      ; #REGhl=#R32749 (ERIC's status flags)
 29339 LD (HL),128   ; Set bit 7: ERIC is standing on the saddle of the bike
 29341 LD H,210      ; #b210=ERIC
 29343 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 29346 PUSH DE       ;
 29347 DEC D         ; #REGd=ERIC's new y-coordinate (up a level)
@rsub=!29348
 29348 NOP           ;
 29349 INC E         ;
 29350 BIT 7,A       ; Is ERIC facing left?
 29352 JR Z,29356    ; Jump if so
 29354 DEC E         ;
 29355 DEC E         ;
*29356 AND 128       ; Now #REGa=ERIC's new animatory state, #REGe=ERIC's new
                     ; x-coordinate
 29358 CALL 24880    ; Update ERIC's animatory state and location and update
                     ; the SRB
 29361 LD A,(HL)     ; #REGa=ERIC's animatory state
 29362 POP DE        ; #REGde=ERIC's location before he jumped on the saddle or
                     ; got off the bike
 29363 ADD A,25      ; #REGa=animatory state of the bike standing upright
                     ; (#AS25(#b25 or #b153))
 29365 INC H         ; #REGh=#b211: bike
 29366 CALL 24880    ; Update the bike's animatory state and update the SRB
@nowarn
 29369 LD HL,29194   ; {Place the address of the uninterruptible subcommand
@ssub=LD (54016+17),HL
 29372 LD (54033),HL ; routine at #R29194 into bytes #b17 and #b18 of the
                     ; bike's buffer}
 29375 LD HL,32755   ; #R32755 holds ERIC's main action timer
 29378 LD (HL),5     ; Reset this to 5
 29380 JR 29436      ; Also reset the bike's speed counter (at #R32751) to 5
; Not one of 'left', 'right' and 'up' was pressed.
*29382 CP 94         ; Was 'down' pressed?
 29384 JR NZ,29402   ; Jump if not
@ssub=LD L,32749%256
 29386 LD L,237      ; #REGhl=#R32749 (ERIC's status flags)
 29388 LD (HL),0     ; Reset all bits here, signalling that ERIC has his feet
                     ; back on the ground
@ssub=LD L,32763%256
 29390 LD L,251      ; #REGhl=#R32763 (ERIC's other status flags)
 29392 RES 1,(HL)    ; Reset bit 1 here, signalling that #R32749 is empty
 29394 LD H,210      ; #b210=ERIC
 29396 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 29399 PUSH DE       ; Save ERIC's current location
 29400 JR 29356      ; Jump back to update the animatory state and location of
                     ; ERIC and the bike
; The following section of code is executed on every pass through this routine
; while ERIC is sitting on the saddle (in other words, unless 'up' or 'down'
; was pressed).
*29402 LD HL,32752   ; #R32752 holds the bike's momentum
 29405 DEC (HL)      ; Has the bike run out of momentum?
 29406 JR NZ,29441   ; Jump if not
*29408 LD H,210      ; #b210=ERIC, who will now fall off the bike
 29410 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 29413 PUSH DE       ; Save ERIC's coordinates briefly
 29414 AND 128       ; Keep only the 'direction' bit of ERIC's animatory state
 29416 PUSH AF       ;
 29417 ADD A,4       ; #REGa=#AS4(#b4 or #b132) (ERIC sitting on a chair)
 29419 CALL 24880    ; Update ERIC's animatory state and update the ARB
 29422 POP AF        ; #REGa=#b0 if ERIC's facing left, #b128 if facing right
 29423 POP DE        ; Restore ERIC's coordinates to #REGde
 29424 ADD A,24      ; #REGa=#AS24(#b24 or #b152) (bike lying on the floor)
 29426 LD H,211      ; #b211=bike
 29428 CALL 24880    ; Update the bike's animatory state and update the SRB
 29431 LD HL,32749   ; #R32749 holds ERIC's status flags
 29434 LD (HL),16    ; Set bit 4: ERIC will not land on his feet
@ssub=LD L,32751%256
*29436 LD L,239      ; #REGhl=#R32751 (which holds the bike's speed counter)
 29438 LD (HL),5     ; Reset this to 5
 29440 RET           ;
; The bike still has momentum.
@ssub=LD L,32751%256
*29441 LD L,239      ; #REGhl=#R32751 (which holds the bike's speed counter)
 29443 DEC (HL)      ; Is it time to move the bike forward?
 29444 RET NZ        ; Return if not
 29445 LD (HL),7     ; Reset the bike's speed counter to 7
 29447 LD HL,(53760) ; {#REGa=ERIC's animatory state, #REGe=ERIC's x-coordinate
 29450 LD A,L        ;
 29451 LD E,H        ; }
 29452 CALL 28672    ; Are there any walls, closed doors or ALBERTs in ERIC's
                     ; path?
 29455 JR C,29408    ; {Knock ERIC off the bike if so
 29457 JR Z,29408    ; }
 29459 JP 29262      ; Otherwise move ERIC forward one space, update the SRB,
                     ; and scroll the screen if necessary

; Deal with ERIC when he's standing on the saddle of the bike
;
; Called by the routine at #R63405 when bit 7 at #R32749 is set (by the routine
; at #R29278). Listens for and responds appropriately to keypresses while ERIC
; is standing on the saddle of the bike.
@label=ONSADDLE
c29462 LD HL,32755   ; #R32755 holds ERIC's main action timer
 29465 DEC (HL)      ; Is it time to deal with ERIC yet?
 29466 RET NZ        ; Return if not
 29467 INC (HL)      ; Set ERIC's action timer to 1, ensuring that we pass
                     ; through the following section of code on the next call
                     ; to this routine if no keypress is detected this time
 29468 CALL 29178    ; #REGa=value from the #R58624(keypress offset table)
                     ; corresponding to the key just pressed (if any)
 29471 RET Z         ; Return if no game key was pressed
 29472 LD HL,32755   ; #R32755 holds ERIC's main action timer
 29475 CP 114        ; Was 'jump' pressed?
 29477 JR Z,29517    ; Jump if so
 29479 SET 3,A       ; Ignore the difference between fast (upper case) and slow
                     ; (lower case) keys when ERIC's on the bike
 29481 CP 92         ; Was 'up' pressed?
 29483 JR Z,29517    ; Jump if so
 29485 CP 94         ; Was 'down' pressed?
 29487 RET NZ        ; Return if not
; This entry point is used by the routine at #R29574 when ERIC has just got on
; the bike.
*29488 LD (HL),5     ; Reset ERIC's main action timer at #R32755 to 5
@ssub=LD L,32749%256
 29490 LD L,237      ; #REGhl=#R32749 (ERIC's status flags)
 29492 LD (HL),1     ; Set bit 0: ERIC is riding the bike
 29494 LD H,210      ; #b210=ERIC
 29496 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 29499 INC H         ; #REGh=#b211: bike
 29500 CALL 25012    ; Update the SRB for the bike's current animatory state
                     ; and location
 29503 LD L,1        ; Point #REGhl at byte #b1 of the bike's buffer
 29505 LD (HL),224   ; Set the bike's x-coordinate to 224 (out of sight)
 29507 LD L,18       ; {Remove the address of the routine at #R29194 from bytes
 29509 LD (HL),0     ; #b17 and #b18 of the bike's buffer}
 29511 DEC H         ; #REGh=#b210: ERIC
 29512 SUB 12        ; #REGa=animatory state of ERIC riding the bike
 29514 JP 24880      ; Update ERIC's animatory state and update the SRB
; ERIC has tried to jump off the saddle of the bike. Check whether he has the
; frog and is underneath a cup.
*29517 LD H,210      ; #b210=ERIC
 29519 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 29522 ADD A,2       ; #REGa=#AS2(#b2 or #b130)
 29524 DEC D         ; {Set #REGd to the y-coordinate of the spot above ERIC's
 29525 DEC D         ; hand as he jumps from the saddle}
 29526 CALL 64474    ; Prepare ERIC for his descent from the bike saddle
 29529 LD H,210      ; #b210=ERIC
 29531 XOR A         ;
 29532 LD L,A        ; Point #REGhl at byte #b0 of ERIC's buffer
 29533 BIT 7,(HL)    ; Is ERIC facing left?
 29535 JR Z,29539    ; Jump if so
 29537 LD A,2        ;
*29539 INC L         ; Point #REGhl at byte #b1 of ERIC's buffer
 29540 ADD A,(HL)    ; #REGa=x-coordinate of ERIC's hand
 29541 LD E,A        ; Now #REGde=coordinates of the spot above ERIC's hand
 29542 LD HL,32747   ; #R32747 holds the inventory flags
 29545 BIT 2,(HL)    ; Has ERIC got the frog?
 29547 RET Z         ; Return if not
 29548 CALL 30216    ; Is ERIC's arm directly underneath a cup?
 29551 RET NZ        ; Return if not
 29552 RES 2,(HL)    ; Signal: ERIC no longer has the frog
 29554 LD H,212      ; #b212=frog
 29556 LD A,28       ; #AS28: frog sitting (as on the floor or in a cup)
 29558 DEC E         ; {Set #REGde to the frog's new in-cup coordinates
 29559 LD D,11       ; }
 29561 CALL 24880    ; Update the frog's animatory state and location and
                     ; update the SRB
 29564 JP 62401      ; Print the inventory and make a celebratory sound effect

; Unused
@rsub=!29567
s29567 DEFB 0

; Display the frog in ERIC's inventory
;
; Continues from #R31733. Removes the frog from active participation in the
; game and displays the frog UDG in the inventory.
;
; H #b212 (frog)
@label=FROG2INV
c29568 CALL 29903    ; Remove the uninterruptible subcommand routine address
                     ; from bytes #b17 and #b18 of the frog's buffer and place
                     ; the frog out of sight
 29571 JP 62401      ; Print the inventory and make a frog-catching sound
                     ; effect

; 'M' pressed - mount bike
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'M' or
; 'B' is pressed.
;
; A ERIC's animatory state
; D ERIC's y-coordinate
; E ERIC's x-coordinate
@label=MOUNTBIKE
c29574 AND 128       ; #REGa=#b0 if ERIC's facing left, #b128 if facing right
 29576 ADD A,25      ; #REGa=#AS25(#b25/#b153): bike standing upright
 29578 LD B,A        ; Copy the bike's animatory state to #REGb
@ssub=LD HL,54016+2
 29579 LD HL,54018   ; #REGh=#b211 (bike), #REGl=#b2
 29582 LD A,D        ; #REGa=ERIC's y-coordinate
 29583 CP (HL)       ; Is ERIC on the same floor as the bike?
 29584 RET NZ        ; Return if not
 29585 DEC L         ; #REGl=#b1
 29586 LD A,E        ; #REGa=ERIC's x-coordinate
 29587 CP (HL)       ; Is ERIC at the same x-coordinate as the bike?
 29588 RET NZ        ; Return if not
; ERIC is standing beside the bike. Prepare to place him on the saddle.
 29589 DEC L         ; #REGl=#b0
 29590 LD (HL),B     ; Fill in the animatory state of the bike
 29591 CALL 29012    ; Make a sound effect
 29594 LD HL,32763   ; #R32763 holds ERIC's status flags
 29597 LD (HL),2     ; Set bit 1: examine the secondary status flags at #R32749
 29599 LD A,18       ;
@ssub=LD L,32750%256
 29601 LD L,238      ; #REGhl=#R32750 (value from the #R58624(keypress offset
                     ; table) corresponding to the last key pressed while
                     ; riding the bike)
 29603 LD (HL),A     ; Initialise this to #b18 (which doesn't correspond to any
                     ; key)
 29604 INC L         ; {Initialise the bike's speed counter (at #R32751) to
 29605 LD (HL),A     ; #b18 (matching its initial momentum, set below, so that
                     ; it doesn't move forward before ERIC has started
                     ; pedalling)}
 29606 INC L         ; {Initialise the bike's momentum (at #R32752) to #b18
 29607 LD (HL),A     ; (giving ERIC a decent chance to start pedalling before
                     ; the bike falls over)}
@ssub=LD L,32755%256
 29608 LD L,243      ; #REGhl=#R32755 (ERIC's main action timer)
 29610 JP 29488      ; Place ERIC on the bike

; Print the score, lines total or hi-score (1)
;
; Used by the routines at #R29621 and #R62910.
;
; DE Number/10
; HL Display file address
@label=PRINTNUM
c29613 PUSH HL       ; Save the display file address
 29614 CALL 27572    ; Generate ASCII codes for the digits in the decimal
                     ; rendering of the number in #REGde
 29617 POP DE        ; Get the display file address in #REGde
 29618 JP 27497      ; Print the number on the screen

; Add to the score and print it
;
; Used by the routines at #R23907, #R24028, #R28952, #R29716, #R29896, #R30739,
; #R30786, #R30804 and #R62910.
;
; A Points to add/10
@label=ADDPTS
c29621 PUSH DE       ;
 29622 LD E,A        ; {#REGde=number of points to add (divided by 10)
 29623 LD D,0        ; }
 29625 PUSH HL       ;
 29626 LD HL,(32741) ; {Add points to the score (stored at #R32741)
 29629 ADD HL,DE     ;
 29630 LD (32741),HL ; }
 29633 EX DE,HL      ;
@nowarn
 29634 LD HL,20900   ; #REGhl=display file address for printing the score
; This entry point is used by the routine at #R29643 with #REGhl=#w20932
; (display file address for printing the lines total).
*29637 CALL 29613    ; Print the new score or lines total
 29640 POP HL        ;
 29641 POP DE        ;
 29642 RET           ;

; Add to the lines total and print it
;
; Used by the routines at #R24348, #R29716 and #R62910. Adds to the lines total
; and prints the new total. Also sets MR WACKER on his way to expel ERIC if the
; new total is 10000 lines or more.
;
; A Number of lines to add/10
@label=ADDLINES
c29643 PUSH DE       ;
 29644 PUSH HL       ;
 29645 LD E,A        ; {#REGde=number of lines to add
 29646 LD D,0        ; }
 29648 LD HL,(32743) ; #REGhl=current lines total (divided by 10)
@keep
 29651 LD BC,64536   ; #REGbc=-1000
 29654 ADD HL,BC     ; Does ERIC have less than 10000 lines?
 29655 JR NC,29660   ; Jump if so
 29657 ADD HL,DE     ; Add lines to ERIC's total
 29658 JR 29669      ;
*29660 ADD HL,DE     ; Add lines to ERIC's total
 29661 JR NC,29669   ; Jump if ERIC still has less than 10000 lines
 29663 PUSH HL       ;
 29664 CALL 62770    ; Set MR WACKER on his way to expel ERIC
 29667 AND A         ; Clear the carry flag ready for subtraction
 29668 POP HL        ;
*29669 SBC HL,BC     ; Now #REGhl=new lines total
 29671 LD (32743),HL ; Store the new lines total at #R32743
 29674 EX DE,HL      ; Transfer the new lines total to #REGde
@nowarn
 29675 LD HL,20932   ; #REGhl=display file address for printing the lines total
 29678 JP 29637      ; Print the new lines total

; Open the Science Lab storeroom door if ERIC has the key
;
; Used by the routine at #R28315. Opens the Science Lab storeroom door if ERIC
; is facing it, has the key, and is trying to move forwards.
;
; H #b127
@label=OPENLABRM
@ssub=LD L,32747%256
c29681 LD L,235      ; #REGhl=#R32747 (inventory flags)
 29683 BIT 1,(HL)    ; Has ERIC got the storeroom key?
 29685 RET Z         ; Return if not
 29686 LD B,1        ; 1=open (as opposed to 0=close)
 29688 LD A,4        ; This is the Science Lab storeroom door identifier
 29690 JP 28736      ; Open the storeroom door

; Unused
@rsub=!29693
s29693 DEFS 3

; Calculate appropriate coordinates for a message box
;
; Used by the routines at #R29716, #R29896 and #R62668. Returns with the
; coordinates of the messenger's head in #REGde.
;
; H Messenger's character number (#b200-#b205)
@label=BOXCOORDS
c29696 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 29698 LD E,(HL)     ; #REGe=character's x-coordinate
 29699 INC E         ; #REGe=x-coordinate of the character's head
 29700 DEC L         ; #REGl=#b0
 29701 LD A,(HL)     ; #REGa=character's animatory state
 29702 AND 7         ; Keep only bits 0-2
 29704 CP 6          ; Set the zero flag if the character is sitting on the
                     ; floor
 29706 LD A,0        ; The y-coordinate offset should be 0 if the character is
                     ; standing
 29708 JR NZ,29711   ; Jump if character is standing
 29710 INC A         ; #REGa=1 (one level lower if the character is sitting on
                     ; the floor)
*29711 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 29713 ADD A,(HL)    ; Add the character's y-coordinate and the offset
 29714 LD D,A        ; #REGd=y-coordinate of the character's head
 29715 RET           ;

; Make a teacher give lines
;
; Used by the routines at #R30102, #R32062 and #R61487. Prints the lines
; message (e.g. '100 LINES ERIC') in a message box above the teacher's head,
; and shortly afterwards prints the reprimand message (e.g. 'NO CATAPULTS') in
; the same box.
;
; A Lines recipient's character number (#b206-#b210)
; B Reprimand message number
; H Teacher's character number (#b200-#b204)
@label=GIVELINES
c29716 PUSH AF       ; Save the lines recipient's character number briefly
 29717 CALL 29696    ; Collect in #REGde the coordinates of the teacher's head
 29720 POP AF        ; Restore the lines recipient's character number to #REGa
 29721 ADD A,77      ; #REGa=#R61345(#b27), #R61358(#b28), #R61371(#b29),
                     ; #R61384(#b30) or #R61397(#b31) (message number for the
                     ; lines recipient's name)
 29723 LD (32650),A  ; Place it into #R32650 (the first byte of message
                     ; #R32650(#b5), which is used as a submessage of message
                     ; #R59886(#b13): '[12]0 LINES^[5]')
 29726 SUB 22        ; {Compute the attribute byte to be used for the lines
 29728 RRA           ; message: #b15 (blue background) for BOY WANDER; #b23
 29729 ADD A,A       ; (red background) for ANGELFACE or EINSTEIN; #b31
 29730 ADD A,A       ; (magenta background) for HAYLEY or ERIC
 29731 ADD A,A       ;
 29732 DEC A         ; }
 29733 LD C,A        ; Copy the lines message attribute byte to #REGc
@rsub=!29734-29736
 29734 NOP           ;
 29735 NOP           ;
 29736 NOP           ;
 29737 PUSH BC       ;
 29738 CALL 27276    ; Save the area of screen that will be overwritten by the
                     ; lines message
 29741 POP BC        ;
 29742 RET C         ; Return if the teacher giving lines is off-screen
 29743 CALL 25233    ; #REGa=random number
 29746 AND 14        ; {Set #REGl=10, 20, 30, 40, 50, 60, 70 or 80 (number of
 29748 ADD A,2       ; lines divided by 10)
 29750 LD L,A        ;
 29751 ADD A,A       ;
 29752 ADD A,A       ;
 29753 ADD A,L       ;
 29754 LD L,A        ; }
 29755 LD A,C        ; #REGa=attribute byte for the lines message
 29756 PUSH BC       ;
 29757 CP 15         ; Is the teacher giving lines to BOY WANDER?
 29759 JR Z,29774    ; Jump if so
 29761 CP 31         ;
 29763 LD A,L        ; #REGa=number of lines divided by 10
 29764 JR Z,29771    ; Jump if the teacher is giving lines to ERIC or HAYLEY
 29766 CALL 29621    ; {Add EINSTEIN's or ANGELFACE's lines to the score and
 29769 JR 29774      ; print the score}
*29771 CALL 29643    ; Add lines and print the new lines total
*29774 PUSH DE       ;
 29775 EX DE,HL      ;
 29776 LD D,0        ; #REGde=number of lines divided by 10
 29778 CALL 27572    ; Generate the ASCII codes for the decimal digits of the
                     ; number in #REGde
 29781 POP DE        ; Restore the attribute file address for the top left
                     ; corner of the lines message box to #REGde
 29782 POP BC        ; Restore the lines reprimand number to #REGb. and the
                     ; attribute byte for the lines message to #REGc
 29783 PUSH BC       ; Save them again
 29784 PUSH DE       ;
 29785 LD A,13       ; Message #R59886(#b13): '[12]0 LINES^[5]'
 29787 CALL 27462    ; Print the lines message
; The lines message (e.g. '100 LINES ERIC') has been printed. Now for the
; accompanying sound effect.
 29790 LD A,(58408)  ; #REGa=attribute byte for the lines message
 29793 LD DE,10240   ; Set the duration parameter for the beep
 29796 RRCA          ; {The border colour for the beep will be the same as the
 29797 RRCA          ; PAPER colour of the lines message box
 29798 RRCA          ;
 29799 AND 7         ; }
 29801 PUSH AF       ;
 29802 LD BC,5136    ; #REGb=#b20 (pitch), #REGc=#b16 (no alternating colours)
 29805 CALL 29836    ; Beep
 29808 POP AF        ; #REGa=PAPER colour of the lines message
 29809 POP DE        ; Restore the attribute file address for the top left
                     ; corner of the lines message box to #REGde
 29810 POP BC        ; Restore the lines reprimand number to #REGb. and the
                     ; attribute byte for the lines message to #REGc
; This entry point is used by the routines at #R29896 (with #REGa=#b6,
; #REGb=#R59897(#b14), #REGc=#b70) and #R62668 (with #REGa=#b2,
; #REGb=#R60937(#b98), #REGc=#b50).
*29811 PUSH DE       ;
 29812 PUSH AF       ;
 29813 LD A,B        ; #REGa=#R59897(#b14), #R60937(#b98), or a reprimand
                     ; message number
 29814 CALL 27462    ; Print the message
 29817 POP AF        ; #REGa=border colour to use during the beep
 29818 LD DE,5120    ; Set the duration parameter for the beep
 29821 LD BC,12816   ; #REGb=#b50 (pitch), #REGc=#b16 (no alternating colours)
 29824 CALL 29836    ; Beep
 29827 POP DE        ; Restore the attribute file address for the top left
                     ; corner of the message box to #REGde
 29828 LD HL,58152   ; The part of the screen overwritten by the message box
                     ; was stored in the buffer at #R58152
 29831 JP 27364      ; Restore the area of the screen overwritten by the
                     ; message box

; Unused
@rsub=!29834
s29834 DEFS 2

; Make a sound effect
;
; Used by the routines at #R28952, #R29716, #R29896, #R30804 and #R32433.
;
; A Initial border colour
; B Pitch
; C #b16 + next border colour
; DE Duration
@label=SNDEFFECT
c29836 PUSH HL       ;
 29837 LD L,B        ; Save the pitch parameter in #REGl
*29838 OUT (254),A   ; {Flip the border colour and the state of the speaker
 29840 XOR C         ; }
 29841 LD B,L        ; {This is the pitch timing delay
*29842 DJNZ 29842    ; }
 29844 DEC E         ; {Jump back unless the sound effect is finished
 29845 JR NZ,29838   ;
 29847 DEC D         ;
 29848 JR NZ,29838   ; }
 29850 LD A,1        ; {BORDER 1 (blue) before returning
 29852 OUT (254),A   ; }
 29854 POP HL        ;
 29855 RET           ;

; Check whether any adults were hit by the pellet, water, sherry or conker
;
; Used by the routine at #R29896. Returns with the zero flag set if a character
; was hit, and the stricken character's number in #REGb.
;
; DE Pellet/water/sherry/conker's coordinates
; H Pellet/water/sherry/conker's character number (#b213 or #b214)
@label=ADULTHIT
c29856 LD B,6        ; There are six adult characters
; This entry point is used by the routine at #R30380 with #REGb=5 (only five of
; the adults are pelletable) and #REGh=#b213/#b214 (BOY WANDER's or ERIC's
; pellet).
*29858 LD C,H        ; Save the projectile's character number in #REGc
 29859 LD H,200      ; #b200=MR WACKER
*29861 LD L,2        ; Point #REGhl at byte #b2 of the potential target's
                     ; character buffer
 29863 LD A,D        ; #REGa=projectile's y-coordinate
 29864 CP (HL)       ; Does it match the y-coordinate of the character?
 29865 JR NZ,29889   ; Jump if not
 29867 LD L,0        ;
 29869 LD A,(HL)     ; #REGa=character's animatory state
 29870 AND 135       ; {Is the character sitting on the floor facing left
 29872 CP 6          ; (already struck)?}
 29874 JR Z,29881    ; Jump if so
 29876 DEC L         ; #REGl=-1
 29877 CP 134        ; Is the character sitting on the floor facing right
                     ; (already struck)?
 29879 JR Z,29882    ; Jump if so
*29881 INC L         ;
*29882 LD A,L        ; #REGa=-1 if the character is sitting on the floor facing
                     ; right, 0 if he's standing, or 1 if he's sitting on the
                     ; floor facing left
 29883 LD L,1        ; Byte #b1 of the character's buffer holds his
                     ; x-coordinate
 29885 ADD A,(HL)    ; Now #REGa=x-coordinate of the character's head
 29886 CP E          ; Does it match the x-coordinate of the projectile?
 29887 JR Z,29892    ; Jump if so
*29889 INC H         ; Next potential target
 29890 DJNZ 29861    ; Jump back to consider any remaining characters
*29892 LD B,H        ; #REGb=number of the character who was hit by the
                     ; projectile (if any)
 29893 LD H,C        ; Restore the projectile's character number to #REGh
 29894 RET           ; Return with the zero flag set if a character was hit

; Unused
@rsub=!29895
s29895 DEFB 0

; Control the descent of the water, sherry or conker
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a catapult pellet's buffer by the routine at #R30380 when it
; has hit either the tree or a water/sherry-filled cup, and thus released a
; conker or a drop of water or sherry.
;
; H Falling object's character number (#b213 or #b214)
@label=OBJFALL
c29896 LD L,2        ;
 29898 LD A,(HL)     ; #REGa=y-coordinate of the falling object
 29899 CP 17         ; Has the object hit the bottom floor yet?
 29901 JR NZ,29915   ; Jump if not
; This entry point is used by the routines at #R29568, #R30380, #R57910,
; #R62178, #R63586 and #R64077 to 'kill' a non-human object (i.e. pellet, frog,
; desk lid, stinkbomb cloud, water/sherry fired from pistol).
*29903 LD L,18       ; {Remove the address of this routine from bytes #b17 and
 29905 LD (HL),0     ; #b18 of the object's buffer}
; This entry point is used by the routine at #R31254 to make a mouse disappear
; temporarily.
*29907 CALL 25012    ; Update the SRB for the object's current animatory state
                     ; and location
; This entry point is used by the routine at #R64057 to hide water from the
; water pistol.
*29910 LD L,1        ; {Set the object's x-coordinate to 224 (out of sight)
 29912 LD (HL),224   ; }
 29914 RET           ;
; The falling object has yet to hit the floor. Has it hit anything else on the
; way there?
*29915 CP 13         ; Is the object at the right height to hit someone?
 29917 JR Z,29926    ; Jump if so
*29919 CALL 25012    ; Update the SRB for the object's current animatory state
                     ; and location
 29922 INC D         ; The object will fall one more level
 29923 JP 24880      ; Update the object's location and update the SRB
; The object is at the right height to hit someone. Check if it has.
*29926 LD L,1        ; Point #REGhl at byte #b1 of the object's buffer
 29928 LD E,(HL)     ; #REGe=falling object's x-coordinate
 29929 LD D,17       ; This is the y-coordinate of the bottom floor (the only
                     ; floor on which characters can be hit by a falling
                     ; object)
 29931 CALL 29856    ; Check if any of the six adult characters were hit
 29934 LD L,0        ; Point #REGhl at byte #b0 of the object's buffer
 29936 LD A,(HL)     ; #REGa=animatory state of the falling object
 29937 JR Z,29999    ; Jump if an adult character was hit by the falling object
 29939 CP 55         ; #AS55: Is the falling object a conker?
 29941 JR NZ,29919   ; Jump if not
; The falling object is a conker.
 29943 LD L,2        ; {Set the conker's y-coordinate to 17 (bottom floor) for
 29945 LD (HL),17    ; comparison with that of the potential targets}
; #IF({fix}<3)||Before calling the routine at #R27820 to check whether any of
; the four main kids (besides ERIC) have been hit, #REGd should be set to 206
; (BOY WANDER, the first main kid), and #REGb should be set to 4 (the number of
; kids to check). However, at this point #REGd=#b17 and #REGb=#b206, which
; means that instead of checking the character buffers in pages #b206-#b209, we
; end up checking pages #b17-#b222. In that range, only pages #b183-#b214
; contain character buffers; treating the other pages in RAM as if they
; contained character buffers could lead to data/code corruption. Needless to
; say, this is a #BUG#conkerMD(bug).||
@rfix=>LD D,206      ; #b206=BOY WANDER
@rfix=>LD B,4        ; There are four main kids to check
 29947 CALL 27820    ; Check whether anyone was hit by the conker
 29950 LD L,2        ; {Set the conker's y-coordinate back to 13
 29952 LD (HL),13    ; }
 29954 JR C,29919    ; Jump if nobody was hit by the conker
 29956 LD A,D        ; #REGa=number of the character hit by the conker
 29957 CP 207        ; Was it BOY WANDER (#b206)?
 29959 JR C,29982    ; Jump if so
 29961 CP 209        ;
 29963 LD A,10       ; ERIC gets 100 points for conkering ANGELFACE or EINSTEIN
 29965 JR NC,29982   ; Jump unless ANGELFACE (#b207) or EINSTEIN (#b208) was
                     ; hit
 29967 CALL 29621    ; Add 100 to the score and print it
 29970 PUSH DE       ;
 29971 LD D,40       ; {Make a sound effect with #REGa=#b7 and #REGc=#b18
 29973 LD BC,10258   ; (border alternating white and cyan)
 29976 LD A,7        ;
 29978 CALL 29836    ; }
 29981 POP DE        ;
; This entry point is used by the routine at #R30786.
*29982 PUSH DE       ;
; This entry point is used by the routine at #R30380.
*29983 CALL 29903    ; Terminate the object
 29986 POP DE        ;
; This entry point is used by the routine at #R30739 to knock a character over.
*29987 EX DE,HL      ;
 29988 LD A,H        ; #REGa=number of the character hit by the object or fist
 29989 CP 210        ; Was it ERIC?
 29991 JR NZ,30023   ; Jump if not
; This entry point is used by the routine at #R24328.
*29993 LD A,128      ; {Set bit 7 at #R32763: ERIC has been knocked down
 29995 LD (32763),A  ; }
 29998 RET           ;
; An adult character was hit by the falling object.
*29999 CP 55         ; Is the falling object a conker?
 30001 JR NZ,30034   ; Jump if not
; An adult character has been hit by either a conker or a drop of water or
; sherry.
*30003 LD C,0        ; Point #REGbc at byte #b0 of the character's buffer
 30005 LD A,(BC)     ; #REGa=animatory state of the adult character hit by the
                     ; object
 30006 AND 7         ; {Is the character already sitting on the floor?
 30008 CP 6          ; }
 30010 JP Z,29919    ; Jump if so (the object will continue to fall)
 30013 LD C,18       ; {Is there an uninterruptible subcommand routine address
 30015 LD A,(BC)     ; in bytes #b17 and #b18 of the character's buffer (which
 30016 AND A         ; would prevent the character from being knocked over)?}
 30017 JP NZ,29919   ; Jump if so
 30020 PUSH BC       ;
 30021 JR 29983      ; Terminate the object and knock the character over
; This section of code sets up the uninterruptible subcommand that will control
; the character who has been knocked over until it's time for him to get up.
*30023 LD L,17       ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),30102%256
 30025 LD (HL),150   ; routine at #R30102 into bytes #b17 and #b18 of the
 30027 INC L         ; stricken character's buffer
@ssub=LD (HL),30102/256
 30028 LD (HL),117   ; }
 30030 INC L         ; {Initialise the knockout delay counter in byte #b19 of
 30031 LD (HL),19    ; the character's buffer}
 30033 RET           ;
; An adult character has been hit by a drop of water or sherry.
*30034 LD DE,32512   ;
 30037 CP 31         ; #AS31: Is the falling object a drop of water?
 30039 JR Z,30043    ; Jump if so
 30041 LD E,4        ;
*30043 LD A,B        ; #REGa=number of the character who was hit by the drop of
                     ; water/sherry
 30044 CP 204        ; Is the stricken character one of the male teachers?
 30046 JR NC,30003   ; Jump if not
 30048 SUB 36        ; {Point #REGde at the relevant combination letter or
 30050 ADD A,E       ; number in one of the tables at #R32676 and #R32680
 30051 LD E,A        ; }
 30052 EX DE,HL      ; (#REGhl)=combination letter/number held by the teacher
                     ; just knocked down
 30053 BIT 7,(HL)    ; Has ERIC already discovered this one?
 30055 JR NZ,30066   ; Jump if so
 30057 SET 7,(HL)    ; Signal: ERIC has discovered this combination
                     ; letter/number
 30059 PUSH BC       ;
 30060 LD A,20       ; {Add 200 to the score and print it
 30062 CALL 29621    ; }
 30065 POP BC        ;
*30066 LD A,(HL)     ; {#REGa=character code of the combination number/letter
 30067 AND 127       ; just revealed}
 30069 LD (32650),A  ; Store this in the first byte of message #R32650(#b5),
                     ; which is used as a submessage of message #R59897(#b14):
                     ; '[5]^ '
 30072 PUSH DE       ;
 30073 PUSH BC       ;
 30074 LD H,B        ; #REGh=character number of the teacher just struck
                     ; (#b200-#b203)
 30075 CALL 29696    ; Get the coordinates of this teacher's head
 30078 CALL 27276    ; Save the area of the screen that will be overwritten by
                     ; the letter/number message box
 30081 JR C,30091    ; Jump if the teacher is off-screen
 30083 LD BC,3654    ; {Print the letter/number message box (message number
 30086 LD A,6        ; #REGb=#R59897(#b14)) and make a sound effect
 30088 CALL 29811    ; }
*30091 POP BC        ; Restore the stricken character's number to #REGb
 30092 POP HL        ; Restore the falling object's character number to #REGh
 30093 JP 30003      ; Terminate the falling object and knock the character
                     ; over

; Unused
@rsub=!30096
s30096 DEFS 6

; Deal with a character who has been knocked over
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of the stricken character's buffer by the routine at #R29896.
; It knocks the character to the floor, makes him give lines to any nearby kids
; (if he's a teacher), and then makes him get up.
;
; H Character number (#b183-#b209)
@label=KNOCKED
c30102 LD L,19       ; Byte #b19 of the character's buffer holds the knockout
                     ; delay counter
 30104 DEC (HL)      ; Has the character already got up?
 30105 JP Z,25492    ; Terminate this uninterruptible subcommand if so
 30108 LD A,(HL)     ; #REGa=knockout delay counter
 30109 DEC A         ; Is it time for the character to get up yet?
 30110 JR NZ,30121   ; Jump if not
; This entry point is used by the routine at #R63801.
*30112 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state
; This entry point is used by the routine at #R28978.
*30115 LD L,20       ; Byte #b20 of the character's buffer holds the
                     ; pre-knockout animatory state saved earlier
 30117 LD A,(HL)     ; Pick this up in #REGa
 30118 JP 24880      ; Update the character's animatory state and update the
                     ; SRB
; It's not time for the character to get up yet.
*30121 DEC A         ; {Jump forward unless the knockout delay counter has
 30122 JR NZ,30137   ; reached 2}
 30124 LD A,H        ; #REGa=number of the stricken character
 30125 CP 205        ; Is it ALBERT?
 30127 RET NZ        ; Return if not
@ssub=LD A,(32739+1)
 30128 LD A,(32740)  ; Pick up the MSB of the lesson clock
 30131 AND A         ; Is the lesson nearly over?
 30132 RET Z         ; Return if so
 30133 LD L,19       ; {Set the knockout delay counter to 3 so that ALBERT will
 30135 INC (HL)      ; not get up until the lesson's almost over}
 30136 RET           ;
; The knockout delay counter has not reached 2 yet. Is it time to knock the
; character down?
*30137 CP 15         ; Is it time for the character to fall over?
 30139 JR NZ,30180   ; Jump if not
 30141 LD A,H        ; #REGa=number of the stricken character
@ssub=LD DE,32739+1
 30142 LD DE,32740   ; Point #REGde at the MSB of the lesson clock
 30145 CP 205        ; Was ALBERT struck?
 30147 JR NZ,30155   ; Jump if not
 30149 LD A,(DE)     ; {Add #b12 to the MSB of the lesson clock if ALBERT was
 30150 ADD A,12      ; knocked down, thus giving ERIC some extra time to work
 30152 LD (DE),A     ; with}
 30153 JR 30167      ; Knock ALBERT down
*30155 CP 209        ; Was HAYLEY struck?
 30157 JR NZ,30167   ; Jump if not
@ssub=LD E,32738%256
 30159 LD E,226      ; #REGde=#R32738 (kiss counter)
 30161 LD A,(DE)     ; Pick this up in #REGa
 30162 AND A         ; Are there any kisses left?
 30163 JR Z,30167    ; Jump if not
 30165 DEC A         ; {Otherwise decrease the kiss counter by 1
 30166 LD (DE),A     ; }
; Knock the character down.
*30167 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state
 30170 LD L,20       ; {Store the character's current animatory state in byte
 30172 LD (HL),A     ; #b20 of the buffer for retrieval later (when the
                     ; character gets up)}
 30173 AND 248       ; {#REGa=animatory state of the character sitting or lying
 30175 ADD A,6       ; on the floor}
 30177 JP 24880      ; Update the character's animatory state and update the
                     ; SRB
; It's not time to knock the character down.
*30180 CP 8          ; Is it time for a felled teacher to give lines?
 30182 RET NZ        ; Return if not
 30183 LD A,H        ; #REGa=number of the stricken character
 30184 CP 200        ; {Return if it's not a teacher
 30186 RET C         ;
 30187 CP 205        ;
 30189 RET NC        ; }
 30190 PUSH HL       ;
 30191 CALL 28029    ; Find the main kid who is closest to the teacher and
                     ; within lines-giving range (if any)
 30194 POP HL        ;
 30195 AND A         ; Is there a main kid close enough to the felled teacher?
 30196 RET Z         ; Return if not
 30197 LD B,15       ; Message #R59905(#b15): NOW DON'T DO IT AGAIN
 30199 JP 29716      ; Give lines to the nearest main kid

; Unused
@rsub=!30202
s30202 DEFS 3

; Check whether a pellet has hit a cup
;
; Used by routine at #R30229. Returns with the zero flag set if the pellet is
; about to hit a cup.
;
; H Pellet's character number (#b213 or #b214)
@label=CHKHITCUP
c30205 LD L,1        ; Point #REGhl at byte #b1 of the pellet's buffer
 30207 LD E,(HL)     ; #REGe=pellet's x-coordinate
 30208 INC L         ; #REGl=#b2
 30209 LD D,(HL)     ; #REGd=pellet's y-coordinate
 30210 INC E         ; {Adjust the coordinates for comparison with those of the
 30211 INC D         ; cup}
 30212 LD A,D        ; #REGa=pellet's (adjusted) y-coordinate
 30213 CP 14         ; All the cups have a y-coordinate of 14
 30215 RET NZ        ; Return with the zero flag reset if the pellet's not at
                     ; the right height to hit a cup
; This entry point is used by the routine at #R29462 with #REGe holding the
; x-coordinate of ERIC's hand as he jumps off the saddle of the bike.
*30216 LD A,E        ; #REGa=x-coordinate of the pellet or ERIC's hand
; This entry point is used by the routine at #R64077 with #REGa holding the
; x-coordinate of the stream of water or sherry fired from the waterpistol.
*30217 CP 25         ; Has the leftmost cup on the shelf in the boys' skool
                     ; been hit?
 30219 RET Z         ; Return with the zero flag set if so
 30220 CP 27         ; Has the middle cup on the shelf in the boys' skool been
                     ; hit?
 30222 RET Z         ; Return with the zero flag set if so
 30223 CP 30         ; Has the rightmost cup on the shelf in the boys' skool
                     ; been hit?
 30225 RET Z         ; Return with the zero flag set if so
 30226 CP 186        ; Has the cup on the shelf in the girls' skool been hit?
 30228 RET           ; Return with the zero flag set if so

; Check whether a pellet has hit a cup containing water, sherry or the frog
;
; Used by the routine at #R30380. Returns with the zero flag set if the pellet
; hit a water- or sherry-filled cup. Otherwise it returns with the zero flag
; reset, but releases the frog if the pellet hit the cup containing it.
;
; H Pellet's character number (#b213 or #b214)
@label=CHKCUPFULL
c30229 CALL 30205    ; Has the pellet hit a cup?
 30232 RET NZ        ; Return with the zero flag reset if not
 30233 LD A,(32747)  ; Pick up the inventory flags from #R32747
 30236 BIT 1,A       ; Has ERIC got the Science Lab storeroom key?
 30238 JR Z,30262    ; Jump if not
@ssub=LD A,(54272+1)
 30240 LD A,(54273)  ; #REGa=frog's x-coordinate
 30243 INC A         ; Adjust it for comparison with that of the cup that was
                     ; hit
 30244 CP E          ; Does the frog's x-coordinate match that of the cup?
 30245 JR NZ,30262   ; Jump if not
@ssub=LD A,(54272+2)
 30247 LD A,(54274)  ; #REGa=frog's y-coordinate
 30250 CP 11         ; Is the frog in the cup?
 30252 JR NZ,30262   ; Jump if not
 30254 PUSH HL       ;
@nowarn
 30255 LD HL,30804   ; {Place the address of the uninterruptible subcommand
@ssub=LD (54272+17),HL
 30258 LD (54289),HL ; routine at #R30804 into bytes #b17 and #b18 of the
                     ; frog's buffer, thus releasing the frog}
 30261 POP HL        ;
*30262 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 30265 LD B,A        ; {Return if the cup is off-screen to the left
 30266 LD A,E        ;
 30267 SUB B         ;
 30268 RET C         ; }
 30269 CP 32         ; {Return if the cup is off-screen to the right
 30271 RET NC        ; }
 30272 ADD A,192     ; {Point #REGde at the attribute file byte for the cup
 30274 LD E,A        ;
 30275 LD D,89       ; }
 30277 LD A,(DE)     ; Pick up the attribute byte of the cup
 30278 CP 40         ; Does the cup contain water (PAPER 5)?
 30280 JR NZ,30285   ; Jump if not
 30282 LD A,31       ; #AS31: Drop of water
 30284 RET           ; Return with the zero flag set
*30285 CP 88         ; Does the cup contain sherry (BRIGHT 1: PAPER 3)?
 30287 RET NZ        ; Return if not
 30288 LD A,159      ; #AS159: Drop of sherry
 30290 RET           ; Return with the zero flag set

; Unused
@rsub=!30291
s30291 DEFB 0

; Check for walls, doors and windows in the path of a mouse, frog or pellet
;
; Used by the routines at #R30380, #R30804 and #R31254. Returns with the carry
; flag set if there is a wall, closed door or closed window blocking the path
; of the mouse, frog or pellet
;
; DE Coordinates of the spot in front of the mouse/frog/pellet
@label=CHKOBJPATH
c30292 PUSH HL       ;
 30293 LD HL,32756   ; #R32756 contains the doors flags
 30296 LD A,E        ; #REGa=x-coordinate of the point in front of the
                     ; mouse/frog/pellet
 30297 CP 190        ; This is the x-coordinate of the far wall of the girls'
                     ; skool
 30299 JR NC,30335   ; Jump if the mouse/frog/pellet is facing this wall
 30301 LD A,D        ; #REGa=y-coordinate of the mouse/frog/pellet
 30302 CP 5          ; Is the mouse/frog/pellet on the top floor (or just below
                     ; it)?
 30304 JR NC,30338   ; Jump if not
; The mouse/frog/pellet is on the top floor.
 30306 LD A,E        ; #REGa=x-coordinate of the point in front of the
                     ; mouse/frog/pellet
 30307 CP 159        ; This is the x-coordinate of the left wall of the girls'
                     ; skool
 30309 JR Z,30335    ; Jump if the mouse/frog/pellet is facing this wall
 30311 LD D,1        ; Set bit 0: left study door
 30313 CP 72         ; This is the x-coordinate of the left study door
 30315 JR Z,30331    ; Jump if the mouse/frog/pellet is facing this door
 30317 INC D         ; Set bit 1: right study door
 30318 CP 84         ; This is the x-coordinate of the right study door
 30320 JR Z,30331    ; Jump if the mouse/frog/pellet is facing this door
 30322 LD D,64       ; Set bit 6: top-floor window
 30324 CP 92         ; This is the x-coordinate of the top-floor window
 30326 JR Z,30331    ; Jump if the mouse/frog/pellet is facing this window
 30328 AND A         ; Clear the carry flag: no obstacles ahead
*30329 POP HL        ; Restore the character number of the mouse/frog/pellet to
                     ; #REGh
 30330 RET           ; Return with the carry flag reset
*30331 LD A,D        ; #REGa holds the identifier of the door or window in
                     ; front of the mouse/frog/pellet
 30332 AND (HL)      ; Is this door/window open?
 30333 JR NZ,30329   ; Jump if so
*30335 SCF           ; Set the carry flag: no admittance
 30336 POP HL        ; Restore the character number of the mouse/frog/pellet to
                     ; #REGh
 30337 RET           ; Return with the carry flag set
*30338 CP 12         ;
 30340 LD A,E        ;
 30341 JR NC,30366   ; Jump if the mouse/frog/pellet is on the bottom floor (or
                     ; just above it)
; The mouse/frog/pellet is on the middle floor.
 30343 CP 159        ; This is the x-coordinate of the left wall of the girls'
                     ; skool
 30345 JR Z,30335    ; Jump if the mouse/frog/pellet is facing this wall
 30347 CP 62         ; This is the x-coordinate of the far wall of the Science
                     ; Lab storeroom
 30349 JR Z,30335    ; Jump if the mouse/frog/pellet is facing this wall
 30351 CP 53         ; This is the x-coordinate of the Science Lab storeroom
                     ; door
 30353 LD D,4        ; Set bit 2: Science Lab storeroom door
 30355 JR Z,30331    ; Jump if the mouse/frog/pellet is facing this door
 30357 LD D,128      ; Set bit 7: middle-floor window
 30359 CP 94         ; This is the x-coordinate of the middle-floor window
 30361 JR Z,30331    ; Jump if the mouse/frog/pellet is facing this window
*30363 AND A         ; Clear the carry flag: no obstacles ahead
 30364 POP HL        ; Restore the character number of the mouse/frog/pellet to
                     ; #REGh
 30365 RET           ; Return with the carry flag reset
; The mouse/frog/pellet is on the bottom floor.
*30366 LD D,8        ; Set bit 3: boys' skool door
 30368 CP 94         ; This is the x-coordinate of the boys' skool door
 30370 JR Z,30331    ; Jump if mouse/frog/pellet is facing this door
 30372 LD D,16       ; Set bit 4: skool gate
 30374 CP 133        ; This is the x-coordinate of the skool gate
 30376 JR Z,30331    ; Jump if the mouse/frog/pellet is facing this
 30378 JR 30363      ; Otherwise it's all clear

; Control the flight of a catapult pellet
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a catapult pellet's buffer by the routine at #R30555. It
; controls the pellet from the beginning of its flight to the end, including
; any collisions with cups, trees, other characters, and teachers' heads.
;
; H #b213 (BOY WANDER's pellet) or #b214 (ERIC's pellet)
@label=PELLET
c30380 LD L,19       ; Byte #b19 of the pellet's buffer holds the distance left
                     ; to travel
 30382 DEC (HL)      ; Has the pellet finished travelling?
 30383 JP Z,29903    ; Terminate the pellet if so
 30386 LD A,(HL)     ; #REGa=distance left to travel
 30387 CP 5          ; Does the pellet have fewer than 5 spaces left to travel?
 30389 JR C,30413    ; Jump if so (to check for hittable obstacles)
; The pellet is merrily wending its way through the air. It's not ready to hit
; anything vulnerable yet, or has simply failed to do so. The only thing that
; can stop it at the moment is a wall, door or window.
*30391 LD L,0        ; Point #REGhl at byte #b0 of the pellet's buffer
 30393 LD A,(HL)     ; #REGa=pellet's animatory state
 30394 RLCA          ; {Set the carry flag if the pellet is travelling to the
 30395 CCF           ; left}
 30396 SBC A,A       ; {#REGa=-1 if the pellet is travelling leftwards, 1 if
 30397 ADD A,A       ; rightwards
 30398 INC A         ; }
 30399 INC L         ; {Add the pellet's x-coordinate to obtain that of the
 30400 ADD A,(HL)    ; location directly in front of the pellet}
 30401 LD E,A        ; Store this in #REGe
 30402 INC L         ; #REGl=#b2
 30403 LD D,(HL)     ; #REGd=pellet's y-coordinate
 30404 CALL 30292    ; Check for closed doors, windows and walls in the
                     ; pellet's path
 30407 JP C,29903    ; Terminate the pellet if there is one
 30410 JP 29264      ; Otherwise just advance the pellet one space
; The pellet is ready to hit a vulnerable character, cup or tree.
*30413 CALL 30229    ; Has the pellet hit a water- or sherry-filled cup?
 30416 JR NZ,30435   ; Jump if not
; The pellet has hit a water- or sherry-filled cup, or a conker in the tree.
; The #REGa register holds the animatory state of the object (drop of
; water/sherry, or conker) that the pellet will become.
*30418 LD L,18       ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),29896/256
 30420 LD (HL),116   ; routine at #R29896 into bytes #b17 and #b18 of the
 30422 DEC L         ; catapult pellet's buffer
@ssub=LD (HL),29896%256
 30423 LD (HL),200   ; }
 30425 PUSH AF       ; Save the new animatory state of the transmuted pellet
 30426 CALL 25012    ; Update the SRB for the pellet's current location
 30429 POP AF        ; Restore the transmuted pellet's animatory state to #REGa
 30430 DEC D         ; {The projectile will ascend two levels
 30431 DEC D         ; }
 30432 JP 24880      ; Update the projectile's location and update the SRB
; The pellet hasn't hit a water- or sherry-filled cup. Has it hit a teacher?
*30435 LD L,1        ; Point #REGhl at byte #b1 of the pellet's buffer
 30437 LD E,(HL)     ; #REGe=pellet's x-coordinate
 30438 INC L         ; #REGl=#b2
 30439 LD D,(HL)     ; #REGd=pellet's y-coordinate
 30440 LD B,5        ; There are 5 teachers who can be hit by a pellet
 30442 CALL 29858    ; Has the pellet hit any of these teachers?
 30445 JR NZ,30491   ; Jump if not
 30447 LD C,0        ; Point #REGbc at byte #b0 of the stricken teacher's
                     ; buffer
 30449 LD A,(BC)     ; #REGa=animatory state of this teacher
 30450 AND 7         ; {Is the teacher already sitting on the floor?
 30452 CP 6          ; }
 30454 JR NZ,30482   ; Jump if not
 30456 LD L,19       ; {Place 6 into byte #b19 of the pellet's buffer (the
 30458 LD (HL),A     ; distance the pellet will travel after bouncing off the
                     ; teacher's head)}
; This section of code controls the pellet's motion on its ascent from the
; teacher's head.
*30459 LD L,19       ; Byte #b19 of the pellet's buffer holds the distance left
                     ; to travel
 30461 DEC (HL)      ; Decrement this
 30462 JP Z,29903    ; Terminate the pellet if its journey is over
 30465 CALL 30229    ; Has the pellet hit a water- or sherry-filled cup?
 30468 JR Z,30418    ; Jump if so
 30470 CALL 25012    ; Update the SRB for the pellet's current location
 30473 DEC D         ; Has the pellet hit the ceiling on the top floor?
@bfix=|JP M,29903    ; Terminate the pellet if so
 30474 JR NZ,30477   ; Jump if not (having raised the pellet one level)
 30476 INC D         ; #REGd=1; this makes the pellet hover just below the
                     ; ceiling on the top floor before disappearing, which is a
                     ; #BUG#pelletHover(bug)
*30477 CALL 30534    ; Replace the address of this routine in bytes #b17 and
                     ; #b18 of the pellet's buffer with #R30480 (the address of
                     ; the next instruction)
@label=*
*30480 JR 30459      ;
; The pellet has hit a teacher who's standing up.
*30482 LD C,18       ; Point #REGbc at byte #b18 of the teacher's buffer
 30484 LD A,(BC)     ; #REGa=MSB of a routine address, or 0
 30485 PUSH BC       ;
 30486 AND A         ; Is there an uninterruptible subcommand routine address
                     ; in bytes #b17 and #b18 of the teacher's buffer?
 30487 JP Z,29983    ; Jump if not (this teacher can be knocked over)
 30490 POP BC        ;
; The pellet hasn't hit any liquid-containing cups or vulnerable teachers. Has
; it hit any kids?
*30491 LD D,206      ; #b206=BOY WANDER
 30493 LD B,5        ; There are 5 kids who can be knocked over
 30495 CALL 27820    ; Has the pellet hit any of them?
 30498 JP NC,30786   ; Knock them down if so
; The pellet hasn't hit any liquid-containing cups, teachers or kids. Has it
; hit a conker in the tree?
 30501 LD L,19       ; Byte #b19 of the pellet's buffer holds the distance left
                     ; to travel
 30503 LD A,(HL)     ; Pick this up in #REGa
 30504 DEC A         ; Is there only one space left to travel?
 30505 JP Z,30391    ; Jump if so
 30508 LD L,2        ; Point #REGhl at byte #b2 of the pellet's buffer
 30510 LD A,(HL)     ; #REGa=pellet's y-coordinate
 30511 CP 4          ; Was the pellet fired on the top floor?
 30513 JR NC,30524   ; Jump if not
 30515 DEC L         ; #REGl=#b1
 30516 LD A,(HL)     ; #REGa=pellet's x-coordinate
 30517 CP 128        ; {Jump if the pellet is to the right of the tree (it was
 30519 JR NC,30524   ; fired in the girls' skool)}
 30521 CP 96         ; {Set the carry flag if #REGa>=96 (i.e. the pellet is in
 30523 CCF           ; the tree)}
*30524 JP NC,30391   ; Jump unless the pellet will knock a conker out of the
                     ; tree
 30527 LD A,55       ; #AS55: animatory state of a conker
 30529 JP 30418      ; Transmute the pellet into a conker

; Unused
@rsub=!30532
s30532 DEFS 2

; Initialise an uninterruptible subcommand
;
; Used by the routines at #R24328, #R27904, #R30380, #R30555, #R30643, #R30739,
; #R30804, #R62178, #R63586, #R63801, #R63915 and #R64077 to place the address
; of the instruction following #S/CALL/ #R30534 into bytes #b17 and #b18 of the
; character's buffer. Thus that address becomes the address of the character's
; current uninterruptible subcommand routine.
;
; A Character's new animatory state
; DE Character's new coordinates
; H Character number (#b183-#b214)
@label=SUBCMD
c30534 POP BC        ; Get the return address in #REGbc
 30535 LD L,17       ; {Place it into bytes #b17 and #b18 of the character's
 30537 LD (HL),C     ; buffer
 30538 INC L         ;
 30539 LD (HL),B     ; }
 30540 JP 24880      ; Update the character's animatory state and location and
                     ; update the SRB

; Check whether a character is on the top, middle or bottom floor
;
; Used by the routines at #R30555, #R30706, #R57893, #R64077 and #R64416.
; Returns with the zero flag set if and only if the character is exactly on the
; top, middle or bottom floor.
;
; H Character number (#b206, #b207, #b210, #b214)
@label=ONTMBFLOOR
c30543 LD L,2        ; Byte #b2 of the character's buffer holds his
                     ; y-coordinate
 30545 LD A,(HL)     ; Pick this up in #REGa
 30546 CP 3          ; Is the character on the top floor?
 30548 RET Z         ; Return with the zero flag set if so
 30549 CP 10         ; Is the character on the middle floor?
 30551 RET Z         ; Return with the zero flag set if so
 30552 CP 17         ; Is the character on the bottom floor?
 30554 RET           ; Return with the zero flag set if so

; Make BOY WANDER fire his catapult now and then
;
; The address of this continual subcommand routine is placed into bytes #b23
; and #b24 of BOY WANDER's buffer by command lists #R58768(#b32), #R59488(#b46)
; and #R59519(#b50), and is also used by the routine at #R63492. It decides
; whether BOY WANDER should let rip with a pellet, and gets the catapult-firing
; action under way if so.
;
; H #b206 (BOY WANDER)
@label=CATTY
@ssub=LD A,(54528+18)
c30555 LD A,(54546)  ; Pick up byte #b18 of buffer #b213 (BOY WANDER's pellet)
 30558 AND A         ; Is there a uninterruptible subcommand routine address in
                     ; bytes #b17 and #b18 of the buffer?
 30559 RET NZ        ; Return if so (this buffer is in use)
 30560 LD L,A        ; #REGl=#b0
 30561 BIT 0,(HL)    ; Is BOY WANDER midstride?
 30563 RET NZ        ; Return if so
 30564 INC L         ; #REGl=#b1
 30565 LD A,(HL)     ; #REGa=BOY WANDER's x-coordinate
 30566 AND 3         ; {Return unless BOY WANDER's x-coordinate is divisible by
 30568 RET NZ        ; 4}
 30569 CALL 30543    ; Is BOY WANDER exactly on the top, middle, or bottom
                     ; floor?
 30572 RET NZ        ; Return if not
 30573 CALL 25233    ; #REGa=random number
 30576 RRCA          ; {Return half the time
 30577 RET NC        ; }
 30578 CALL 28004    ; Can any adults see BOY WANDER?
 30581 RET C         ; Return if so
 30582 POP BC        ; Drop the return address (#R25431)
 30583 POP BC        ; Pop the value of #REGhl that was pushed on to the stack
                     ; by the routine at #R25296 before coming here; #S/RET/
                     ; will now take us back either to #R25296 to move the next
                     ; character, or to the main loop
 30584 CALL 25012    ; Update the SRB for BOY WANDER's current animatory state
                     ; and location
 30587 LD L,20       ; {Store BOY WANDER's current animatory state in byte #b20
 30589 LD (HL),A     ; of his buffer for the time being}
 30590 AND 240       ;
 30592 ADD A,10      ; #REGa=#AS26(#b26 or #b154): BOY WANDER raising his arm
                     ; to fire
 30594 CALL 30534    ; Update BOY WANDER's animatory state and hand over to
                     ; #R30597 (below)
@label=*
*30597 CALL 25012    ; Update the SRB for BOY WANDER's current animatory state
 30600 INC A         ; #REGa=#AS27(#b27 or #b155): BOY WANDER firing the
                     ; catapult
 30601 CALL 30534    ; Update BOY WANDER's animatory state and hand over to
                     ; #R30604 (below)
@label=*
*30604 LD L,17       ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),30643%256
@rsub=LD (HL),30643%256
@rsub=                  ; WANDER's buffer
@rsub=INC L
@rsub=LD (HL),30643/256 ; }
 30606 LD (HL),179   ; routine at #R30643 into bytes #b17 and #b18 of BOY
                     ; WANDER's buffer}
@ssub=LD A,(54528+18)
 30608 LD A,(54546)  ; Pick up byte #b18 of buffer #b213 (BOY WANDER's pellet)
 30611 AND A         ; Is this buffer already being used?
 30612 RET NZ        ; Return if so
 30613 LD B,213      ; Use buffer #b213 for BOY WANDER's catapult pellet
; This entry point is used by the routine at #R63861 with #REGh=#b210 (ERIC)
; and #REGb=#b214 (ERIC's pellet).
*30615 LD L,0        ; Point #REGhl at byte #b0 of the shooter's character
                     ; buffer
 30617 LD A,(HL)     ; #REGa=shooter's animatory state
 30618 AND 128       ; #REGa=#b128 if the pellet will travel right, #b0 if left
 30620 ADD A,79      ; #REGa=#AS79(#b79/#b207): catapult pellet travelling
                     ; left/right
 30622 INC L         ; {Collect the initial coordinates of the pellet from the
 30623 LD E,(HL)     ; shooter's buffer into #REGde
 30624 INC L         ;
 30625 LD D,(HL)     ; }
 30626 LD H,B        ; #REGh=buffer to be used for the pellet (#b213 if it's
                     ; BOY WANDER's, #b214 if it's ERIC's)
 30627 LD (HL),D     ; {Fill in the initial coordinates and animatory state of
 30628 DEC L         ; the pellet
 30629 LD (HL),E     ;
 30630 DEC L         ;
 30631 LD (HL),A     ; }
 30632 LD L,17       ; {Place the address of the pellet-controlling
@ssub=LD (HL),30380%256
 30634 LD (HL),172   ; uninterruptible subcommand routine at #R30380 into bytes
 30636 INC L         ; #b17 and #b18 of the pellet's buffer
@ssub=LD (HL),30380/256
 30637 LD (HL),118   ; }
 30639 INC L         ; #REGl=#b19
 30640 LD (HL),13    ; The pellet will travel 13 spaces
 30642 RET           ;

; Deal with BOY WANDER when he is firing
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of BOY WANDER's buffer by the routine at #R30555 just after BOY
; WANDER has raised his catapult and fired. It controls BOY WANDER while he is
; lowering the catapult.
;
; H #b206 (BOY WANDER)
@label=BWFIRING
c30643 CALL 25012    ; Update the SRB for BOY WANDER's current animatory state
 30646 DEC A         ; #REGa=#AS26(#b26 or #b154): BOY WANDER lowering his arm
; This entry point is used by the routine at #R30739 with #REGh=#b207
; (ANGELFACE) or #REGh=#b210 (ERIC).
*30647 CALL 30534    ; Update the character's animatory state and return to
                     ; #R30650 (below) next time if we're dealing with BOY
                     ; WANDER or ANGELFACE
; This entry point is used by the routine at #R24328 with #REGh=#b209 (HAYLEY).
*30650 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
; This entry point is used by the routine at #R24348 with #REGh=#b209 (HAYLEY).
*30653 LD L,20       ; Byte #b20 of the character's buffer holds the animatory
                     ; state of the character that was saved before this action
                     ; (firing/hitting/kissing) started
 30655 LD A,(HL)     ; Pick this up in #REGa so it can be restored
 30656 CALL 30534    ; Update the character's animatory state and return to
                     ; #R30659 (below) next time
@label=*
*30659 JP 25492      ; Terminate this uninterruptible subcommand

; Unused
@rsub=!30662
s30662 DEFS 2

; Check whether any characters were or can be punched by ERIC or ANGELFACE
;
; Used by the routines at #R30706 and #R30739. On entry, #REGb holds 3 when
; checking whether it's worth ANGELFACE raising his fist (#R30706), or 2 when
; ERIC or ANGELFACE has already raised his fist (#R30739). Returns with the
; carry flag reset if anyone was hit or is within hitting range, and #REGd
; holding that unfortunate character's number.
;
; B 2 or 3
; H #b207 (ANGELFACE) or #b210 (ERIC)
@label=VICTIM
c30664 LD L,0        ; Point #REGhl at byte #b0 of the punching character's
                     ; buffer
 30666 BIT 7,(HL)    ; Set the zero flag if the character is facing left
 30668 LD L,1        ;
 30670 LD C,(HL)     ; #REGc=punching character's x-coordinate
 30671 PUSH BC       ; Save this x-coordinate for now
 30672 LD A,B        ; #REGa=2 (fist already raised) or 3
 30673 JR NZ,30677   ; Jump if the punching character is facing right
 30675 NEG           ;
*30677 ADD A,(HL)    ; #REGa=x-coordinate of the spot 2 or 3 spaces in front of
                     ; the punching character
 30678 LD (HL),A     ; Set this as the character's x-coordinate temporarily
 30679 DEC L         ; #REGl=#b0
 30680 LD A,(HL)     ; #REGa=punching character's animatory state
 30681 CPL           ; {#REGc=#b0 if the character's facing right, #b128 if
 30682 AND 128       ; left
 30684 LD C,A        ; }
 30685 LD D,206      ; #b206=BOY WANDER (first main kid)
 30687 LD B,5        ; There are 5 main kids
 30689 CALL 27804    ; Were any of them hit?
 30692 JR NC,30701   ; Jump if so
 30694 LD D,183      ; #b183=little girl no. 1
 30696 LD B,17       ; There are 17 little kids (10 boys, 7 girls)
 30698 CALL 27804    ; Reset the carry flag if any of them were hit
*30701 POP BC        ; {Restore the punching character's x-coordinate
 30702 LD L,1        ;
 30704 LD (HL),C     ; }
 30705 RET           ; Return with the carry flag reset if someone was hit or
                     ; found within hitting range, and #REGd holding that
                     ; character's number

; Make ANGELFACE hit now and then
;
; Used by the routines at #R63455 and #R63492. Decides whether ANGELFACE should
; throw a punch, and gets the punching action under way if so.
;
; H #b207 (ANGELFACE)
@label=VIOLENT
c30706 LD L,0        ; Byte #b0 of ANGELFACE's buffer holds his animatory state
 30708 BIT 0,(HL)    ; Is ANGELFACE midstride?
 30710 RET NZ        ; Return if so
 30711 CALL 30543    ; Is ANGELFACE exactly on the top, middle or bottom floor?
 30714 RET NZ        ; Return if not
 30715 CALL 25233    ; #REGa=random number
 30718 RLCA          ; {Return 50% of the time
 30719 RET NC        ; }
 30720 CALL 28004    ; Can any adults see ANGELFACE?
 30723 RET C         ; Return if so
 30724 LD B,3        ; {Is there anyone 3 spaces in front of ANGELFACE and
 30726 CALL 30664    ; facing him?}
 30729 RET C         ; Return if not
 30730 POP BC        ; Drop the return address (#R25431)
 30731 POP BC        ; Pop the value of #REGhl that was pushed on to the stack
                     ; by the routine at #R25296 before coming here; #S/RET/
                     ; will now take us back either to #R25296 to move the next
                     ; character, or to the main loop
@nowarn
 30732 LD HL,30739   ; {Place the address of the uninterruptible subcommand
@ssub=LD (52992+17),HL
 30735 LD (53009),HL ; routine at #R30739 into bytes #b17 and #b18 of
                     ; ANGELFACE's buffer}
 30738 RET           ;

; Deal with ANGELFACE when he is hitting
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of ANGELFACE's buffer by the routine at #R30706. It controls
; ANGELFACE from the beginning to the end of the swing, and knocks over any
; unfortunate kid whose face comes into contact with the fist.
;
; H #b207 (ANGELFACE)
@label=HITTING
c30739 CALL 25012    ; Update the SRB for ANGELFACE's current animatory state
                     ; and location
 30742 LD L,20       ; {Store ANGELFACE's current (pre-punch) animatory state
 30744 LD (HL),A     ; in byte #b20 of his buffer temporarily}
 30745 AND 240       ;
 30747 ADD A,8       ; #REGa=#AS40(#b40 or #b168): ANGELFACE raising his arm
 30749 CALL 30534    ; Update ANGELFACE's animatory state and return to #R30752
                     ; (below) next time
; This entry point is used by the routine at #R24263 to check whether ERIC has
; hit anyone.
*30752 LD B,2        ; {Is there anyone 2 spaces in front of the puncher and
 30754 CALL 30664    ; facing him?}
 30757 JR C,30778    ; Jump if not
 30759 CALL 29987    ; Knock the punched character over
 30762 EX DE,HL      ; #REGh=puncher's character number, #REGd=victim's
                     ; character number
 30763 LD A,H        ; #REGa=puncher's character number
 30764 CP 210        ; Was ERIC the assailant?
 30766 JR NZ,30778   ; Jump if not
 30768 LD A,D        ; #REGd=victim's character number
 30769 CP 207        ; Did ERIC knock ANGELFACE over?
 30771 JR NZ,30778   ; Jump if not
 30773 LD A,3        ; {ERIC has punched ANGELFACE; add 30 to the score and
 30775 CALL 29621    ; print it}
*30778 CALL 25012    ; Update the SRB for the punching character's current
                     ; animatory state
 30781 INC A         ; #REGa=animatory state of the punching character with his
                     ; fist fully raised
 30782 JP 30647      ; Update the punching character's animatory state, then
                     ; start the process of lowering the puncher's arm (if it
                     ; was ANGELFACE)

; Unused
@rsub=!30785
s30785 DEFB 0

; Knock down a main kid hit by a pellet
;
; Used by the routine at #R30380. Knocks down a main kid that was hit by a
; catapult pellet. Also adds 30 to the score if the pellet was ERIC's and the
; victim was ANGELFACE.
;
; D Kid's character number (#b206-#b210)
; H Pellet's character number (#b213 or #b214)
@label=KOKID
c30786 LD A,H        ; #REGa=pellet's character number
 30787 CP 214        ; Is this ERIC's catapult pellet?
 30789 JR NZ,30801   ; Jump if not (it's BOY WANDER's)
 30791 LD A,D        ; #REGa=character number of the kid hit by the pellet
 30792 CP 208        ; Did the pellet hit ANGELFACE?
 30794 JR NZ,30801   ; Jump if not
 30796 LD A,3        ; {ERIC's pellet hit ANGELFACE; add 30 to the score and
 30798 CALL 29621    ; print it}
*30801 JP 29982      ; Terminate the pellet and knock the kid over

; Deal with the frog when it has been knocked out of a cup
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 the frog's buffer by the routine at #R30229 when a catapult
; pellet has knocked the frog out of a cup. It controls the frog up to the
; point where it hits the floor, and deals with any collision with MISS TAKE's
; head on the way.
@label=FROGFALL
c30804 LD A,(32747)  ; #R32747 holds the inventory flags
 30807 RRCA          ; Has ERIC got the safe key already?
 30808 JR C,30889    ; Jump if so
 30810 LD HL,52224   ; Point #REGhl at byte #b0 of MISS TAKE's buffer
 30813 LD A,(HL)     ; #REGa=MISS TAKE's animatory state
 30814 INC L         ; #REGl=#b1
 30815 LD E,(HL)     ; #REGe=MISS TAKE's x-coordinate
 30816 INC L         ; #REGl=#b2
 30817 CP 118        ; #AS118: Is MISS TAKE sitting on the floor facing left?
 30819 JR Z,30829    ; Jump if so
 30821 CP 246        ; #AS246: Is she sitting on the floor facing right?
 30823 LD A,252      ; #REGa=-4
 30825 JR NZ,30832   ; Jump if not
 30827 DEC E         ;
 30828 DEC E         ;
*30829 INC E         ; Now #REGe=x-coordinate the frog would have to be at to
                     ; be in line with MISS TAKE's head as she sits on the
                     ; floor
 30830 LD A,253      ; #REGa=-3
*30832 ADD A,(HL)    ; #REGa=y-coordinate the frog would have to be at to be
                     ; level with MISS TAKE's head
 30833 LD H,212      ; #b212=frog
 30835 CP (HL)       ; Compare with the frog's current y-coordinate
 30836 JR NZ,30889   ; Jump if the frog has not reached the level of MISS
                     ; TAKE's head
 30838 DEC L         ; #REGl=#b1
 30839 LD A,(HL)     ; #REGa=frog's x-coordinate
 30840 CP E          ; Compare with the x-coordinate of MISS TAKE's head
 30841 JR NZ,30889   ; Jump if they don't match
; ERIC's pellet has knocked the frog out of the cup and onto MISS TAKE's head.
; Celebrate!
 30843 LD HL,32747   ; #R32747 holds the inventory flags
 30846 SET 0,(HL)    ; Give ERIC the safe key
 30848 LD A,200      ; {Add 2000 to the score and print it
 30850 CALL 29621    ; }
 30853 LD HL,768     ; {Make the safe-key-getting celebratory sound effect
*30856 LD D,1        ;
 30858 LD A,L        ;
 30859 AND 63        ;
 30861 INC A         ;
 30862 LD B,A        ;
 30863 LD C,(HL)     ;
 30864 SET 4,C       ;
 30866 CALL 29836    ;
 30869 DEC L         ;
 30870 JR NZ,30856   ; }
@rsub=!30872-30874
 30872 NOP           ; {
 30873 NOP           ;
 30874 NOP           ; }
 30875 CALL 31746    ; Print the inventory (which now includes the safe key)
 30878 LD H,212      ; #b212=frog
 30880 CALL 25012    ; Update the SRB for the frog's current animatory state
                     ; and location
 30883 DEC E         ; Move the frog one space to the left
 30884 INC A         ; #REGa=#AS29: frog facing left, airborne (phase 1)
*30885 INC D         ; Make the frog fall one level
*30886 JP 24880      ; Update the frog's animatory state and location and
                     ; update the SRB
; The frog is still above the floor, but not in contact with MISS TAKE's head.
*30889 CALL 25012    ; Update the SRB for the frog's current animatory state
                     ; and location
 30892 BIT 4,D       ; Is the frog about to hit the floor (#REGd=16)?
 30894 JR Z,30885    ; Jump if not (to make it fall another level)
 30896 CP 28         ; The frog's animatory state will be #AS29 if it bounced
                     ; off MISS TAKE's head
 30898 LD A,28       ; #AS28=frog sitting still, facing left
 30900 JR NZ,30886   ; Jump if the frog bounced off MISS TAKE's head
 30902 INC D         ; #REGd=17 (bottom floor)
; This entry point is used by the routine at #R30906.
*30903 CALL 30534    ; Update the frog's animatory state and location and then
                     ; resume control at #R30906

; Control the frog
;
; This uninterruptible subcommand routine controls the frog's movements. The
; main entry point is used when the frog is sitting on the floor, deciding
; whether to stay put or take a hop.
;
; H #b212 (frog)
@label=MVFROG
@ssub=LD DE,(53760+1)
c30906 LD DE,(53761) ; Pick up ERIC's coordinates in #REGde
 30910 LD L,2        ; Point #REGhl at byte #b2 of the frog's buffer
 30912 LD A,(HL)     ; #REGa=frog's y-coordinate
 30913 CP D          ; Does it match ERIC's y-coordinate?
 30914 JR NZ,30934   ; Jump if not
 30916 DEC L         ; #REGl=#b1
 30917 LD A,(HL)     ; #REGa=frog's x-coordinate
 30918 SUB E         ; Is ERIC to the left of the frog?
 30919 JR NC,30923   ; Jump if so
 30921 NEG           ;
*30923 CP 4          ; Now #REGa=horizontal distance between the frog and ERIC
 30925 JR NC,30934   ; Jump if this is greater than 3
 30927 CALL 25233    ; {#REGa=random number >= #b192
 30930 OR 192        ; }
 30932 JR 30940      ;
*30934 CALL 25233    ; #REGa=random number
 30937 CP 192        ; {Return 3 times out of 4 (without moving the frog) when
 30939 RET C         ; ERIC is not nearby}
; The frog has decided to move. It has three options: turn round, short hop
; (one space forward), or long hop (three spaces forward).
*30940 CP 240        ; #REGa>=#b192 at this point
 30942 JR C,30960    ; Jump if #b192<=#REGa<#b240 (75% of the time) to make a
                     ; short or long hop
*30944 CALL 25012    ; Update the SRB for the frog's current animatory state
                     ; and location
 30947 INC A         ; #REGa=#AS29(#b29/#b157): frog airborne (phase one)
 30948 CALL 30534    ; Update the frog's animatory state and then resume
                     ; control at entry point #R30951 (below)
; This entry point is used when the frog has jumped into the air in order to
; turn round (either by choice, or because a wall or closed door is in the
; way).
@label=*
*30951 CALL 25012    ; Update the SRB for the frog's current animatory state
 30954 DEC A         ; #REGa=#AS28(#b28/#b156): frog sitting
 30955 XOR 128       ; Turn the frog round
 30957 JP 30903      ; Update the frog's animatory state and then resume
                     ; control at the main entry point (#R30906)
; The frog is planning a hop. Decide between a short hop (one space forward)
; and a long hop (three spaces forward).
*30960 LD L,0        ; Point #REGhl at byte #b0 of the frog's buffer
 30962 CP 216        ; Set the carry flag if #b192<=#REGa<#b216
 30964 BIT 7,(HL)    ; Set the zero flag if the frog is facing left
 30966 LD L,1        ; {Pick up the frog's x-coordinate in #REGe and
 30968 LD E,(HL)     ; y-coordinate in #REGd
 30969 LD L,2        ;
 30971 LD D,(HL)     ; }
 30972 JR C,31016    ; Jump if #REGa<#b216 (50% of the time) to consider a long
                     ; hop
 30974 JR NZ,30978   ; Jump if the frog is facing right
 30976 DEC E         ;
 30977 DEC E         ;
*30978 INC E         ; #REGe=x-coordinate of the spot directly in front of the
                     ; frog
 30979 LD HL,32756   ; #R32756 holds the door/window status flags
 30982 LD A,(HL)     ; Pick these up in #REGa
 30983 LD B,A        ; Save a copy of them in #REGb briefly
 30984 AND 63        ; {Reset bits 6 and 7 of the door/window status flags
 30986 LD (HL),A     ; (i.e. pretend that the windows are closed)}
 30987 CALL 30292    ; Check for closed doors and walls in the frog's path
 30990 LD (HL),B     ; Restore the original door/window status flags
 30991 LD H,212      ; #b212=frog
 30993 JR C,30944    ; Turn the frog round if there's a wall or closed door in
                     ; its path
*30995 CALL 25012    ; Update the SRB for the frog's current animatory state
                     ; and location
 30998 INC A         ; #REGa=#AS29(#b29/#b157): frog airborne (phase one)
*30999 RLCA          ;
 31000 RRCA          ;
 31001 JR C,31005    ; Jump if the frog is facing right
 31003 DEC E         ;
 31004 DEC E         ;
*31005 INC E         ; Now #REGe=x-coordinate of the spot directly in front of
                     ; the frog
 31006 CALL 30534    ; Update the frog's animatory state and then resume
                     ; control at entry point #R31009 (below)
; This entry point is used when the frog has just jumped into the air for a
; short hop, or is just about to finish a long hop. Either way, the frog is
; going to land now.
@label=*
*31009 CALL 25012    ; Update the SRB for the frog's current animatory state
                     ; and location
 31012 DEC A         ; #REGa=#AS28(#b28/#b156): frog sitting
 31013 JP 30903      ; Update the frog's animatory state and then resume
                     ; control at the main entry point (#R30906)
; The frog is planning a long hop. Check whether the coast is clear up to three
; spaces ahead.
*31016 LD C,0        ;
 31018 JR NZ,31022   ; Jump if the frog is facing right
 31020 DEC C         ;
 31021 DEC C         ;
*31022 INC C         ; #REGc=#b1 if the frog's facing right, #b255 if facing
                     ; left
 31023 LD HL,32756   ; #R32756 holds the door/window status flags
 31026 LD A,(HL)     ; Pick these up in #REGa
 31027 LD B,A        ; Save a copy of them in #REGb briefly
 31028 AND 63        ; {Reset bits 6 and 7 of the door/window status flags
 31030 LD (HL),A     ; (i.e. pretend that the windows are closed)}
 31031 PUSH BC       ;
 31032 LD B,3        ; We will test up to 3 spaces in front of the frog
*31034 LD A,E        ; {Set #REGe to the x-coordinate of the spot 1, 2 or 3
 31035 ADD A,C       ; spaces in front of the frog
 31036 LD E,A        ; }
 31037 PUSH DE       ;
 31038 CALL 30292    ; Check for walls and closed doors in the frog's path
 31041 POP DE        ;
 31042 JR C,31046    ; Jump if there is one
 31044 DJNZ 31034    ; Jump back until we've checked up to 3 spaces in front of
                     ; the frog
*31046 POP BC        ;
 31047 LD (HL),B     ; Restore the original door/window status flags to #R32756
 31048 LD H,212      ; #b212=frog
 31050 JP C,30944    ; Turn the frog round if there's a wall or closed door
                     ; less than four spaces ahead
 31053 CALL 30995    ; Otherwise move the frog one space forward and adjust its
                     ; animatory state to #AS29(#b29/#b157) (airborne, phase
                     ; one)
 31056 LD L,17       ; {Change the address in bytes #b17 and #b18 of the frog's
@ssub=LD (HL),31061%256
@rsub=LD (HL),31061%256 ; buffer to #R31061 (below) so that we resume there
@rsub=INC L
@rsub=LD (HL),31061/256 ; }
 31058 LD (HL),85    ; buffer to #R31061 (below) so that we resume there}
 31060 RET           ;
; This entry point is used when the frog has just jumped into the air in order
; to make a long hop (three spaces forward). It is also used by the routine at
; #R31254 to introduce the frog into the game with an initial animatory state
; of #AS29 (facing left, airborne, phase 1) and location (59,10).
*31061 CALL 30995    ; Move the frog one space forward and adjust its animatory
                     ; state to #AS30(#b30/#b158) (airborne, phase 2)
 31064 LD L,17       ; {Change the address in bytes #b17 and #b18 of the frog's
@ssub=LD (HL),31069%256
@rsub=LD (HL),31069%256 ; buffer to #R31069 (below) so that we resume there
@rsub=INC L
@rsub=LD (HL),31069/256 ; }
 31066 LD (HL),93    ; buffer to #R31069 (below) so that we resume there}
 31068 RET           ;
; This entry point is used when the frog is at the highest point of a long hop.
@label=FROGHIGH
 31069 CALL 25012    ; Update the SRB for the frog's current animatory state
                     ; and location
 31072 DEC A         ; #REGa=#AS29(#b29/#b157): frog airborne (phase one)
 31073 JP 30999      ; Move the frog one space forward

; Unused
@rsub=!31076
s31076 DEFS 2

; Control a female character while she's standing on a chair or jumping (1)
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a female character's buffer by the routine at #R31092. It
; deals with a female character while she is either standing on a chair or
; jumping up and down (to evade a mouse).
;
; H Character number (#b183-#b189, #b204 or #b209)
@label=GIRLJPING1
c31078 LD L,19       ; Byte #b19 of the character's buffer holds a counter
                     ; determining how much longer she will continue jumping
 31080 DEC (HL)      ; Is it time to stop jumping?
 31081 JR NZ,31128   ; Jump if not
 31083 CALL 28978    ; Return this character to the floor
 31086 LD L,18       ; {Remove the address of this routine from bytes #b17 and
 31088 LD (HL),0     ; #b18 of the character's buffer}
 31090 RET           ;

; Unused
@rsub=!31091
s31091 DEFB 0

; Make a female character stand on a chair or start jumping
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a female character's buffer by the routine at #R31150 when
; there's a mouse in the vicinity. It makes the female character either stand
; on a chair (if there's one beside her) or start jumping up and down.
;
; H Character number (#b183-#b189, #b204 or #b209)
@label=STARTJPING
c31092 LD L,17       ; {Replace the address of this routine in bytes #b17 and
@ssub=LD (HL),31078%256
@rsub=LD (HL),31078%256 ; #b18 of the character's buffer with that of #R31078
@rsub=INC L
@rsub=LD (HL),31078/256 ; }
 31094 LD (HL),102   ; #b18 of the character's buffer with that of #R31078}
 31096 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 31099 LD L,20       ; {Store the character's current animatory state in byte
 31101 LD (HL),A     ; #b20 of her buffer, so it can be restored when she's
                     ; finished jumping}
 31102 INC L         ; {Initialise byte #b21 to 0 on the assumption that there
 31103 LD (HL),0     ; is no chair to stand on}
 31105 DEC D         ; Jump up
 31106 PUSH DE       ;
 31107 LD L,0        ; {Pretend the character is facing left by resetting bit 7
 31109 RES 7,(HL)    ; of her animatory state (to make the chair check work)}
 31111 CALL 26068    ; Check whether this character is beside a chair
 31114 POP DE        ;
 31115 LD L,21       ;
 31117 AND A         ; Is this character standing beside a chair?
 31118 JR NZ,31121   ; Jump if not
 31120 INC (HL)      ; Set byte #b21 to 1 to indicate that the character is
                     ; standing on a chair
*31121 DEC L         ; {Collect the character's original animatory state from
 31122 LD A,(HL)     ; byte #b20}
 31123 AND 248       ; #REGa=character's base animatory state
 31125 JP 24880      ; Update the character's animatory state and location and
                     ; update the SRB

; Control a female character while she's standing on a chair or jumping (2)
;
; Used by the routine at #R31078. Does nothing if the female character is
; standing on a chair; otherwise makes her jump up or return to the floor.
;
; H Character number (#b183-#b189, #b204 or #b209)
@label=GIRLJPING2
c31128 LD L,21       ; {Bit 0 of byte #b21 of the character's buffer is set if
 31130 BIT 0,(HL)    ; she's standing on a chair}
 31132 RET NZ        ; Return if she is standing on a chair
 31133 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state and location
 31136 LD L,19       ; The counter at byte #b19 is even if the character is in
                     ; the air, odd if she's got her feet on the floor
 31138 INC D         ; Down a level
 31139 BIT 0,(HL)    ; Is this character in the air at the moment?
 31141 JR Z,31145    ; Jump if so
 31143 DEC D         ; {Up a level
 31144 DEC D         ; }
*31145 JP 24880      ; Update the character's y-coordinate  and update the SRB

; Unused
@rsub=!31148
s31148 DEFS 2

; Make any female characters near a mouse start or continue jumping
;
; Used by the routine at #R31254. Does nothing if the mouse is off-screen.
; Otherwise, for each female character that is facing the mouse and within five
; spaces to the left or right of it, either (a) makes her stand on a chair or
; start jumping if she isn't already, or (b) makes her stay on the chair or
; keep jumping for a little longer.
;
; H Mouse's character number (#b198, #b199, #b206-#b208, #b212)
@label=CHKGIRLS
c31150 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 31153 LD B,A        ; Copy this to #REGb
 31154 LD L,1        ; Point #REGhl at byte #b1 of the mouse's buffer
 31156 LD A,(HL)     ; #REGa=mouse's x-coordinate
 31157 LD E,A        ; Copy this to #REGe
 31158 SUB B         ;
 31159 INC A         ;
 31160 CP 32         ; Is this mouse off-screen?
 31162 RET NC        ; Return if so
 31163 INC L         ; #REGl=#b2
 31164 LD D,(HL)     ; #REGd=mouse's y-coordinate
 31165 LD H,183      ; #b183=little girl no. 1
 31167 LD B,7        ; There are 7 little girls to check
 31169 CALL 31181    ; Make them start jumping if necessary
 31172 LD H,204      ; #b204=MISS TAKE
 31174 INC B         ; B=1
 31175 CALL 31181    ; Make MISS TAKE start jumping if necessary
 31178 LD H,209      ; #b209=HAYLEY
 31180 INC B         ; B=1
; At this point #REGh holds the number of the first female character to check,
; and #REGb the number of characters to check (for proximity to a mouse).
*31181 LD L,2        ; Point #REGhl at byte #b2 of the female character's
                     ; buffer
 31183 LD A,D        ; #REGa=mouse's y-coordinate
 31184 SUB (HL)      ; Subtract that of the female character under
                     ; consideration
 31185 JR Z,31197    ; Jump if the female character is standing on the same
                     ; floor as the mouse
 31187 DEC A         ; Is the female character one level above the mouse?
 31188 JR NZ,31248   ; Jump ahead to consider the next character if not
@rsub=!31190-31193
 31190 LD L,18       ; {Pick up the MSB of any uninterruptible subcommand
 31192 LD A,(HL)     ; routine address in bytes #b17 and #b18 of the
                     ; character's buffer}
@ssub=CP 31078/256
 31193 CP 121        ; Is this character jumping (#b121=MSB of #R31078 or
                     ; #R31092)?
@rsub=>CALL 31252    ; Is this character already under the control of the
@rsub=>              ; routine at #R31078 or #R31092?
 31195 JR NZ,31248   ; Jump ahead to consider the next character if not
*31197 LD L,1        ; Point #REGhl at byte #b1 of the character's buffer
 31199 LD A,(HL)     ; #REGa=female character's x-coordinate
 31200 SUB E         ; Subtract that of the mouse
 31201 LD L,0        ; Point #REGhl at byte #b0 of the character's buffer
 31203 JR Z,31225    ; Jump if the girl is standing right where the mouse is
 31205 JR NC,31217   ; Jump if the girl is standing to the right of the mouse
 31207 CP 251        ; Is the girl within 5 spaces to the left of the mouse?
 31209 JR C,31248    ; Jump ahead to consider the next character if not
 31211 BIT 7,(HL)    ; Is the female character facing left?
 31213 JR Z,31248    ; Jump ahead to consider the next character if so
 31215 JR 31225      ;
*31217 CP 6          ; Is the girl within 5 spaces to the right of the mouse?
 31219 JR NC,31248   ; Jump ahead to consider the next character if not
 31221 BIT 7,(HL)    ; Is the female character facing right?
 31223 JR NZ,31248   ; Jump ahead to consider the next character if so
; The female character is located within 5 spaces of the mouse, and is facing
; it. Figure out whether she's already jumping, or can start jumping.
@rsub=CALL 31252     ; Set the zero flag if the character is under the control
@rsub=               ; of the routine at #R31078 or #R31092 (i.e. is already
@rsub=               ; jumping)
*31225 LD L,18       ; {Pick up the MSB of any uninterruptible subcommand
@rsub=!31227-31228
 31227 LD A,(HL)     ; routine address in bytes #b17 and #b18 of the female
                     ; character's buffer}
@ssub=CP 31078/256
 31228 CP 121        ; Set the zero flag if the routine address is #R31078 or
                     ; #R31092 (i.e. the character is already jumping)
 31230 INC HL        ; Point #REGhl at byte #b19 of the character's buffer
 31231 JR NZ,31237   ; Jump if the character is not jumping
 31233 SET 4,(HL)    ; Otherwise ensure this character continues jumping for a
                     ; little longer by setting the counter in byte #b19 to at
                     ; least #b16
 31235 JR 31248      ; Jump ahead to consider the next character
*31237 AND A         ; Is there an uninterruptible subcommand routine address
                     ; other than #R31078 or #R31092 in bytes #b17 and #b18 of
                     ; the character's buffer (meaning she is otherwise
                     ; occupied)?
 31238 JR NZ,31248   ; Jump ahead to consider the next character if so
; The female character is not jumping at the moment. Make her start.
 31240 LD (HL),21    ; {Set the delay parameter at byte #b19 determining how
 31242 DEC L         ; long the female character will jump up and down}
@ssub=LD (HL),31092/256
 31243 LD (HL),121   ; {Place the address of the uninterruptible subcommand
 31245 DEC L         ; routine at #R31092 into bytes #b17 and #b18 of the
@ssub=LD (HL),31092%256
 31246 LD (HL),116   ; female character's buffer}
*31248 INC H         ; Next female character
 31249 DJNZ 31181    ; Jump back until all the characters have been checked
 31251 RET           ;

@rsub+begin
; Check whether a female character is jumping
;
; Used by the routine at #R31150. Returns with the zero flag set if the
; character is under the control of the routine at #R31078 or #R31092.
;
; H Character number (#b183-#b189, #b204, #b209)
@label=CHKJPING
c31252 LD L,18       ; {Pick up the MSB of any uninterruptible subcommand
       LD A,(HL)     ; routine address in bytes #b17 and #b18 of the
                     ; character's buffer}
       DEC L         ; #REGl=#b17
       LD C,(HL)     ; Pick up the LSB in #REGc
       INC L         ; #REGl=#b18
       CP 31078/256  ; Does the MSB match that of #R31078?
       JR NZ,31253   ; Jump if not
       LD A,C        ; #REGa=LSB of the uninterruptible subcommand routine
                     ; address in bytes #b17 and #b18
       CP 31078%256  ; Is this girl under the control of the routine at
                     ; #R31078?
       RET Z         ; Return with the zero flag set if so
@label=NOTJPING1
 31253 LD A,(HL)     ; #REGa=MSB of any uninterruptible subcommand routine
                     ; address in bytes #b17 and #b18
       CP 31092/256  ; Does the MSB match that of #R31092?
       RET NZ        ; Return with the zero flag reset if not
       LD A,C        ; #REGa=LSB of the uninterruptible subcommand routine
                     ; address in bytes #b17 and #b18
       CP 31092%256  ; Is this girl under the control of the routine at
                     ; #R31092?
       RET           ; Return with the zero flag set if so
@rsub+end

; Unused
@rsub=!31252
s31252 DEFS 2

; Control a mouse
;
; The address of this uninterruptible subcommand routine is placed into bytes
; #b17 and #b18 of a mouse's buffer by the routine at #R31502 (if the mouse was
; released by ERIC) or by the routine at #R62910 (when preparing for a new
; game). Bytes #b16 and #b19-#b22 of the mouse's buffer are used to store the
; following values that control its movement:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Byte | =h Contents }
; { #b16    | Counter decremented each time the mouse hides (if the mouse was
;             released by ERIC); when it reaches 0, the mouse dies (returns
;             control to the character whose buffer it borrowed) }
; { #b19    | Direction of travel, and the distance remaining to travel before
;             hiding or considering a change of direction: it is positive (bit
;             7 reset) if the mouse is travelling right, and decremented on
;             each pass; it is negative (bit 7 set) if the mouse is travelling
;             left, and incremented on each pass; while the mouse is hiding, it
;             is 0 }
; { #b20    | Counter decremented on each change of direction or distance to
;             travel; when it reaches 0, the mouse hides }
; { #b21    | Counter determining how much longer the mouse has left to hide }
; { #b22    | x-coordinate of the mouse when it last hid }
; TABLE#
;
; H Mouse's character number (#b198, #b199, #b206-#b208, #b212)
@label=MVMOUSE
c31254 LD L,19       ; {#REGa=remaining distance to travel
 31256 LD A,(HL)     ; }
 31257 AND A         ; Is this mouse (a) hiding, (b) about to hide, or (c)
                     ; about to consider a change of direction and distance to
                     ; travel?
 31258 JR Z,31330    ; Jump if so
*31260 LD A,(32756)  ; #R32756 holds the door/window status flags
 31263 PUSH AF       ; Save these flags
 31264 AND 63        ; {Reset bits 6 and 7 of the door/window status flags
 31266 LD (32756),A  ; (i.e. pretend that the windows are closed)}
*31269 BIT 7,(HL)    ; Set the zero flag if the mouse is travelling right
 31271 LD L,1        ; {Collect the mouse's x-coordinate in #REGe
 31273 LD E,(HL)     ; }
 31274 JR Z,31278    ; Jump if the mouse is travelling right
 31276 DEC E         ;
 31277 DEC E         ;
*31278 INC E         ; #REGe=x-coordinate of the spot in front of the mouse
 31279 INC L         ; #REGl=#b2
 31280 LD A,(HL)     ; #REGa=mouse's y-coordinate
 31281 LD D,A        ; Copy this to #REGd
 31282 CP 10         ; Is the mouse on the middle floor?
 31284 JR NZ,31291   ; Jump if not
 31286 LD A,E        ; #REGa=x-coordinate of the spot in front of the mouse
 31287 CP 84         ; Is the mouse at the top of the stairs leading down to
                     ; the stage?
 31289 JR Z,31296    ; Turn the mouse round if so
*31291 CALL 30292    ; Check for walls and closed doors in the mouse's path
 31294 JR NC,31304   ; Jump if there are none
*31296 LD L,19       ; {Turn the mouse round without changing the distance
 31298 LD A,(HL)     ; remaining to travel
 31299 NEG           ;
 31301 LD (HL),A     ; }
 31302 JR 31269      ; See what's in front of the mouse in this direction
; There are no walls or closed doors in the mouse's path.
*31304 POP AF        ; {Restore the door/window status flags
 31305 LD (32756),A  ; }
 31308 CALL 25012    ; Update the SRB for the mouse's current animatory state
                     ; and location
 31311 LD L,19       ; {Is the mouse travelling right?
 31313 BIT 7,(HL)    ; }
 31315 JR Z,31323    ; Jump if so
 31317 INC (HL)      ; Decrease the distance left to travel
 31318 DEC E         ; Move the mouse one space left
 31319 LD A,47       ; #AS47: animatory state of a mouse travelling left
 31321 JR 31327      ;
*31323 DEC (HL)      ; Decrease the distance left to travel
 31324 INC E         ; Move the mouse one space right
*31325 LD A,175      ; #AS175: animatory state of a mouse travelling right
*31327 JP 24880      ; Update the mouse's animatory state and location and
                     ; update the SRB
; Byte #b19 holds 0, which means (a) the mouse is hiding at the moment, or (b)
; it's time for the mouse to consider a change of direction and distance to
; travel, or (c) it's time to hide for a bit.
*31330 INC L         ; {Pick up byte #b20 in #REGa
 31331 LD A,(HL)     ; }
 31332 AND A         ; Is the mouse already hiding?
 31333 JR Z,31372    ; Jump if so
 31335 DEC (HL)      ; Is it time for the mouse to hide temporarily?
 31336 JR NZ,31347   ; Jump if not
 31338 LD L,1        ; Point #REGhl at byte #b1 of the mouse's buffer
 31340 LD A,(HL)     ; #REGa=mouse's x-coordinate
 31341 LD L,22       ; {Store this in byte #b22 of the mouse's buffer for later
 31343 LD (HL),A     ; retrieval}
 31344 JP 29907      ; Make the mouse hide
; It's time for the mouse to consider a change of direction and distance to
; travel.
*31347 PUSH HL       ;
 31348 CALL 31150    ; Make any girls near this mouse start jumping
 31351 POP HL        ;
 31352 CALL 25233    ; #REGa=random number
 31355 AND 131       ; {#REGa=#b2-#b5 (bit 7 reset) or #b130-#b133 (bit 7 set)
 31357 ADD A,2       ; }
 31359 RLCA          ; {#REGa=#b2-#b5 (bit 7 reset), with the carry flag
 31360 AND A         ; holding the previous contents of bit 7
 31361 RRA           ; }
 31362 JR C,31366    ; Jump if bit 7 was set (the new direction is right)
 31364 NEG           ; The new direction is left
*31366 LD L,19       ; {Set the new direction and distance to travel
 31368 LD (HL),A     ; }
 31369 JP 31260      ; Start moving
; The mouse is currently hiding. Check whether it should transform into a frog
; before reappearing (in case ERIC obtained the Science Lab storeroom key in
; the meantime).
*31372 INC L         ; #REGl=#b21
 31373 DEC (HL)      ; Is it time for the mouse to come out of hiding?
 31374 RET NZ        ; Return if not
 31375 LD A,H        ; #REGa=mouse's character number
 31376 CP 212        ; Was this mouse released by ERIC?
 31378 JR NZ,31424   ; Jump if so
 31380 LD A,(32747)  ; #R32747 holds the inventory flags
 31383 BIT 1,A       ; Has ERIC got the Science Lab storeroom key?
 31385 JR Z,31398    ; Jump if not
 31387 LD A,29       ; #AS29: animatory state of the frog
 31389 LD DE,2619    ; (#REGe,#REGd)=(59,10) (location where the frog enters
                     ; the game)
 31392 CALL 24880    ; Update the frog's animatory state and location and
                     ; update the SRB
 31395 JP 31061      ; Bring the frog into the game
; It's time for this mouse to come out of hiding.
*31398 CALL 25233    ; {#REGa=random number between #b5 and #b20; this
 31401 AND 15        ; determines how long the mouse will hide next time
 31403 ADD A,5       ; }
 31405 LD (HL),A     ; Store this in byte #b21 of the mouse's buffer
 31406 CALL 25233    ; {#REGa=random number between 2 and 5; this determines
 31409 AND 3         ; how many changes of direction and distance to travel the
 31411 ADD A,2       ; mouse will make before hiding again}
 31413 DEC L         ; {Store this in byte #b20 of the mouse's buffer
 31414 LD (HL),A     ; }
 31415 LD L,22       ; {#REGe=x-coordinate of the mouse before it hid
 31417 LD E,(HL)     ; }
 31418 LD L,2        ; {#REGd=y-coordinate of the mouse
 31420 LD D,(HL)     ; }
 31421 JP 31325      ; Unhide the mouse
; This mouse was released by ERIC and is currently hiding. It's due to come out
; of hiding, or die.
*31424 LD L,16       ; Byte #b16 holds the mouse's lifespan counter
 31426 DEC (HL)      ; Is it time for this mouse to disappear for ever?
 31427 JR NZ,31451   ; Jump if not
; This mouse must die, and return control of the buffer it hijacked (#b198,
; #b199, #b206-#b208) to its original owner (little boy no. 9 or 10, BOY
; WANDER, ANGELFACE or EINSTEIN).
*31429 LD L,29       ; {Set bits 0 and 7 at byte #b29: restart the command list
 31431 LD (HL),129   ; and make the character run}
 31433 LD L,10       ; {Remove any interruptible subcommand routine address
 31435 LD (HL),0     ; that may have been in the character's buffer before it
                     ; was hijacked}
 31437 LD L,15       ; {Pick up from byte #b15 the animatory state of the
 31439 LD A,(HL)     ; character whose buffer the mouse borrowed}
 31440 AND 240       ; #REGa=character's base animatory state
 31442 LD L,0        ; {Restore this character's animatory state to its base
 31444 LD (HL),A     ; value}
 31445 INC L         ; {Make the character reappear at x-coordinate 32 (which
 31446 LD (HL),32    ; should be off-screen because ERIC cannot release mice in
                     ; the boys' skool)}
 31448 JP 25492      ; Terminate this uninterruptible subcommand, thus
                     ; returning control to the character who normally owns the
                     ; buffer
; This mouse (released by ERIC) is about to come out of hiding.
*31451 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 31454 CP 144        ; Is at least half of the girls' skool on-screen?
 31456 JR C,31429    ; Terminate the mouse if not
 31458 LD L,21       ;
 31460 JR 31398      ; Otherwise make the mouse reappear

; Release some mice (if possible)
;
; The address of this routine is placed into #R32727 by the routine at #R57893.
; It releases up to five mice, depending on (a) how many ERIC has caught, and
; (b) the availability of character buffers #b198 and #b199 (little boys 9 and
; 10) and #b206-#b208 (BOY WANDER, ANGELFACE and EINSTEIN).
;
; H #b210 (ERIC)
@label=DROPMICE
c31462 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 31465 CP 144        ; Is at least half of the girls' skool on-screen?
 31467 RET C         ; Return if not
 31468 LD A,(32737)  ; #R32737 holds the number of mice ERIC has caught
 31471 AND A         ; Has ERIC caught any mice?
 31472 RET Z         ; Return if not
 31473 PUSH HL       ;
 31474 PUSH AF       ; Save the number of captive mice
 31475 LD L,2        ; {Collect ERIC's coordinates in #REGde
 31477 LD D,(HL)     ;
 31478 DEC L         ;
 31479 LD E,(HL)     ; }
 31480 INC E         ; #REGe=x-coordinate of the spot in front of ERIC (if he's
                     ; facing right)
 31481 DEC L         ; #REGl=#b0
 31482 BIT 7,(HL)    ; Is ERIC facing right?
 31484 JR NZ,31488   ; Jump if so
 31486 DEC E         ; {#REGe=x-coordinate of the spot in front of ERIC (if
 31487 DEC E         ; he's facing left)}
*31488 CALL 31502    ; Release up to five mice at the spot in front of ERIC
 31491 POP AF        ; #REGa=number of mice ERIC had before trying to release
                     ; some
 31492 LD HL,32737   ; #R32737 holds the number of mice ERIC has left
 31495 CP (HL)       ; Set the zero flag if ERIC couldn't release any mice
 31496 LD A,(HL)     ; #REGa=number of mice left in ERIC's pocket
 31497 CALL NZ,31682 ; Print these in the inventory
 31500 POP HL        ;
 31501 RET           ;

; Prepare character buffers for released mice
;
; Used by the routine at #R31462. Releases up to five mice from ERIC's pocket.
; Each mouse will use a character buffer at page #b198, #b199 or #b206-#b208,
; provided that the character who usually occupies it is off-screen.
;
; DE Coordinates at which to release the mice
@label=PREPMICE
c31502 LD H,198      ; {Use buffers #b198 and #b199 (little boys nos. 9 and 10)
 31504 LD B,2        ; for released mice if possible}
 31506 CALL 31514    ; Prepare these buffers
 31509 RET Z         ; Return if ERIC has no mice left
 31510 LD H,206      ; {Also use buffers #b206-#b208 (BOY WANDER, ANGELFACE and
 31512 LD B,3        ; EINSTEIN) for released mice if possible}
*31514 LD L,18       ; {Pick up the MSB of the uninterruptible subcommand
 31516 LD A,(HL)     ; routine address in bytes #b17 and #b18 of the
                     ; character's buffer}
@ssub=CP 31254/256
@rsub=CP 31254/256
@rsub=JR NZ,31521    ; Jump if not
@rsub=DEC L          ; #REGl=#b17
@rsub=LD A,(HL)      ; #REGa=LSB of the uninterruptible subcommand routine
@rsub=               ; address in bytes #b17 and #b18
@rsub=CP 31254%256   ; Does the LSB match that of #R31254?
 31517 CP 122        ; Does the MSB match that of #R31254?
 31519 JR Z,31568    ; Jump if so
@rsub=NOTMOUSE:
 31521 LD L,1        ; {#REGa=x-coordinate of the character using this buffer
 31523 LD A,(HL)     ; }
 31524 CP 142        ; Is this character inside or close to the girls' skool?
 31526 JR NC,31568   ; Jump if so (we can't use his buffer)
 31528 DEC L         ; #REGl=#b0
 31529 LD A,(HL)     ; #REGa=character's animatory state
 31530 LD L,15       ; {Store this in byte #b15 of the buffer for retrieval
 31532 LD (HL),A     ; when the mouse dies}
 31533 CALL 25233    ; {#REGa=random number between #b10 and #b41; this
 31536 AND 31        ; determines the lifespan of the mouse
 31538 ADD A,10      ; }
 31540 INC L         ; {Store this lifespan parameter in byte #b16 of the
 31541 LD (HL),A     ; buffer}
 31542 INC L         ; {Place the address of the uninterruptible subcommand
@ssub=LD (HL),31254%256
 31543 LD (HL),22    ; routine at #R31254 into bytes #b17 and #b18 of the
 31545 INC L         ; character's buffer
@ssub=LD (HL),31254/256
 31546 LD (HL),122   ; }
 31548 XOR A         ; {Set bytes #b19 and #b20 to 0 so that the mouse is
 31549 INC L         ; initially hidden (see #R31254 for details on how these
 31550 LD (HL),A     ; bytes are used)
 31551 INC L         ;
 31552 LD (HL),A     ; }
 31553 INC L         ; {Set byte #b21 (time remaining before coming out of
 31554 LD (HL),B     ; hiding) to 3, 2 or 1}
 31555 INC L         ; {Store the x-coordinate of the mouse in byte #b22, so it
 31556 LD (HL),E     ; appears there when it comes out of hiding}
 31557 LD L,2        ; {Store the y-coordinate in byte #b2
 31559 LD (HL),D     ; }
 31560 LD A,(32737)  ; #R32737 holds the number of mice ERIC has caught
 31563 DEC A         ; {One fewer now
 31564 LD (32737),A  ; }
 31567 RET Z         ; Return if ERIC has no mice left
*31568 INC H         ; Point to the next potential buffer for a released mouse
 31569 DJNZ 31514    ; Jump back until all have been considered
 31571 RET           ;

; Unused
@rsub=!31572
s31572 DEFB 0

; Make ERIC catch a mouse or frog (if present)
;
; The address of this routine is placed into #R32727 by the routine at #R57637
; after 'C' has been pressed. Adds the mouse or frog to ERIC's inventory if he
; has managed to catch it. If the captive animal is a mouse, another one is set
; free for ERIC to catch.
;
; H #b210 (ERIC)
@label=CATCHMORF
c31573 LD L,0        ; Point #REGhl at byte #b0 of ERIC's buffer
 31575 LD A,(HL)     ; #REGa=ERIC's animatory state
 31576 RLCA          ; {Set #REGa to -1 if ERIC is facing left, or 1 if he's
 31577 SBC A,A       ; facing right
 31578 ADD A,A       ;
 31579 CPL           ; }
 31580 INC L         ; #REGl=1
 31581 ADD A,(HL)    ; Now #REGa=x-coordinate of the spot in front of ERIC
 31582 INC L         ; #REGl=2
@ssub=LD DE,(54272+1)
 31583 LD DE,(54273) ; Pick up the coordinates of the animal using buffer #b212
                     ; (mouse or frog)
 31587 CP E          ; Is there a mouse or frog at this x-coordinate?
 31588 RET NZ        ; Return if not
 31589 LD A,(HL)     ; #REGa=ERIC's y-coordinate
 31590 CP D          ; Is the mouse/frog on this floor?
 31591 RET NZ        ; Return if not
 31592 LD A,(54272)  ; Pick up the mouse/frog's animatory state in #REGa
 31595 AND 127       ; Discard all but the 'direction' bit (bit 7)
 31597 CP 47         ; #AS47: Is it a mouse?
 31599 JP NZ,31733   ; Jump if not (it's the frog)
; ERIC has managed to catch the mouse.
 31602 LD H,212      ; #REGh=#b212 (the mouse's buffer)
 31604 CALL 25012    ; Update the SRB for the mouse's current animatory state
                     ; and location
; Determine where to release another mouse.
@bfix=NEXTR:
 31607 LD HL,32767   ; #R32767 holds the column of the play area at the far
                     ; left of the screen
@if({fix}>1)(label=)
*31610 CALL 25233    ; {#REGa=R, a random number from 0 to 7; we'll use this to
 31613 AND 7         ; determine where the new free mouse will be placed}
 31615 LD D,A        ; Copy this random number to #REGd
 31616 CP 2          ; {Jump if R>=2
 31618 JR NC,31628   ; }
@ignoreua
; #IF({fix}<2)||R=0 or 1. The next section of code is intended to set the
; x-coordinate for the the new free mouse to 170 provided that X<128, or try
; again with a new random number (R) if X>=128. However, at this point #REGhl
; may have been set to #w32522 (byte #b10 of the #R32512(screen refresh
; buffer)) or #w32600 (byte 4 of the #R32596(buffer for the Blue Room
; blackboard)) by the #S/LD L/,#n10 or #S/LD L/,#n88 instruction below, and so
; the contents of #w32522 or #w32600 (instead of X at #R32767) may be compared
; with 128. Thus it is possible for the new free mouse to appear at
; x-coordinate 170 even when X>=128, which means it could appear on-screen.
; This is a #BUG#rematerialisingMouse(bug).|R=0 or 1. The next section of code
; sets the x-coordinate for the the new free mouse to 170 provided that X<128,
; or tries again with a new random number (R) if X>=128.||
@ignoreua
 31620 LD A,(HL)     ; #REGa=X (column of the play area at the far left of the
                     ; screen)#IF({fix}<2)||, or the contents of #w32522 or
                     ; #w32600||
 31621 RLCA          ;
@bfix=JR C,31607
 31622 JR C,31610    ; Jump if #REGa>=128 to get another random number
 31624 LD L,170      ; This will be the x-coordinate for the new free mouse
 31626 JR 31651      ; Go and figure out the y-coordinate
*31628 CP 5          ;
@ignoreua
 31630 LD A,(HL)     ; #REGa=X (column of the play area at the far left of the
                     ; screen)#IF({fix}<2)||, or the contents of #w32522 or
                     ; #w32600||
 31631 JR NC,31645   ; Jump if R>=5
@ignoreua
; #IF({fix}<2)||R=2, 3 or 4. The next section of code is intended to set the
; x-coordinate for the new free mouse to 88 provided that X<56 or X>=104, or
; try again with a new random number (R) if 56<=X<104. However, as noted above,
; #REGhl may now hold #w32522 or #w32600 instead of #R32767, and so the
; contents of #w32522 or #w32600 (instead of X) may be compared with 56 and
; 104. Thus it is possible for the new free mouse to appear at x-coordinate 88
; even when 56<=X<104, which means it could appear on-screen. This is a
; #BUG#rematerialisingMouse(bug).|R=2, 3 or 4. The next section of code sets
; the x-coordinate for the new free mouse to 88 provided that X<56 or X>=104,
; or tries again with a new random number (R) if 56<=X<104.||
 31633 CP 56         ;
 31635 LD L,88       ; This is a possible x-coordinate for the new free mouse
 31637 JR C,31651    ; Jump if #REGa<56 to figure out the y-coordinate
 31639 CP 104        ; {Jump if 56<=#REGa<104 to get another random number
@bfix=JR C,31607
 31641 JR C,31610    ; }
 31643 JR 31651      ; Go and figure out the y-coordinate for the mouse
@ignoreua
; #IF({fix}<2)||R=5, 6 or 7. The next section of code is intended to set the
; x-coordinate for the new free mouse to 10 provided that X>=56, or try again
; with a new random number (R) if X<56. However, as noted above, #REGhl may now
; hold #w32522 or #w32600 instead of #R32767, and so the contents of #w32522 or
; #w32600 (instead of X) may be compared with 56. Thus it is possible for the
; new free mouse to appear at x-coordinate 10 even when X<56, which means it
; could appear on-screen. This is a #BUG#rematerialisingMouse(bug).|R=5, 6 or
; 7. The next section of code sets the x-coordinate for the new free mouse to
; 10 provided that X>=56, or tries again with a new random number (R) if
; X<56.||
*31645 LD L,10       ; This is a possible x-coordinate for the new free mouse
 31647 CP 56         ; {Jump if #REGa<56 to get another random number
@bfix=JR C,31607
 31649 JR C,31610    ; }
; The x-coordinate for the new free mouse (10, 88 or 170) has been determined.
; Now to determine the mouse's y-coordinate.
*31651 LD A,D        ; #REGa=R (the random number from 0 to 7)
*31652 SUB 3         ; {Convert this to a random number from 0 to 2 by taking
 31654 JR NC,31652   ; the remainder when divided by 3
 31656 ADD A,3       ; }
 31658 LD H,17       ; This is a possible y-coordinate for the new free mouse
                     ; (bottom floor)
 31660 JR Z,31669    ; Jump if the random number is 0
 31662 DEC A         ;
 31663 LD H,10       ; This is a possible y-coordinate for the new free mouse
                     ; (middle floor)
 31665 JR Z,31669    ; Jump if the random number was 1
 31667 LD H,3        ; This is the y-coordinate for the new free mouse (top
                     ; floor)
@ssub=LD (54272+1),HL
*31669 LD (54273),HL ; Fill in the location of the new free mouse
 31672 LD A,10       ; {Add 100 to the score, print it and make a sound effect
 31674 CALL 28952    ; }
 31677 LD HL,32737   ; #R32737 holds the number of mice ERIC has caught
 31680 INC (HL)      ; Increase this by 1
 31681 LD A,(HL)     ;
; Now it's time to update the on-screen mouse inventory. This entry point is
; used by the routine at #R31462.
*31682 LD A,(32737)  ; #REGa=number of mice in ERIC's pocket
 31685 LD C,A        ; #REGc will count the number of mice remaining to be
                     ; printed in the inventory
 31686 LD L,168      ; #b168=LSB of the display file address for the spot in
                     ; the inventory for the first captive mouse
*31688 LD A,C        ; #REGa=number of mice left to print
 31689 AND A         ; Set the zero flag if there are none left
 31690 LD B,8        ; There are 8 bytes in the mouse UDG/inventory slot
 31692 LD H,80       ; Set #REGhl to the appropriate display file address
 31694 JR NZ,31702   ; Jump if we need to draw a mouse here
*31696 LD (HL),A     ; {Otherwise blank out this spot in the mouse inventory
 31697 INC H         ;
 31698 DJNZ 31696    ; }
 31700 JR 31712      ; Move to the next spot in the mouse inventory
*31702 LD DE,40928   ; The captured mouse UDG is at #R40928
 31705 DEC C         ; Decrease the captured mouse counter
*31706 LD A,(DE)     ; {Display a captured mouse in the inventory
 31707 LD (HL),A     ;
 31708 INC H         ;
 31709 INC E         ;
 31710 DJNZ 31706    ; }
*31712 INC L         ; Point to the next spot in the mouse inventory
 31713 BIT 4,L       ; Have we drawn all 8 spots yet (#REGl=#b176)?
 31715 JR Z,31688    ; Jump back to draw the next one if not
 31717 LD H,210      ; #b210=ERIC
 31719 RET           ;

; Unused
@rsub=!31720
s31720 DEFS 3

; Update the SRB for ERIC or his pellet and scroll the screen if necessary
;
; Used by the routine at #R29194. Updates the #R32512(screen refresh buffer)
; (SRB) for ERIC's new animatory state and location when he's riding the bike,
; or ERIC's pellet's new location as it flies through the air.
;
; A ERIC's/pellet's new animatory state
; D ERIC's/pellet's new y-coordinate
; E ERIC's/pellet's new x-coordinate
; H Character number: #b210 (ERIC) or #b214 (ERIC's pellet)
@label=SRBSCROLL
c31723 CALL 24880    ; Update the animatory state and location of ERIC or his
                     ; pellet and update the SRB
 31726 LD A,H        ; #REGa=character number
 31727 CP 210        ; Is this ERIC?
 31729 RET NZ        ; Return if not
 31730 JP 28178      ; Scroll the screen if necessary

; Make ERIC catch the frog (if possible)
;
; Used by the routine at #R31573. Adds the frog to ERIC's inventory and makes a
; sound effect if the frog is sitting (i.e. not airborne) at the spot in front
; of ERIC.
;
; A Frog's animatory state (with bit 7 reset)
@label=CATCHFROG
c31733 CP 28         ; #AS28: Is the frog sitting down?
 31735 RET NZ        ; Return if not (ERIC cannot catch an airborne frog)
 31736 LD HL,32747   ; #R32747 holds the inventory flags
 31739 SET 2,(HL)    ; Signal: got the frog
 31741 LD H,212      ; #b212=frog
 31743 JP 29568      ; Print the inventory and make a sound effect

; Print the inventory
;
; Used by the routines at #R23863, #R23907, #R30804, #R62178 and #R63586.
; Prints the safe key, Science Lab storeroom key, frog, water pistol and
; stinkbombs, depending on which of these items ERIC has in his possession.
; (The mouse inventory is handled separately at #R31682.)
@label=PRINTINV
@rsub=LD L,234
@keep
@ignoreua
c31746 LD HL,32746   ; #REGl=#b234 (LSB of the display file address for the
                     ; first slot in the inventory: #w20714)
 31749 LD C,6        ; {Clear the six slots in the current on-screen inventory
*31751 LD H,80       ;
 31753 LD B,8        ;
*31755 LD (HL),0     ;
 31757 INC H         ;
 31758 DJNZ 31755    ;
 31760 INC L         ;
 31761 DEC C         ;
 31762 JR NZ,31751   ; }
@nowarn
 31764 LD DE,20714   ; #REGde=display file address for the first slot in the
                     ; inventory
 31767 LD BC,39144   ; The safe key UDG is at #R39144
 31770 LD HL,32747   ; #R32747 holds the inventory flags
 31773 LD A,6        ; INK 6
 31775 BIT 0,(HL)    ; Has ERIC got the safe key?
 31777 CALL NZ,31844 ; Print it if so
 31780 INC B         ; #REGbc=#R39400: Science Lab storeroom key UDG
 31781 LD A,7        ; INK 7
 31783 BIT 1,(HL)    ; Has ERIC got the Science Lab storeroom key?
 31785 CALL NZ,31844 ; Print it if so
 31788 LD A,4        ; INK 4
 31790 INC B         ; #REGbc=#R39656: frog UDG
 31791 BIT 2,(HL)    ; Has ERIC got the frog?
 31793 CALL NZ,31844 ; Print it if so
 31796 INC B         ; #REGbc=#R39912: water pistol UDG (left half)
 31797 BIT 3,(HL)    ; Has ERIC got the water pistol?
 31799 JR Z,31819    ; Jump if not
 31801 LD A,5        ; INK 5 for the water-filled pistol
 31803 BIT 4,(HL)    ; Has ERIC got the water pistol with sherry in it?
 31805 JR Z,31809    ; Jump if not
 31807 LD A,67       ; INK 3: BRIGHT 1 for the sherry-filled pistol
*31809 PUSH AF       ;
 31810 CALL 31844    ; Print the left half of the water pistol
 31813 POP AF        ;
 31814 INC B         ; #REGbc=#R40168: water pistol UDG (right half)
 31815 CALL 31844    ; Print the right half of the water pistol
 31818 DEC B         ;
*31819 INC B         ;
 31820 INC B         ; #REGbc=#R40424: 3 stinkbombs UDG
 31821 LD A,7        ; INK 7
 31823 BIT 5,(HL)    ; Has ERIC got 3 stinkbombs?
 31825 JR NZ,31837   ; Jump if so
 31827 INC B         ; #REGbc=#R40680: 2 stinkbombs UDG
 31828 BIT 6,(HL)    ; Has ERIC got 2 stinkbombs?
 31830 JR NZ,31837   ; Jump if so
 31832 BIT 7,(HL)    ; Has ERIC got 1 stinkbomb?
 31834 JR Z,31840    ; Jump if not
 31836 INC B         ; #REGbc=#R40936: 1 stinkbomb UDG
*31837 CALL 31844    ; Print the stinkbombs
*31840 LD H,210      ; #b210=ERIC
 31842 RET           ;

; Unused
@rsub=!31843
s31843 DEFB 0

; Print an inventory item
;
; Used by the routine at #R31746. Prints the safe key, Science Lab storeroom
; key, frog, left or right half of the water pistol, or stinkbombs in one of
; the inventory slots.
;
; A Attribute byte
; BC UDG address
; DE Display file address
@label=PRINTITEM
c31844 LD D,90       ; {Set the attribute byte
 31846 LD (DE),A     ; }
 31847 LD D,80       ; Point #REGde back at the display file
*31849 LD A,(BC)     ; {Copy the UDG onto the screen
 31850 INC C         ;
 31851 LD (DE),A     ;
 31852 INC D         ;
 31853 BIT 3,D       ;
 31855 JR Z,31849    ; }
 31857 LD C,232      ; Reset #REGc
 31859 INC E         ; Move #REGde to the next slot in the on-screen inventory
 31860 RET           ;

; Collect the bit mask and game status buffer address for an event identifier
;
; Used by the routine at #IF({asm}<3)//#R31887, and also by the unused routines
; at #R31893 and #R31905/#R31887//. The event identifier in #REGa (#b0,
; #b7-#b12), taken modulo 8, corresponds to a bit in one of the bytes at
; #R32640 (#REGa<=7) or #R32641 (#REGa>=8). On exit, #REGhl points to the
; appropriate byte and #REGa holds the bit mask (single bit set), as follows:
; .
; #TABLE(default,centre,centre,:w)<wrapalign>
; { =h Entry | =h Exit | =h Event }
; { #b0      | #b1     | End of lesson }
; { #b7      | #b128   | Time to sit down for assembly }
; { #b8      | #b1     | Teacher has arrived at the top-floor room in the
;                        girls' skool }
; { #b9      | #b2     | Teacher has arrived at the middle-floor room in the
;                        girls' skool }
; { #b10     | #b4     | Teacher has arrived at the Blue Room }
; { #b11     | #b8     | Teacher has arrived at the Yellow Room }
; { #b12     | #b16    | Teacher has arrived at the Science Lab }
; TABLE#
;
; A Event ID from a command list
@label=GETFLAGPTR
c31861 AND A         ; {Set the carry flag if the event identifier is odd
 31862 RRA           ; }
 31863 LD E,A        ; Copy bits 1-3 of the event ID into bits 0-2 of #REGe
 31864 LD A,0        ; {#REGa=#b1 if the event ID is an even number, #b2 if
 31866 ADC A,A       ; it's an odd number
 31867 INC A         ; }
 31868 RR E          ; Now bits 2 and 3 of the event ID are in bits 0 and 1 of
                     ; #REGe
 31870 JR NC,31874   ; Jump if the event ID is #b0, #b8, #b9 or #b12 (bit 1
                     ; reset)
 31872 ADD A,A       ; {#REGa=#b4 (event ID = #b10) or 8 (event ID = #b7 or
 31873 ADD A,A       ; #b11)}
*31874 SCF           ;
 31875 RR E          ; #REGe=#b128 (event ID <= #b7) or #b129
 31877 JR NC,31883   ; Jump if the event ID is #b0, #b8, #b9, #b10 or #b11 (bit
                     ; 2 reset)
 31879 ADD A,A       ; {#REGa=#b16 (event ID = #b12) or #b128 (event ID = #b7)
 31880 ADD A,A       ;
 31881 ADD A,A       ;
 31882 ADD A,A       ; }
*31883 LD D,127      ; {#REGhl=#R32640 or #R32641
 31885 EX DE,HL      ; }
 31886 RET           ;

; Check whether a signal has been raised
;
; Used by the routines at #R31915, #R32497 and #R61555. Returns with the zero
; flag reset if the signal has been raised.
;
; A Event identifier
; H Character number (#b183-#b209)
@label=CHECKSIG
c31887 CALL 31861    ; Convert the event ID into an appropriate bit mask
 31890 AND (HL)      ; Set the zero flag if the signal for this event hasn't
                     ; been raised (#REGhl=#R32640 or #R32641)
 31891 EX DE,HL      ; Restore the character number to #REGh
 31892 RET           ; Return with the zero flag set if the signal hasn't been
                     ; raised

; Raise the signal for a certain event (unused)
;
; This routine is not used.
;
; H Character number (#b183-#b209)
@label=XSIGRAISE
@rsub=!31893
c31893 CALL 25213    ; Collect the next byte (the event identifier) from the
                     ; command list and continue into the routine at #R31896

; Raise the signal for a certain event
;
; Used by the routine at #R61555 to raise the signal for the event identifier
; in #REGa. In practice only event IDs #b8-#b12 are used, which indicate to
; anyone listening that the teacher has arrived at the classroom door.
;
; A Event identifier (#b8-#b12) from the teacher's command list
; H Teacher's character number (#b201-#b204)
@label=SIGRAISE
c31896 CALL 31861    ; Convert the event ID into an appropriate bit mask (#b1,
                     ; #b2, #b4, #b8 or #b16)
 31899 OR (HL)       ; Merge the existing event flags in #R32641
; #IF({asm}<3)(This entry point is used by the (unused) routine at #R31905.)
*31900 LD (HL),A     ; Set or reset the appropriate bit at #R32641
 31901 EX DE,HL      ; Restore the character number to #REGh
 31902 RET           ;

; Unused
@rsub=!31903
s31903 DEFS 2

; Lower the signal for a certain event (unused)
;
; This routine is not used.
;
; H Character number (#b183-#b209)
@label=SIGLOWER
@rsub=!31905-31913
c31905 CALL 25213    ; Get the next byte (the event ID) from the command list
 31908 CALL 31861    ; Convert the event ID into an appropriate bit mask
 31911 CPL           ; Set all but the event bit
 31912 AND (HL)      ; Merge the existing event flags, keeping the event bit
                     ; reset
 31913 JR 31900      ; Reset the appropriate bit at #R32640 or #R32641

; Check whether a character should continue walking up and down
;
; Used by the routines at #R31952 and #R31969 after a character has reached a
; walkabout destination. It checks the signal for the event specified by byte
; #b6 of the character's buffer, and returns with the carry flag reset if the
; signal has been raised and the character has returned to the walkabout
; origin.
;
; H Character number (#b183-#b209)
@label=WALKCHECK
c31915 LD L,6        ; {Pick up the event identifier in #REGa
 31917 LD A,(HL)     ; }
 31918 DEC L         ; #REGl=#b5
 31919 CALL 31887    ; Has the signal been raised for this event?
 31922 JR Z,31942    ; Jump if not
; This entry point is used by the routine at #R31969.
*31924 LD A,(HL)     ; #REGa=x-coordinate of the location relative to which the
                     ; character is performing his walkabout (the 'walkabout
                     ; origin'), stored in byte #b5
 31925 LD L,1        ; Byte #b1 of the character's buffer holds his current
                     ; x-coordinate
 31927 CP (HL)       ; Is the character at the walkabout origin (and therefore
                     ; ready to respond to the signal)?
 31928 JR NZ,31934   ; Return him to the walkabout origin if not
 31930 DEC L         ; Point #REGhl at byte #b0 of the character's buffer
 31931 BIT 0,(HL)    ; Is the character midstride?
 31933 RET Z         ; Return with the carry flag reset if not
*31934 SCF           ; Signal: not ready to advance in the command list yet
 31935 LD L,11       ; {Fill in the new walkabout destination (either the
 31937 LD (HL),A     ; origin or some location within 7 spaces to the left of
                     ; the origin)}
@nowarn
 31938 LD BC,25581   ; {Return with #REGbc holding the address of the routine
 31941 RET           ; at #R25581}
; The time hasn't come or the event hasn't happened yet, so set the character
; off on another mini-jaunt.
*31942 CALL 25233    ; #REGa=random number
 31945 AND 7         ; 0<=#REGa<=7
 31947 SUB 7         ; -7<=#REGa<=0
 31949 ADD A,(HL)    ; Add the x-coordinate of the walkabout origin to give the
                     ; new walkabout destination
 31950 JR 31934      ;

; Make a character walk up and down until a certain time
;
; Used by command lists #R51516(#b0), #R51772(#b2), #R52028(#b4), #R52284(#b6),
; #R52540(#b8), #R52796(#b10), #R53052(#b12), #R53308(#b14), #R53564(#b16),
; #R57942(#b20), #R59136(#b26), #R58768(#b32), #R58779(#b34), #R58798(#b36),
; #R58813(#b38), #R59151(#b40), #R59488(#b46), #R59499(#b48), #R59519(#b50),
; #R59530(#b52), #R59699(#b72), #R59715(#b74), #R59724(#b76), #R59788(#b80),
; #R59801(#b82), #R59812(#b84), #R59823(#b86) and #R58862(#b88) to make a
; character walk up and down within 7 spaces to the left of a fixed location
; (the 'walkabout origin') until a specified time, e.g. the end of the lesson
; or when a teacher arrives at the doorway of the classroom.
;
; H Character number (#b183-#b209)
@label=MVTILL
c31952 CALL 25213    ; Get the next byte (the event identifier) from the
                     ; command list
 31955 LD L,6        ; {Place it in byte #b6 of the character's buffer
 31957 LD (HL),A     ; }
*31958 CALL 31915    ; Has the specified time arrived, and is the character at
                     ; the walkabout origin?
 31961 JP NC,25484   ; Move to the next command in the command list if so
 31964 CALL 25503    ; Otherwise send the character off to another walkabout
                     ; destination via the routine at #R25581, and return to
                     ; the instruction at #R31967 (below) when done
@label=*
*31967 JR 31958      ;

; Make a character walk up and down a few times or until a certain time
;
; Used by command lists #R53820(#b18), #R58828(#b42) and #R58844(#b44) to make
; a character walk about a fixed location until a specified time, or until a
; certain number of walkabouts have been performed.
;
; H Character number (#b183-#b209)
@label=WALKABOUT
c31969 LD L,6        ; {Collect the event ID (always 0, denoting the end of the
 31971 CALL 25188    ; lesson) and the maximum walkabout count from the command
                     ; list and copy them into bytes #b6 and #b7 of the
                     ; character's buffer}
*31974 LD L,7        ; {Decrease the walkabout counter at byte #b7 of the
 31976 DEC (HL)      ; character's buffer}
 31977 JR NZ,31993   ; If the character has not yet performed the maximum
                     ; number of walkabouts, check whether the specified time
                     ; has arrived
 31979 INC (HL)      ; Set the walkabout counter back to 1 to ensure that we
                     ; return to this execution path next time (to check
                     ; whether the character has returned to the walkabout
                     ; origin)
 31980 LD L,5        ; Byte #b5 holds the x-coordinate of the walkabout origin
 31982 CALL 31924    ; Reset the carry flag if the character is at the
                     ; walkabout origin
*31985 JP NC,25484   ; Move to the next command in the command list if the
                     ; specified time has arrived or the character has
                     ; completed all his walkabouts
 31988 CALL 25503    ; Otherwise send the character off to another walkabout
                     ; destination via the routine at #R25581, and return to
                     ; the instruction at #R31991 (below) when done
@label=*
*31991 JR 31974      ;
*31993 CALL 31915    ; Reset the carry flag if the specified time has arrived
                     ; and the character is at the walkabout origin
 31996 JR 31985      ;

; Unused
@rsub=!31998
s31998 DEFS 2

; Get the identifier for ERIC's location
;
; Used by the routines at #R32021, #R32032 and #R62094. Returns with the carry
; flag set if ERIC's on the stage or a forbidden staircase (though this flag is
; ignored by the callers), and the location identifier (0-8) in #REGa. See the
; routine at #R25554 for a description of the location identifiers.
@label=ERICLOCID
c32000 CALL 25534    ; #REGd=ERIC's y-coordinate (or the y-coordinate of the
                     ; floor he's closest to if his feet are not on the floor)
@ssub=LD BC,47676-257
@nowarn
 32003 LD BC,47419   ; #REGb=#b185; #REGc=#b59
 32006 CALL 25557    ; Collect the identifier for ERIC's location (0-8) in
                     ; #REGa
 32009 RET NC        ; Return if ERIC's on the top, middle or bottom floor
; ERIC's not on the top, middle or bottom floor. He must be on a staircase or
; the assembly hall stage.
 32010 LD A,E        ; #REGa=ERIC's x-coordinate
 32011 SUB 48        ; {Return with #REGa=0 (forbidden zone) and the carry flag
 32013 CP 192        ; set if #REGe>=#b48 (ERIC must be on the stage, or a
 32015 SBC A,A       ; staircase he's not allowed on)
 32016 INC A         ;
 32017 SCF           ;
 32018 RET Z         ; }
 32019 ADD A,A       ; {Otherwise return with #REGa=2 and the carry flag reset
 32020 RET           ; (ERIC's on one of the staircases at the far left of the
                     ; boys' skool)}

; Check whether ERIC is where he should be
;
; Used by the routines at #R61512, #R61595, #R61631, #R61658 and #R61696.
; Returns with the zero flag set if and only if ERIC is where he should be
; during dinner, assembly, or class.
@label=PRESENT
c32021 CALL 32000    ; #REGa=#R25554#ericLocTable(location identifier) for ERIC
 32024 LD C,A        ; Copy this to #REGc
 32025 LD A,(32736)  ; #R32736 holds the current lesson descriptor
 32028 AND 15        ; Bits 0-3 tell us which room or area ERIC should be in
 32030 CP C          ; Is ERIC in that room or area?
 32031 RET           ; Return with the zero flag set if so

; Make any nearby teacher give ERIC lines if necessary (1)
;
; Used by the routine at #R63156. Makes any nearby teacher give ERIC lines for
; rule breakages other than hitting, firing a catapult, firing a waterpistol,
; writing on a blackboard, or dropping a stinkbomb.
@label=CHKERIC1
c32032 LD HL,32758   ; {Decrement the LSB of the lines-giving delay counter at
 32035 DEC (HL)      ; #R32758}
 32036 RET NZ        ; Return unless it's time to inspect the MSB
 32037 LD (HL),15    ; Reset the LSB to #b15
 32039 INC L         ; #REGhl=#R32759 (MSB of the lines-giving delay counter)
 32040 INC (HL)      ; {Has the lines-giving delay counter reached 0?
 32041 DEC (HL)      ; }
 32042 JR Z,32049    ; Jump if so
 32044 DEC (HL)      ; Otherwise decrement the MSB of the counter
 32045 LD A,(HL)     ; Pick up the MSB in #REGa
 32046 CP 6          ; Has enough time passed since the last time ERIC was
                     ; given lines?
 32048 RET NC        ; Return if not
; The MSB of the lines-giving delay counter (which is reset to #b10 by the
; routine at #R32062 when ERIC is given lines) is now #b5 or less. This means
; the minimum interval between two lines-givings (75 passes through the main
; loop) has elapsed. However, the teacher who gave ERIC lines last time must
; wait until the MSB reaches zero before he can give ERIC lines again.
*32049 CALL 32000    ; #REGa=#R25554#ericLocTable(location identifier) for ERIC
 32052 JR 32062      ; Skip over the routine at #R32054

; Make MR WACKER find the truant ERIC
;
; Used by the command list at #R62766, the address of which is placed into
; bytes #b27 and #b28 of MR WACKER's buffer by the routine at #R62668.
;
; H #b200 (MR WACKER)
@nowarn
@label=STALKERIC
c32054 LD BC,62794   ; {Place the address of the interruptible subcommand
 32057 JP 25520      ; routine at #R62794 into bytes #b9 and #b10 of MR
                     ; WACKER's buffer and jump to it}

; Unused
@rsub=!32060
s32060 DEFS 2

; Make any nearby teacher give ERIC lines if necessary (2)
;
; Continues from #R32032. On entry, #REGa contains a location identifier for
; ERIC:
; .
; #TABLE(default,centre)
; { =h ID | =h Region }
; { 0     | None of the places below (ERIC is never allowed here) }
; { 1     | Playground }
; { 2     | Various places in the boys' skool outside classrooms }
; { 3     | Assembly hall }
; { 4     | Dining hall }
; { 5     | Revision Library, just outside the Yellow Room door }
; { 6     | Science Lab }
; { 7     | Blue Room }
; { 8     | Yellow Room }
; TABLE#
;
; A Location identifier for ERIC (0-8)
@label=CHKERIC2
c32062 AND A         ; Is ERIC in a forbidden zone?
 32063 JP Z,32232    ; Jump with #REGa=0 (#b0+#b62=#R60455(#b62): YOU ARE NOT
                     ; ALLOWED HERE) if so
; ERIC's not in a forbidden zone. Check whether he's standing on a plant, or
; riding the bike in the boys' skool.
 32066 LD B,A        ; #REGb=ERIC's location identifier (1-8)
@ssub=LD L,32763%256
 32067 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 32069 BIT 1,(HL)    ; Is ERIC on the bike, on a plant, or falling?
 32071 JR Z,32091    ; Jump if not
; ERIC is on the bike, on a plant, or falling.
@ssub=LD L,32749%256
 32073 LD L,237      ; #REGhl=#R32749 (ERIC's other status flags)
 32075 LD A,(HL)     ; Pick these up in #REGa
 32076 AND 131       ; Check bits 0, 1 and 7
 32078 JR Z,32091    ; Jump if ERIC's falling
 32080 AND 2         ; #REGa=#b2 (#b2+#b62=#R60493(#b64): GET OFF THE PLANTS)
                     ; if ERIC's standing on a plant or plant pot
*32082 JP NZ,32232   ; Jump if ERIC is (a) standing on a plant or plant pot, or
                     ; (b) riding or standing on the saddle of the bike inside
                     ; the boys' skool
 32085 DEC B         ; #REGb=0 now if ERIC's in the playground
 32086 LD A,3        ; #b3+#b62=#R60506(#b65): DON'T RIDE BIKES IN HERE
 32088 JR NZ,32082   ; Jump if ERIC's riding the bike in the boys' skool
 32090 INC B         ; #REGb=ERIC's location identifier (1-8)
; Now to check whether ERIC's in the room or area he's supposed to be in this
; period.
@ssub=LD L,32736%256
*32091 LD L,224      ; #REGhl=#R32736 (lesson descriptor)
 32093 LD A,(HL)     ; Pick this up in #REGa
 32094 AND 15        ; Keep only the 'room' bits (bits 0-3)
 32096 LD C,A        ; Copy the room bits to #REGc
; Now the value in #REGc indicates where this lesson takes place:
; .
; #TABLE(default)
; { =h #REGc | =h Lesson/location }
; {        2 | Playtime }
; {        3 | Assembly }
; {        4 | Dinner }
; {        5 | Revision Library }
; {        6 | Science Lab }
; {        7 | Blue Room }
; {        8 | Yellow Room }
; TABLE#
@ssub=LD L,32640%256
 32097 LD L,128      ; #REGhl=#R32640 (various game status flags)
 32099 BIT 6,(HL)    ; Should ERIC be in class, assembly or the dinner hall by
                     ; now?
 32101 JR NZ,32167   ; Jump if so
@ssub=LD L,32739%256+1
 32103 LD L,228      ; {Pick up the MSB of the lesson clock
 32105 LD A,(HL)     ; }
 32106 CP 12         ; Should ERIC by now have left the classroom he was in
                     ; last period?
 32108 JR C,32134    ; Jump if so
; It's too soon to be telling ERIC to GET ALONG NOW. Check whether he's sitting
; on the floor anywhere outside the assembly hall.
@ssub=LD L,32763%256
 32110 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 32112 BIT 2,(HL)    ; Is ERIC sitting or lying down?
 32114 RET Z         ; Return if not
 32115 LD A,(53760)  ; #REGa=ERIC's animatory state
 32118 CP 4          ; #AS4: Is ERIC sitting in a chair?
 32120 RET Z         ; Return if so
 32121 CP 133        ; #AS133: ERIC sitting on the floor facing right
*32123 LD A,4        ; #b4+#b62=#R60526(#b66): GET OFF THE FLOOR
 32125 JP NZ,32232   ; Give lines if ERIC's sitting on the floor facing left,
                     ; or lying down
 32128 LD A,B        ; #REGa=ERIC's location identifier (1-8)
 32129 CP 3          ; ERIC is sitting on the floor facing right; is he in the
                     ; assembly hall?
 32131 JR NZ,32123   ; Give lines if not
 32133 RET           ;
; By now, ERIC should have left the classroom he was in last period.
*32134 LD A,5        ; Location IDs 6-8 correspond to the boys' skool
                     ; classrooms
 32136 CP B          ; Is ERIC in the Blue Room, Yellow Room or Science Lab?
 32137 JR C,32167    ; Jump if so
 32139 LD A,2        ; {Is it PLAYTIME?
 32141 CP C          ; }
 32142 JR Z,32158    ; Jump if so
 32144 DEC A         ; #REGa=1
 32145 CP B          ; #REGb=1 if ERIC's in the playground
 32146 LD A,5        ; #b5+#b62=#R60538(#b67): GET BACK TO SCHOOL
 32148 JR Z,32232    ; Give lines if ERIC is in the playground
 32150 LD A,C        ; {Is it ASSEMBLY?
 32151 CP 3          ; }
 32153 JR NZ,32158   ; Jump if not
 32155 CP B          ; Is ERIC in the assembly hall?
 32156 JR Z,32182    ; Jump if so
@ssub=LD L,32763%256
*32158 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 32160 BIT 2,(HL)    ; Is ERIC sitting or lying down?
 32162 RET Z         ; Return if not
 32163 LD A,4        ; #b4+#b62=#R60526(#b66): GET OFF THE FLOOR
 32165 JR 32232      ; Give lines
; ERIC should be in class, assembly or the dinner hall by now.
*32167 LD A,B        ; #REGa=ERIC's location identifier (1-8)
 32168 CP C          ; Compare that with where he should be
 32169 LD A,6        ; #b6+#b62=#R60554(#b68): GET ALONG NOW
 32171 JR NZ,32232   ; Give lines if ERIC's not where he should be
 32173 DEC A         ; #REGa=5
 32174 CP C          ; #REGc > 5 if this lesson is in a classroom
 32175 JR C,32209    ; Jump if this lesson is in a classroom
 32177 LD A,C        ; {Is it ASSEMBLY?
 32178 CP 3          ; }
 32180 JR NZ,32158   ; Jump if not
@ssub=LD L,32640%256
*32182 LD L,128      ; #REGhl=#R32640 (various game status flags)
 32184 BIT 7,(HL)    ; Bit 7 is set if ERIC should be sitting down now
 32186 LD A,(53760)  ; #REGa=ERIC's animatory state
 32189 JR NZ,32196   ; Jump if ERIC should be sitting facing the stage now
 32191 CP 133        ; #AS133: Is ERIC sitting on the floor facing right?
 32193 JR NZ,32158   ; Jump if not
 32195 RET           ;
; It's assembly, ERIC is in the assembly hall, and he should be sitting down
; facing the stage now. Check whether he is.
*32196 CP 133        ; #AS133: Is ERIC sitting on the floor facing right?
 32198 RET Z         ; Return if so
@ssub=LD L,32763%256
 32199 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 32201 LD A,7        ; #b7+#b62=#R60565(#b69): SIT FACING THE STAGE
 32203 BIT 2,(HL)    ; Is ERIC sitting (facing left) or lying down?
@bfix=/JR NZ,32232   ; Tell ERIC to sit facing the stage if so
 32205 JR Z,32232    ; Tell ERIC to sit facing the stage if not (this is a
                     ; #BUG#assemblySit(bug))
 32207 JR 32228      ; Otherwise tell ERIC to sit down
; This lesson takes place in a classroom, and ERIC is present. Check whether
; ERIC is sitting in a chair.
*32209 LD A,(53760)  ; #REGa=ERIC's animatory state
 32212 CP 4          ; #AS4: Is ERIC sitting in a chair?
 32214 RET Z         ; Return if so
@ssub=LD L,32763%256
 32215 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 32217 BIT 2,(HL)    ; Bit 2 is set if ERIC's sitting or lying on the floor
 32219 LD A,4        ; #b4+#b62=#R60526(#b66): GET OFF THE FLOOR
 32221 JR NZ,32232   ; Give lines if ERIC's sitting or lying on the floor
@ssub=LD L,32640%256
 32223 LD L,128      ; #REGhl=#R32640 (various game status flags)
 32225 BIT 7,(HL)    ; Should ERIC be seated by now (bit 7 is set by #R61696)?
 32227 RET Z         ; Return if not
*32228 LD A,8        ; #b8+#b62=#R60580(#b70): NOW SIT DOWN
@rsub=!32230-32231
 32230 NOP           ;
 32231 NOP           ;
; At this point, #REGa holds the lines reprimand ID.
*32232 AND A         ; Is ERIC in a forbidden zone?
 32233 JR NZ,32278   ; Jump if not
; ERIC is somewhere he's never allowed to be.
@ssub=LD L,32640%256
 32235 LD L,128      ; #REGhl=#R32640 (various game status flags)
 32237 BIT 5,(HL)    ; Is MISS TAKE chasing ERIC?
 32239 JR NZ,32277   ; Jump if so
 32241 LD A,(32736)  ; #REGa=lesson descriptor
 32244 CP 2          ; Is it PLAYTIME?
 32246 JR Z,32277    ; Jump if so
 32248 LD A,E        ; #REGa=ERIC's x-coordinate
 32249 CP 160        ; Is ERIC in the girls' skool?
 32251 JR C,32277    ; Jump if not
; So it's not playtime, ERIC is in the girls' skool, and MISS TAKE is not (yet)
; chasing him out. Should she start?
@ssub=LD HL,52224+2
 32253 LD HL,52226   ; Point #REGhl at byte #b2 of MISS TAKE's buffer
 32256 LD A,(HL)     ; #REGa=MISS TAKE's y-coordinate
 32257 CP D          ; Are ERIC and MISS TAKE on the same floor?
 32258 JR NZ,32275   ; Jump if not
 32260 LD L,29       ; {Set bit 0 of byte #b29 of MISS TAKE's character buffer,
 32262 SET 0,(HL)    ; triggering a restart of her command list (set to #R32371
                     ; below)}
 32264 DEC L         ; {Place the address of the command list at #R32371 into
@ssub=LD (HL),32371/256
 32265 LD (HL),126   ; bytes #b27 and #b28 of MISS TAKE's buffer; this command
 32267 DEC L         ; list contains a single routine address: #R32373
@ssub=LD (HL),32371%256
 32268 LD (HL),115   ; }
 32270 LD HL,32640   ; #R32640 holds various game status flags
 32273 SET 5,(HL)    ; Signal: MISS TAKE is chasing ERIC
*32275 LD H,127      ; Point #REGhl at the game status buffer page
*32277 XOR A         ; #b0+#b62=#R60455(#b62): YOU ARE NOT ALLOWED HERE
; Check how long it's been since ERIC last got lines.
@ssub=LD L,32759%256
*32278 LD L,247      ; #REGhl=#R32759 (MSB of the lines-giving delay counter)
 32280 DEC (HL)      ; {Reset the zero flag if it's too soon for the teacher
 32281 INC (HL)      ; who gave ERIC lines last time to give him lines again}
; This entry point is used by the routine at #R63586 with the zero flag set
; (meaning any teacher may give ERIC lines) and #REGa holding a lines reprimand
; ID.
*32282 PUSH AF       ; Save the lines reprimand ID and the zero flag
@rsub=!32283-32284
 32283 NOP           ;
 32284 NOP           ;
 32285 JR Z,32296    ; Jump if any teacher (including the one who gave him
                     ; lines last time) can give ERIC lines now
; It's too soon for the teacher who gave ERIC lines last time to give him lines
; again. Remove that teacher from lines-giving range temporarily.
@ssub=LD L,32757%256
 32287 LD L,245      ; {Collect from #R32757 into #REGh the character number of
 32289 LD H,(HL)     ; the teacher who last gave ERIC lines}
 32290 LD L,1        ; {#REGa=this teacher's x-coordinate
 32292 LD A,(HL)     ; }
 32293 LD (HL),224   ; Set this teacher's x-coordinate to 224 temporarily to
                     ; take him out of lines-giving range
 32295 LD L,A        ; Save the teacher's real x-coordinate in #REGl
; Now to find out which teacher (if any) should give ERIC lines.
*32296 PUSH HL       ;
 32297 CALL 28002    ; Find the first adult within lines-giving range of ERIC
 32300 POP HL        ;
 32301 LD D,A        ; #REGd=character number of this adult, or 0 if there are
                     ; none in range
 32302 POP AF        ;
 32303 LD B,A        ; #REGb=lines reprimand ID
 32304 JR Z,32310    ; Jump unless we need to restore the x-coordinate of the
                     ; teacher who last gave ERIC lines
 32306 LD A,L        ; {Restore the x-coordinate of the teacher who last gave
 32307 LD L,1        ; ERIC lines
 32309 LD (HL),A     ; }
*32310 LD A,D        ; #REGa=character number of the adult who can see ERIC, or
                     ; 0 if there are no adults in range
 32311 CP 205        ; Is it ALBERT (and therefore none of the teachers)?
 32313 RET Z         ; Return if so (ALBERT doesn't give lines)
 32314 AND A         ; Can any adult character see ERIC?
 32315 RET Z         ; Return if not
; A teacher is within lines-giving range.
 32316 LD HL,32640   ; #R32640 holds various game status flags
 32319 BIT 1,(HL)    ; Is MR WACKER chasing ERIC to expel him?
 32321 RET NZ        ; Return if so
@ssub=LD L,32757%256
 32322 LD L,245      ; {Store the character number of the lines-giver at
 32324 LD (HL),A     ; #R32757}
@ssub=LD L,32759%256
 32325 LD L,247      ; {Reset the MSB of the lines-giving delay counter at
 32327 LD (HL),10    ; #R32759 to #b10}
 32329 LD A,B        ; #REGa=lines reprimand ID
 32330 CP 6          ; #b6+#b62=#R60554(#b68): GET ALONG NOW
 32332 JR NZ,32361   ; Jump unless ERIC is late for class, dinner or assembly
; ERIC is late for class, dinner or assembly. The appropriate lines reprimand
; depends on who saw him: his teacher for this period, or some other teacher.
 32334 LD A,(32736)  ; Collect the lesson descriptor from #R32736
 32337 AND 240       ; {Keep only the bits relating to ERIC's teacher and shift
 32339 RLCA          ; them into bits 0-3
 32340 RLCA          ;
 32341 RLCA          ;
 32342 RLCA          ; }
 32343 ADD A,199     ; Now #REGa=character number of ERIC's teacher
                     ; (#b200-#b203)
 32345 CP D          ; Was it that teacher who saw ERIC?
 32346 JR NZ,32361   ; Jump if not
; ERIC's teacher for this period is the lines-giver. His lines reprimand
; alternates between 'COME ALONG YOU MONSTER' and 'DON'T KEEP ME WAITING'.
@ssub=LD L,32640%256
 32348 LD L,128      ; #REGhl=#R32640 (various game status flags)
 32350 LD A,16       ; Set bit 4 in #REGa
 32352 LD B,9        ; #b9+#b62=#R60586(#b71): COME ALONG YOU MONSTER
 32354 XOR (HL)      ; {Flip bit 4 in #R32640, toggling between #R60586(#b71)
 32355 LD (HL),A     ; and #R60609(#b72)}
 32356 BIT 4,(HL)    ; Should ERIC's teacher say 'COME ALONG YOU MONSTER' this
                     ; time (bit 4 set)?
 32358 JR NZ,32361   ; Jump if so
 32360 INC B         ; #b10+#b62=#R60609(#b72): DON'T KEEP ME WAITING
; At this point #REGd holds the character number of the teacher who is going to
; give ERIC lines, and #REGb holds the lines reprimand ID.
*32361 EX DE,HL      ; Now #REGh=character number of the lines-giver
 32362 LD A,B        ; {#REGb=lines reprimand ID
 32363 ADD A,62      ;
 32365 LD B,A        ; }
 32366 LD A,210      ; #b210=ERIC (the lines recipient)
 32368 JP 29716      ; Make the teacher give lines to ERIC

; Command list used to make MISS TAKE chase ERIC
;
; Used by the routine at #R32062.
@label=CLHERDERIC
w32371 DEFW 32373    ; Make MISS TAKE chase ERIC

; Make MISS TAKE chase ERIC (1)
;
; The address of this routine is found in the command list at #R32371, the
; address of which is placed into bytes #b27 and #b28 of MISS TAKE's buffer by
; the routine at #R32062.
@nowarn
@label=HERDERIC1
c32373 LD BC,32379   ; {Place the address of the interruptible subcommand
 32376 JP 25520      ; routine at #R32379 (chase ERIC) into bytes #b9 and #b10
                     ; of MISS TAKE's buffer and jump to it}

; Make MISS TAKE chase ERIC (2)
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of MISS TAKE's buffer by the routine at #R32373. It makes MISS TAKE
; stalk ERIC while he's in the girls' skool or the girls' playground, but stand
; on guard by the skool gate if ERIC is on the boys' side.
;
; H #b204 (MISS TAKE)
@label=HERDERIC2
c32379 LD L,29       ; Point #REGhl at byte #b29 of MISS TAKE's buffer
 32381 LD A,205      ; #b205=ALBERT
 32383 SET 7,(HL)    ; Set bit 7 at byte #b29 of MISS TAKE's buffer, making her
                     ; run
 32385 LD (32757),A  ; Set the character number of the adult who last gave ERIC
                     ; lines (stored at #R32757) to #b205 (ALBERT); this has
                     ; the effect of making any teacher (including whoever last
                     ; gave ERIC lines) available for lines-giving ASAP (see
                     ; #R32032 and #R32062)
 32388 LD L,0        ; Point #REGhl at byte #b0 of MISS TAKE's character buffer
 32390 BIT 0,(HL)    ; Is MISS TAKE midstride?
 32392 JP NZ,25950   ; Finish the stride if so
; Now check whether a command list restart has been requested. This request
; will have been made if the lesson in which MISS TAKE started chasing ERIC has
; ended, and the next lesson has just begun (see #R63309).
 32395 LD L,29       ; {Set the zero flag if MISS TAKE should continue hounding
 32397 BIT 0,(HL)    ; ERIC}
; This entry point is used by the routines at #R61595 and #R62794 with the zero
; flag reset and #REGh holding the character number of a teacher chasing ERIC.
*32399 LD L,1        ; {Collect the teacher's coordinates in #REGde
 32401 LD E,(HL)     ;
 32402 INC HL        ;
 32403 LD D,(HL)     ; }
 32404 JR Z,32418    ; Jump if this teacher is MISS TAKE and she should
                     ; continue chasing ERIC
 32406 CALL 25554    ; Is the teacher on a staircase?
 32409 JP NC,25488   ; If not, terminate this interruptible subcommand
; The chase is over, and the teacher is on a staircase. It's not a good idea to
; remove the interruptible subcommand routine address from bytes #b9 and #b10
; of the teacher's buffer at this point, though, because the next command in
; the teacher's command list will be #R25700, and that command will not work if
; the teacher's starting point is on a staircase. So continue chasing ERIC
; until the top or bottom of the staircase has been reached.
 32412 JP 25944      ; Continue chasing ERIC
@rsub=!32415-32417
 32415 NOP           ; {
 32416 NOP           ;
 32417 NOP           ; }
; MISS TAKE is chasing ERIC, but she only chases so far.
@ssub=LD A,(53760+1)
*32418 LD A,(53761)  ; #REGa=ERIC's x-coordinate
 32421 CP 138        ; This x-coordinate is just to the right of the plant in
                     ; the girls' playground
 32423 JR NC,32429   ; Jump if ERIC's to the right of this
 32425 LD A,E        ; #REGa=MISS TAKE's x-coordinate
 32426 CP 137        ; This is the x-coordinate where MISS TAKE stands on guard
                     ; for the truant ERIC
 32428 RET Z         ; Return if MISS TAKE is already here
*32429 JP 25944      ; Otherwise MISS TAKE continues chasing ERIC

; Unused
@rsub=!32432
s32432 DEFB 0

; Print the lesson and ring the bell
;
; Used by the routine at #R63309. Prints the lesson or 'DEMO.MODE' in the
; lesson box, and makes the bell sound effect.
@label=NEWLESSON2
c32433 LD HL,32734   ; #R32734 holds the current game mode
 32436 LD A,(HL)     ; #REGa=#b255 if we're in demo mode, #b0 otherwise
 32437 INC A         ; Set the zero flag if we're in demo mode
 32438 LD A,63       ; Message #R59932(#b63): DEMO.MODE
 32440 JR Z,32478    ; Jump if we're in demo mode
; A real game is in progress. First, figure out what to print in the bottom row
; of the lesson box (the room name, 'LIBRARY', 'PLAYTIME', 'ASSEMBLY' or
; 'DINNER').
@ssub=LD L,32736%256
 32442 LD L,224      ; #REGhl=#R32736 (lesson descriptor)
 32444 LD A,(HL)     ; Pick this up in #REGa
 32445 AND 15        ; Keep only the room identifier bits
 32447 LD E,32       ; #b32 is the ASCII code for SPACE
 32449 ADD A,126     ; {#REGd=message number for the text to go on the bottom
 32451 LD D,A        ; row of the lesson box}
 32452 CP 131        ; Is it PLAYTIME (#R61015(#b128)), ASSEMBLY
                     ; (#R61024(#b129)) or DINNER (#R61033(#b130))?
 32454 JR C,32470    ; Jump if so
 32456 LD E,135      ; Message #R61082(#b135): REVISION
 32458 JR Z,32470    ; Jump if it's REVISION LIBRARY (D=#R61040(#b131):
                     ; LIBRARY)
; Next, figure out what to print (if anything) in the top row of the lesson box
; (the teacher's name, or 'REVISION').
 32460 LD A,(HL)     ; #REGa=lesson descriptor
 32461 AND 240       ; {Keep only the teacher-identifying bits and push them
 32463 RLCA          ; into bits 0-3
 32464 RLCA          ;
 32465 RLCA          ;
 32466 RLCA          ; }
 32467 ADD A,20      ; {#REGe=#R61280(#b22), #R61293(#b23) or #R61306(#b24)
 32469 LD E,A        ; (teacher's name)}
; Now we can construct message #R59928(#b16) (teacher/room) ready for printing.
@ssub=LD L,32648%256
*32470 LD L,136      ; {Place the teacher message number (or ASCII code for
 32472 LD (HL),E     ; SPACE) in #R32648}
@ssub=LD L,32650%256
 32473 LD L,138      ; {Place the room message number in #R32650
 32475 LD (HL),D     ; }
 32476 LD A,16       ; Message #R59928(#b16): teacher/room
; This entry point is used by the routine at #R23907.
@nowarn
*32478 LD DE,23216   ; #REGde=base display file address for the lesson box
 32481 LD C,87       ; INK 7: PAPER 2: BRIGHT 1
 32483 CALL 27462    ; Print the lesson
@keep
 32486 LD BC,32784   ; {Set the parameters for the bell sound effect
 32489 LD D,C        ;
 32490 LD A,1        ; }
 32492 JP 29836      ; Ring the bell

; Unused
@rsub=!32495
u32495 DEFB 120,120

; Make BOY WANDER write on a blackboard
;
; Used by BOY WANDER's command lists #R58768(#b32), #R59488(#b46),
; #R59519(#b50), #R59550(#b54) and #R59584(#b56). Makes BOY WANDER write on the
; blackboard he's standing next to unless a certain event has already happened
; or the board is dirty.
;
; H #b206 (BOY WANDER)
@label=BWWRITE
c32497 CALL 25213    ; Collect the event identifier parameter from the command
                     ; list
 32500 CALL 31887    ; Check whether the event (the arrival of a teacher or the
                     ; end of the lesson) has happened
@nowarn
 32503 LD BC,26752   ; {Redirect control to the routine at #R26752 (write on
 32506 CALL Z,25503  ; board) if the event has not happened, then return to
                     ; #R32509 (below)}
@label=*
*32509 JP 25484      ; Move to the next command in the command list

@org
; Screen refresh buffer (SRB)
;
; Used by the routines at #R24880, #R25248, #R26380, #R26849 and #R26910. Each
; byte of the SRB corresponds to a segment of 8 character squares on the
; screen, the leftmost of which will be at x=0, x=8, x=16 or x=24. Each bit set
; in an SRB byte corresponds to a character square in the segment that needs
; refreshing. Bit 7 corresponds to the leftmost character square in the
; segment, bit 0 to the rightmost character square.
@label=SRB
g32512 DEFS 84

; Buffer for the Blue Room blackboard
;
; Used by the routines at #R24133, #R24175, #R26513, #R26639 and #R26752.
@label=BRBRDBUF
g32596 DEFB 0        ; Next clean pixel column (0-127)
 32597 DEFB 0        ; Number of the character who last wrote on the board
 32598 DEFS 4        ; Characters written by ERIC

; Buffer for the Yellow Room blackboard
;
; Used by the routines at #R24133, #R24175, #R26513, #R26639 and #R26752.
@label=YRBRDBUF
g32602 DEFB 0        ; Next clean pixel column (0-127)
 32603 DEFB 0        ; Number of the character who last wrote on the board
 32604 DEFS 4        ; Characters written by ERIC

; Buffer for the blackboard in the top-floor classroom of the girls' skool
;
; Used by the routines at #R24133, #R24175, #R26513, #R26639 and #R26752.
@label=TFBRDBUF
g32608 DEFB 0        ; Next clean pixel column (0-127)
 32609 DEFB 0        ; Number of the character who last wrote on the board
 32610 DEFS 4        ; Characters written by ERIC

; Buffer for the Science Lab blackboard
;
; Used by the routines at #R24133, #R24175, #R26513, #R26639 and #R26752.
@label=SLBRDBUF
g32614 DEFB 0        ; Next clean pixel column (0-127)
 32615 DEFB 0        ; Number of the character who last wrote on the board
 32616 DEFS 4        ; Characters written by ERIC

; Buffer for the blackboard in the middle-floor classroom of the girls' skool
;
; Used by the routines at #R24133, #R24175, #R26513, #R26639 and #R26752.
@label=MFBRDBUF
g32620 DEFB 0        ; Next clean pixel column (0-127)
 32621 DEFB 0        ; Number of the character who last wrote on the board
 32622 DEFS 4        ; Characters written by ERIC

; Unused
g32626 DEFS 14

; Various flags
;
; Various status flags for the current lesson.
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit | =h Meaning if set }
; { 0      | End of lesson/playtime (always reset) }
; { 1      | MR WACKER is looking for ERIC to expel him (see #R62770) }
; { 2      | MR WACKER is looking for the truant ERIC (see #R62668) }
; { 3      | EINSTEIN is talking (set and checked by #R61463; reset and checked
;            by #R61440) }
; { 4      | Lines reprimand toggle for the teacher fetching ERIC (see #R32062)
;            }
; { 5      | MISS TAKE is chasing ERIC (see #R32062) }
; { 6      | ERIC should be in class (set by #R61696), dinner (set by #R61631)
;            or assembly (set by #R61658) (checked by #R32062) }
; { =r3 7  | Kids should be sitting in the assembly hall (set by #R61658; reset
;            by #R62032; checked by #R27904 and #R32062, and by command lists
;            #R57942(#b20), #R59151(#b40) and #R58862(#b88)) }
; {          ERIC's teacher's next absence reprimand should be STAY TILL I
;            DISMISS YOU instead of DON'T BE LATE AGAIN (set and checked by
;            #R61696) }
; {          ERIC should be sitting down in class (set by #R61696; checked by
;            #R32062) }
; TABLE#
@label=LFLAGS
g32640 DEFB 0

; Lesson signal flags
;
; Used by the classroom-based #R59392(command lists) to indicate that or check
; whether a teacher has arrived at the classroom door to start the lesson.
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit(s) | =h Meaning if set }
; { 0         | Teacher has arrived at the top-floor classroom in the girls'
;               skool }
; { 1         | Teacher has arrived at the middle-floor classroom in the girls'
;               skool }
; { 2         | Teacher has arrived at the Blue Room }
; { 3         | Teacher has arrived at the Yellow Room }
; { 4         | Teacher has arrived at the Science Lab }
; { 5-7       | Unused }
; TABLE#
@label=LSIGS
g32641 DEFB 0

; Unused
@label=GSBUNUSED
g32642 DEFS 6

; Message 6: '{teacher}'
;
; Used by the routine at #R32433 when printing the top line of text in the
; lesson box; it is a submessage of message #R59928(#b16).
@label=MSG006
t32648 DEFB 0        ; The teacher message number (#R61280(#b22),
                     ; #R61293(#b23), #R61306(#b24)) or #b32 (' ': space) goes
                     ; here
 32649 DEFB 0        ; End marker

; Message 5: '{lines recipient}/combination number or letter/{room}'
;
; Used by the routines at #R29716 (as a submessage of message #R59886(#b13)),
; #R29896 (as a submessage of message #R59897(#b14)) and #R32433 (as a
; submessage of message #R59928(#b16)).
@label=MSG005
t32650 DEFB 0        ; The message number of the lines recipient
                     ; (#R61345(#b27), #R61358(#b28), #R61371(#b29),
                     ; #R61384(#b30), #R61397(#b31)), the combination
                     ; letter/number, or the room message number
                     ; (#R61015(#b128), #R61024(#b129), #R61033(#b130),
                     ; #R61040(#b131), #R61048(#b132), #R61060(#b133),
                     ; #R61070(#b134)) goes here
 32651 DEFB 0        ; End marker

; Message 10: '{mountain}/{king}/{animal}/{verb}'
;
; Used by the routines at #R61696 and #R62032; it is a submessage of messages
; #R65136(#b74), #R61418(#b75), #R64633(#b78), #R65531(#b79), #R64608(#b82),
; #R65392(#b83) and #R60861(#b96).
@label=MSG010
t32652 DEFB 0        ; The message number for the mountain, king, animal or
                     ; verb goes here
 32653 DEFB 0        ; End marker

; Message 11: '{country}/{year}/{habitat}/{noun}'
;
; Used by the routines at #R61696 and #R62032; it is a submessage of messages
; #R65268(#b73), #R65232(#b76), #R65275(#b77), #R65512(#b80), #R61425(#b81),
; #R65488(#b84) and #R60861(#b96).
@label=MSG011
t32654 DEFB 0        ; The message number for the country, year (last three
                     ; digits), habitat or noun goes here
 32655 DEFB 0        ; End marker

; Message 7: '{grassee}'
;
; #IF({fix}<3)//Used by the routine at #R61696 to hold the character number of
; whoever is being grassed up by EINSTEIN for writing on the board (#b206=BOY
; WANDER, or #b210=ERIC); it is a submessage of message #R60668(#b88). Note
; that storing the character number (#b206 or #b210) here is a mistake; it
; should be the message number of the character's name (#R61345(#b27) or
; #R61397(#b31)) instead. In any case, this message (along with parent message
; #R60668(#b88)) is never used, because of a #BUG#noBlackboardTales(bug) in the
; section of code at #R61852./Used by the routine at #R61696 to hold the
; message number of the name of the character who is being grassed up by
; EINSTEIN for writing on the board (#R61345(#b27)=BOY WANDER, or
; #R61397(#b31)=ERIC); it is a submessage of message #R60668(#b88).//
@label=MSG007
t32656 DEFB 0
 32657 DEFB 0        ; End marker

; Unused
g32658 DEFS 10

; Bike and Science Lab storeroom combinations
;
; Used by the routines at #R24028 and #R62910.
@label=COMBOS
g32668 DEFS 4        ; The bike combination digits are stored here
 32672 DEFS 4        ; The storeroom combination letters are stored here

; Copy of the bike and Science Lab storeroom combinations
;
; Used by the routine at #R30034. The digits or letters discovered by ERIC have
; bit 7 set (to indicate that he has already scored points for doing so).
@label=COMBOS2
g32676 DEFS 4        ; A copy of the bike combination digits is stored here
@label=COMBOS2SLS
 32680 DEFS 4        ; A copy of the storeroom combination letters is stored
                     ; here

; Unused
g32684 DEFS 43

; Various ERIC-related data (1)
;
; Used in conjunction with the contents of #R32728. Holds the ASCII code of the
; last key pressed while writing on a blackboard (see #R24175), or the descent
; table identifier (#b252-#b255; see #R64460), or the LSB of the address of a
; routine (or an entry point to a routine) for dealing either with ERIC or with
; the result of an action by ERIC (see #R57669):
; .
; #TABLE(default,centre,:w,centre)
; { =h Address | =h Purpose | =h Placed here by }
; { #R23877    | Remove the water pistol from the inventory | #R23863 }
; { #R24272    | Deal with ERIC when he's raising his fist | =r2 #R24263 }
; { #R24290    | Deal with ERIC when he's lowering his fist }
; { #R24304    | Deal with ERIC when he's raising the catapult | =r3 #R24296 }
; { #R24314    | Launch a pellet from ERIC's catapult }
; { #R24324    | Deal with ERIC after he's launched a catapult pellet }
; { #R24458    | Deal with ERIC when he's kissing HAYLEY | #R24348 }
; { #R31462    | Release some mice | #R57893 }
; { #R31573    | Make ERIC catch a mouse or frog (if present) | #R57637 }
; { #R63586    | Deal with a dropped stinkbomb | #R28992 }
; { #R63915    | Control water fired from the pistol | #R63898 }
; TABLE#
@label=ERICDATA1
g32727 DEFB 0

; Various ERIC-related data (2)
;
; Used in conjunction with the contents of #R32727. Holds the identifier of the
; blackboard ERIC wrote on (see #R24133), or the descent table entry pointer
; (#b160-#b180; see #R64460), or the MSB of the address of a routine (or an
; entry point to a routine) for dealing either with ERIC or with the result of
; an action by ERIC (see #R57669, and #R32727 for a list of the routine and
; entry point addresses).
@label=ERICDATA2
g32728 DEFB 0

; Last value seen in the system variable FRAMES
;
; Stores the value of the LSB of the system variable FRAMES as it stood at the
; end of the last pass through the main loop (see #R63210).
@label=LFRAMES
g32729 DEFB 0

; ID of the desk containing the water pistol
;
; Used by the routine at #R62178.
@label=WPDESKID
g32730 DEFB 0

; ID of the desk containing the stinkbombs
;
; Used by the routine at #R62178.
@label=SBDESKID
g32731 DEFB 0

; ERIC's stand-up delay counter
;
; Used by the routine at #R62178 while in demo mode.
@label=UPDELAY
g32732 DEFB 0

; ERIC's knockout delay counter
;
; Used by the routine at #R62094.
@label=KODELAY
g32733 DEFB 0

; Game mode indicator
;
; Used by the routines at #R23907, #R32433, #R62178 and #R63189. Holds #b255 if
; in demo mode, #b0 if a game is in progress, or #b1 if ERIC has just opened
; the safe.
@label=GAMEMODE
g32734 DEFB 0

; Current lesson number
;
; Used by the routine at #R63309. Holds the index (#b192-#b255) into the
; #R46528(main timetable). Adjusted by the routine at #R62910 before starting a
; new game.
@label=LESSONNO
g32735 DEFB 0

; Lesson descriptor
;
; Used by the routines at #R32021, #R32062, #R32433, #R61696 and #R63309. The
; room ID is stored in bits 0-3, and the teacher ID in bits 4-7. See the list
; of lesson descriptors at #R53797.
@label=LESSONDESC
g32736 DEFB 0

; Number of mice caught
;
; Used by the routines at #R31462, #R31502 and #R31573.
@label=MOUSETALLY
g32737 DEFB 0

; Kiss counter
;
; Used by the routines at #R24348 (which decreases the counter by 7 whenever
; ERIC kisses HAYLEY) and #R30102 (which decreases the counter by 1 whenever
; HAYLEY is knocked over). Initialised to #b40 by the routine at #R62910.
@label=KISSCOUNT
g32738 DEFB 0

; Lesson clock
;
; Decremented in the main loop at #R63210. When it reaches 0, it is reset to
; #w4096 by the routine at #R63309. It is also checked by the routines at
; #R30102, #R32062, #R61555, #R61631 and #R61658, and modified by the routines
; at #R30102, #R62032, #R62770, #R62815 and #R62910.
@label=CLOCK
g32739 DEFW 0

; Score
;
; Used by the routine at #R29621.
@label=SCORE
g32741 DEFW 0

; Lines total
;
; Used by the routines at #R24348 and #R29643.
@label=LINES
g32743 DEFW 0

; Hi-score
;
; Used by the routine at #R62815.
@label=HISCORE
g32745 DEFW 0

; Inventory flags
;
; Used by the routine at #R31746. Bit set=got, bit reset=haven't.
; .
; #TABLE(default,centre,:w,,,:w)<nowrap>
; { =h Bit | =h Item                                  | =h Set  | =h Reset | =h Checked }
; { 0      | Safe key                                 | #R30804 |          | #R23907, #R30804 }
; { 1      | Science Lab storeroom key                | #R24028 |          | #R24028, #R29681, #R30229, #R31254 }
; { 2      | Frog                                     | #R31733 | #R29462  | #R29462 }
; { 3      | Water pistol (with water if bit 4 reset) | #R62178 | #R23863  | #R23863, #R23907, #R63898 }
; { 4      | Water pistol with sherry                 | #R23907 | #R23863  | #R23863, #R23907, #R63898, #R64077 }
; { 5      | 3 stinkbombs                             | #R62178 | #R63586  | }
; { 6      | 2 stinkbombs                             | #R62178 | #R63586  | }
; { 7      | 1 stinkbomb                              | #R62178 | #R63586  | #R28992 }
; TABLE#
@label=INVENTORY
g32747 DEFB 0

; Input device indicator
;
; Set by the routine at #R21664, and checked by the routine at #R29118. Holds 0
; if the keyboard is being used, or 1 if the Kempston joystick is being used.
@label=KEMPSTON
g32748 DEFB 0

; ERIC's secondary status flags
;
; Used by the routine at #R63405 to decide how to deal with ERIC when bit 1 is
; set at #R32763.
; .
; #TABLE(default,centre,:w,centre)<nowrap>
; { =h Bit | =h Meaning if set                                        | =h Routine }
; { 0      | ERIC is riding the bike                                  | #R29278 }
; { 1      | ERIC is standing on a plant or plant pot                 | #R64316 }
; { 2      | ERIC is stepping off a plant, a plant pot, or the stage  | #R64259 }
; { 3      | ERIC is falling and will land on his feet                | #R64416 }
; { 4      | ERIC is falling and will not land on his feet            | #R64460 }
; { 5      | ERIC has stepped out of the top-floor window             | #R23859 }
; { 6      | ERIC is falling from the saddle of the bike              | #R23843 }
; { 7      | ERIC is standing on the saddle of the bike               | #R29462 }
; TABLE#
@label=STATUS2
g32749 DEFB 0

; Last key pressed while riding the bike
;
; Used by the routine at #R29278. Holds the value from the #R58624(keypress
; offset table) corresponding to the last key pressed while riding the bike.
@label=LBIKEKEY
g32750 DEFB 0

; Counter that determines the bike's speed while ERIC's on it
;
; Used by the routine at #R29278.
@label=BIKESPEED
g32751 DEFB 0

; Bike's momentum
;
; Used by the routine at #R29278.
@label=BIKEP
g32752 DEFB 0

; Last key pressed
;
; Set by the routine at #R63210; checked by the routines at #R28114 and
; #R28216. Holds the value from the #R58624(keypress offset table)
; corresponding to the last key pressed.
@label=KEYCODE
g32753 DEFB 0

; ERIC's midstride/mid-action timer
;
; Zero unless ERIC is midstride (see #R28114) or mid-action (see #R57669); if
; non-zero, the value is copied to the main action timer at #R32755 after ERIC
; has been moved from the midstride or mid-action position (see #R63210).
@label=ERICTIMER2
g32754 DEFB 0

; ERIC's main action timer
;
; Decremented by the main loop at #R63210; when it becomes zero, the keyboard
; is checked and ERIC is moved accordingly. Also used by many routines that
; deal with ERIC to decide when to change ERIC's animatory state or location,
; or when to check the keyboard.
@label=ERICTIMER
g32755 DEFB 0

; Door/window status flags
;
; Used by the routine at #R28736. Bit set=open, bit reset=closed.
; .
; #TABLE(default,centre)
; { =h Bit | =h Door/window }
; { 0      | Left study door }
; { 1      | Right study door }
; { 2      | Science Lab storeroom door }
; { 3      | Boys' skool door }
; { 4      | Skool gate }
; { 5      | Drinks cabinet door }
; { 6      | Top-floor window }
; { 7      | Middle-floor window }
; TABLE#
@label=DOORFLAGS
g32756 DEFB 0

; Character number of the teacher who last gave ERIC lines
;
; Used by the routine at #R32062.
@label=LASTLINES
g32757 DEFB 0

; LSB of the lines-giving delay counter
;
; Used by the routine at #R32032. Also used by the routine at #R28877 when
; timing the closing of the left study, right study and Science Lab storeroom
; doors.
@label=LINESDELAY1
g32758 DEFB 0

; MSB of the lines-giving delay counter
;
; Used by the routines at #R32032 and #R32062.
@label=LINESDELAY2
g32759 DEFB 0

; LSB of the address of the SRB byte corresponding to the lip of the speech
; bubble
;
; Used by the routine at #R26958. Holds 0 if no one's speaking.
@label=LIPSRBLSB
g32760 DEFB 0

; Speech bubble lip SRB bit
;
; The bit set at this byte indicates the bit of the SRB byte (referred to by
; #R32760) that corresponds to the lip of the speech bubble (see #R26958).
@label=LIPSRBBIT
g32761 DEFB 0

; Leftmost column of the play area on screen the last time the SRB was updated
; for the speech bubble
;
; Holds the column of the play area that was at the far left of the screen the
; last time the routine at #R26849 (update the SRB for the speech bubble) was
; called.
@label=SBLEFTCOL
g32762 DEFB 0

; ERIC's primary status flags
;
; Used by the routine at #R63405 to decide how to deal with ERIC.
; .
; #TABLE(default,centre,:w,centre)
; { =h Bit | =h Meaning if set                             | =h Routine }
; { 0      | ERIC is jumping                               | #R23907 }
; { 1      | Examine the secondary status flags at #R32749 | }
; { 2      | ERIC is sitting or lying down                 | #R62178 }
; { =r4 3  | ERIC is bending over                          | =r4 #R57669 }
; {          ERIC is dropping a stinkbomb }
; {          ERIC is firing the water pistol }
; {          ERIC is moving forward as if to kiss (but will miss) }
; { 4      | ERIC is writing on a blackboard               | #R24175 }
; { =r3 5  | ERIC is firing the catapult                   | =r3 #R24237 }
; {          ERIC is hitting }
; {          ERIC is kissing HAYLEY }
; { 6      | MR WACKER is expelling ERIC                   | }
; { 7      | ERIC has been knocked over                    | #R62094 }
; TABLE#
@label=STATUS
g32763 DEFB 0

; Number of the character just moved (#b183-#b214)
;
; Used by the routine at #R25296.
@label=LASTCHAR
g32764 DEFB 0

; Random number seed
;
; Used by the routine at #R25233.
@label=RANDSEED
@keep
g32765 DEFW 36035    ; This is the initial value of the seed

; x-coordinate of the leftmost column of the play area on screen
;
; Modified by the routines at #R25026 and #R25080.
@label=LEFTCOL
g32767 DEFB 0

@org
; Skool graphic data (tiles #b0-#b255, base page #b128)
;
; Used by the routine at #R24684. Tiles #b0-#b79 are used by the blackboards:
; .
; #TABLE(default,centre)
; { =h Tiles  | =h Blackboard }
; { #b0-#b15  | Blue Room }
; { #b16-#b31 | Yellow Room }
; { #b32-#b47 | Top-floor room in the girls' skool }
; { #b48-#b63 | Science Lab }
; { #b64-#b79 | Middle-floor room in the girls' skool }
; TABLE#
@label=SGD128
b32768 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 32784 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 32800 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 32816 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 32832 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 32848 DEFB 255,0,255,255,255,0,1,1,255,255,1,31,30,63,0,36
 32864 DEFB 36,255,127,255,0,128,129,128,255,62,0,129,255,0,8,206
 32880 DEFB 2,254,0,8,56,32,63,8,14,255,2,0,128,0,255,255
 32896 DEFB 255,255,128,24,248,193,193,255,255,255,179,192,1,255,254,0
 32912 DEFB 16,255,0,0,144,255,112,0,16,252,53,31,16,1,0,255
 32928 DEFB 0,8,1,0,252,255,128,255,0,31,255,31,1,223,215,215
 32944 DEFB 215,255,128,255,255,255,255,255,255,255,0,255,255,255,255,0
 32960 DEFB 255,255,255,255,255,255,255,255,200,104,111,104,255,255,255,255
 32976 DEFB 0,252,254,245,245,245,255,255,129,129,135,159,255,191,191,191
 32992 DEFB 255,255,128,191,255,253,250,250,255,255,215,225,2,3,255,255
 33008 DEFB 255,0,64,255,6,253,0,2,254,255,207,228,244,244,244,3
 33024 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33040 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33056 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33072 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33088 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33104 DEFB 255,0,127,31,0,0,3,1,255,1,1,23,30,64,0,36
 33120 DEFB 39,247,127,0,0,129,128,128,247,62,255,129,247,0,200,4
 33136 DEFB 2,255,0,8,16,32,255,8,4,254,2,0,128,0,23,239
 33152 DEFB 128,191,128,24,249,193,65,1,255,128,179,192,0,0,131,0
 33168 DEFB 16,0,231,0,16,0,243,0,16,7,53,31,16,0,0,128
 33184 DEFB 0,8,1,0,20,128,0,128,0,15,255,15,1,208,208,208
 33200 DEFB 208,255,0,0,0,0,0,255,0,0,255,0,0,0,255,126
 33216 DEFB 0,0,0,255,0,0,0,255,200,104,104,111,0,0,0,0
 33232 DEFB 255,4,7,5,5,5,16,0,129,129,135,191,128,128,128,128
 33248 DEFB 0,0,143,191,255,253,250,251,0,255,215,225,3,251,0,0
 33264 DEFB 255,255,127,0,5,253,255,254,254,255,207,100,52,52,52,3
 33280 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33296 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33312 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33328 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33344 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33360 DEFB 255,0,63,7,0,0,7,1,255,1,1,31,30,128,224,36
 33376 DEFB 39,255,127,0,0,129,128,128,255,62,0,129,255,0,200,15
 33392 DEFB 2,255,0,8,248,32,255,8,15,253,2,255,128,131,23,255
 33408 DEFB 128,159,128,24,251,193,193,1,255,191,161,64,0,255,139,0
 33424 DEFB 16,255,231,0,16,255,240,0,16,245,53,63,16,0,0,128
 33440 DEFB 0,12,1,130,20,128,0,255,0,31,127,15,1,215,215,215
 33456 DEFB 208,208,0,255,255,255,255,0,255,255,165,255,255,255,128,66
 33472 DEFB 255,255,255,0,255,255,255,223,200,104,111,111,255,255,255,255
 33488 DEFB 255,252,245,245,245,5,255,255,129,131,143,191,191,191,191,128
 33504 DEFB 255,255,143,191,255,251,248,251,255,255,183,193,3,251,255,255
 33520 DEFB 192,64,127,255,5,253,0,255,254,223,207,100,244,244,52,2
 33536 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33552 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33568 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33584 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33600 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33616 DEFB 255,0,31,1,0,0,15,1,255,1,1,12,30,255,32,36
 33632 DEFB 63,28,127,255,0,129,128,128,28,62,0,129,0,0,200,8
 33648 DEFB 2,255,0,8,8,32,255,8,8,251,2,255,128,135,23,0
 33664 DEFB 128,143,128,24,255,1,193,1,254,191,158,64,0,254,199,0
 33680 DEFB 16,0,195,0,16,127,248,0,16,245,117,63,16,0,0,128
 33696 DEFB 0,15,1,134,20,128,0,0,240,63,127,15,1,215,215,213
 33712 DEFB 208,208,0,1,245,253,117,0,64,255,165,0,119,255,128,66
 33728 DEFB 85,175,87,0,215,170,255,223,200,104,104,111,80,207,175,254
 33744 DEFB 255,0,245,245,117,5,0,0,129,131,143,191,175,181,170,128
 33760 DEFB 255,174,143,191,255,251,255,255,238,255,119,193,255,255,191,255
 33776 DEFB 192,64,127,175,5,254,0,255,254,223,207,100,244,180,52,3
 33792 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33808 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33824 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33840 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33856 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 33872 DEFB 255,0,15,0,0,0,31,1,127,1,1,28,30,255,60,36
 33888 DEFB 63,62,127,255,0,129,128,128,30,62,255,255,0,0,200,8
 33904 DEFB 2,255,0,8,8,32,255,8,8,251,2,255,128,139,23,0
 33920 DEFB 128,135,128,24,255,1,193,1,255,191,128,255,0,248,239,255
 33936 DEFB 16,0,129,0,16,31,252,0,16,245,245,255,31,0,0,255
 33952 DEFB 248,16,1,138,20,128,255,0,48,127,63,7,129,213,213,213
 33968 DEFB 208,240,0,0,245,85,117,0,128,185,102,0,170,2,128,36
 33984 DEFB 85,175,85,0,85,170,85,223,200,104,104,239,32,74,169,74
 34000 DEFB 255,0,85,149,85,5,63,254,129,131,143,191,170,181,170,128
 34016 DEFB 64,174,159,255,255,251,250,255,85,255,119,131,3,255,170,157
 34032 DEFB 192,127,255,175,5,255,255,254,254,223,207,100,180,180,52,2
 34048 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34064 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34080 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34096 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34112 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34128 DEFB 255,0,7,0,0,0,63,1,31,1,1,30,30,255,36,36
 34144 DEFB 255,127,127,255,0,129,128,128,62,62,129,0,0,0,200,7
 34160 DEFB 2,255,0,8,240,32,255,8,7,251,2,255,128,139,23,0
 34176 DEFB 128,131,128,24,255,1,193,1,255,161,191,255,0,251,255,255
 34192 DEFB 16,24,255,0,31,223,255,240,31,245,245,255,0,0,0,255
 34208 DEFB 8,32,1,138,20,128,255,0,80,127,63,7,129,213,213,213
 34224 DEFB 208,255,0,0,245,85,117,255,0,179,60,0,213,4,128,24
 34240 DEFB 85,173,85,0,85,170,85,207,200,104,104,255,0,74,173,74
 34256 DEFB 255,0,85,181,85,5,32,2,129,131,143,255,170,181,170,128
 34272 DEFB 32,174,159,255,254,251,251,255,171,247,240,130,251,255,170,205
 34288 DEFB 128,127,255,175,5,255,255,252,255,223,199,52,180,180,52,2
 34304 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34320 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34336 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34352 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34368 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34384 DEFB 255,0,3,0,0,0,127,1,7,1,1,30,14,193,39,36
 34400 DEFB 255,127,127,129,128,129,128,128,62,24,129,0,0,0,207,2
 34416 DEFB 2,255,0,248,32,32,255,15,2,251,2,252,128,11,23,0
 34432 DEFB 128,129,192,24,255,1,193,1,255,161,128,255,0,251,0,255
 34448 DEFB 95,0,0,240,0,223,0,80,64,245,5,255,64,0,63,255
 34464 DEFB 72,64,1,10,20,128,255,0,144,255,63,3,193,213,213,213
 34480 DEFB 208,255,0,0,213,85,85,255,0,167,60,0,234,137,128,36
 34496 DEFB 85,173,85,0,85,170,85,207,200,104,104,255,0,74,172,74
 34512 DEFB 255,0,85,53,85,5,32,2,129,135,159,255,170,181,170,128
 34528 DEFB 145,170,159,255,254,251,251,255,87,231,240,2,251,255,170,229
 34544 DEFB 128,127,255,171,7,255,255,252,255,223,199,52,180,180,52,2
 34560 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34576 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34592 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34608 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34624 DEFB 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
 34640 DEFB 255,0,1,0,0,255,255,1,1,1,255,30,6,129,36,36
 34656 DEFB 255,127,28,1,128,129,128,128,62,0,129,0,0,15,192,2
 34672 DEFB 2,255,248,0,32,32,255,0,2,251,3,224,127,127,251,0
 34688 DEFB 255,128,56,24,255,1,193,255,255,161,255,255,0,253,255,255
 34704 DEFB 128,129,255,144,0,191,255,144,128,245,255,255,128,255,64,255
 34720 DEFB 136,128,0,126,248,128,255,0,144,255,31,3,193,213,213,213
 34736 DEFB 208,255,0,0,213,85,85,255,0,175,126,0,245,83,128,126
 34752 DEFB 85,173,85,0,85,170,85,207,232,104,104,255,0,74,174,74
 34768 DEFB 255,0,85,117,85,5,63,254,129,135,159,255,170,181,170,128
 34784 DEFB 202,170,159,255,253,251,251,255,175,231,224,2,251,255,170,245
 34800 DEFB 128,127,255,171,2,255,255,255,255,207,231,244,180,180,52,2

; Skool graphic data (tiles #b0-#b255, base page #b136)
;
; Used by the routine at #R24684.
b34816 DEFB 255,1,127,255,31,63,0,255,255,6,224,255,252,255,0,63
 34832 DEFB 255,0,134,255,0,30,255,0,136,147,255,0,192,141,255,0
 34848 DEFB 1,20,247,0,3,128,128,225,248,0,252,0,0,0,0,6
 34864 DEFB 253,17,19,21,21,53,181,0,1,15,12,252,0,0,127,255
 34880 DEFB 0,0,255,255,0,3,147,255,0,0,74,70,255,0,127,0
 34896 DEFB 149,49,255,0,254,0,123,96,255,0,0,253,141,0,128,224
 34912 DEFB 252,15,63,255,207,140,152,255,68,116,52,52,12,12,31,31
 34928 DEFB 159,0,0,64,127,64,64,0,0,2,254,2,255,191,191,255
 34944 DEFB 4,252,236,236,236,255,15,12,172,175,143,143,0,0,255,253
 34960 DEFB 253,0,3,56,0,255,128,131,3,255,252,255,129,0,248,0
 34976 DEFB 255,9,192,0,192,1,131,255,7,7,31,31,24,223,0,0
 34992 DEFB 127,80,223,223,0,255,254,254,0,240,82,6,64,1,1,0
 35008 DEFB 0,0,255,48,48,62,62,177,0,255,255,79,96,97,254,14
 35024 DEFB 14,8,255,1,193,213,193,255,0,0,128,159,151,255,7,68
 35040 DEFB 72,0,252,248,255,1,32,8,2,1,255,192,0,96,224,224
 35056 DEFB 255,255,65,16,4,2,255,35,63,1,0,0,0,255,1,161
 35072 DEFB 129,255,127,255,63,255,0,128,255,133,250,255,2,255,0,79
 35088 DEFB 7,0,252,240,0,18,14,0,146,186,248,0,127,29,63,247
 35104 DEFB 255,10,143,0,3,224,128,158,250,0,7,0,255,255,0,135
 35120 DEFB 253,17,21,21,85,181,253,0,1,12,13,255,254,0,127,0
 35136 DEFB 255,192,255,0,239,3,147,0,255,0,74,70,0,127,255,0
 35152 DEFB 149,49,0,0,22,0,113,224,0,253,0,253,141,255,128,240
 35168 DEFB 252,15,191,255,207,152,152,247,68,52,180,244,12,12,31,31
 35184 DEFB 159,127,127,64,64,64,64,254,254,2,2,2,128,128,128,255
 35200 DEFB 4,12,12,12,12,239,15,12,172,172,140,141,126,0,1,5
 35216 DEFB 133,0,3,248,0,255,128,131,3,255,254,255,129,255,240,0
 35232 DEFB 255,9,224,0,192,2,131,247,7,7,31,24,24,255,126,0
 35248 DEFB 192,80,223,223,0,0,254,254,0,16,83,8,64,0,0,126
 35264 DEFB 0,255,255,48,48,62,62,113,0,1,254,80,96,129,252,14
 35280 DEFB 14,8,253,1,205,213,193,255,0,0,128,246,246,199,7,68
 35296 DEFB 72,0,4,8,255,0,32,8,2,1,135,224,0,239,239,239
 35312 DEFB 255,1,64,16,4,2,255,59,63,1,255,255,255,255,0,161
 35328 DEFB 127,255,127,31,63,127,255,255,255,133,250,255,255,255,0,3
 35344 DEFB 255,0,224,255,0,18,255,0,151,170,255,0,120,21,255,247
 35360 DEFB 1,6,255,0,2,144,128,255,250,0,255,0,255,255,0,133
 35376 DEFB 253,17,21,21,245,181,253,0,1,143,13,255,254,3,0,255
 35392 DEFB 0,48,0,255,40,3,19,255,1,0,74,127,255,127,255,0
 35408 DEFB 149,255,255,255,22,0,96,255,255,253,0,253,253,0,128,240
 35424 DEFB 254,255,191,239,207,152,152,231,68,244,180,244,12,12,31,31
 35440 DEFB 159,64,64,64,64,64,64,2,2,2,2,2,191,191,191,255
 35456 DEFB 4,236,236,236,12,239,15,28,172,172,143,140,66,0,1,253
 35472 DEFB 5,0,0,56,0,128,128,131,3,255,254,129,129,2,224,0
 35488 DEFB 255,5,224,0,0,3,131,231,7,7,31,24,24,255,74,0
 35504 DEFB 64,80,223,223,0,0,254,254,0,16,86,48,64,0,0,102
 35520 DEFB 0,0,255,48,48,62,62,17,0,1,254,80,96,1,240,14
 35536 DEFB 14,8,249,1,213,213,193,255,0,0,128,149,151,7,7,68
 35552 DEFB 72,0,248,255,255,0,16,8,2,0,129,240,0,239,235,239
 35568 DEFB 255,1,32,16,4,129,255,55,63,1,253,235,231,255,0,161
 35584 DEFB 64,255,0,31,63,128,255,128,0,133,6,0,1,0,0,31
 35600 DEFB 0,0,252,0,0,18,0,0,151,169,0,0,72,255,0,247
 35616 DEFB 0,128,0,1,2,128,191,0,6,128,0,0,0,0,0,133
 35632 DEFB 249,17,21,21,53,181,253,0,1,12,13,255,254,12,255,0
 35648 DEFB 0,12,255,0,40,3,243,0,1,255,127,0,0,127,255,255
 35664 DEFB 255,0,0,255,22,255,224,0,0,253,255,253,1,0,192,240
 35680 DEFB 62,255,191,239,207,152,152,231,68,52,180,244,12,12,31,31
 35696 DEFB 223,64,64,64,64,64,64,2,2,2,2,2,191,191,191,254
 35712 DEFB 4,236,236,172,12,207,15,60,172,140,141,140,70,60,1,133
 35728 DEFB 5,0,0,0,0,128,128,131,3,255,255,129,129,2,192,1
 35744 DEFB 255,3,240,0,0,2,131,199,7,23,31,24,24,255,102,0
 35760 DEFB 95,80,223,255,0,255,254,255,0,208,90,64,64,0,0,66
 35776 DEFB 0,0,255,48,48,62,62,13,0,1,252,80,64,1,224,14
 35792 DEFB 14,8,241,3,213,213,193,254,0,0,128,243,246,7,7,68
 35808 DEFB 72,0,8,1,1,0,16,4,2,0,128,248,31,239,234,235
 35824 DEFB 224,1,32,8,4,129,63,48,63,195,244,171,165,0,0,161
 35840 DEFB 64,255,127,31,63,128,0,255,0,133,254,0,255,0,0,31
 35856 DEFB 0,0,242,0,1,18,0,0,146,168,0,0,79,48,0,247
 35872 DEFB 64,64,0,3,2,128,161,0,254,0,0,0,0,0,0,133
 35888 DEFB 249,17,21,21,53,181,253,0,0,13,13,255,254,48,0,255
 35904 DEFB 0,3,0,239,40,3,3,255,1,0,127,255,127,127,255,0
 35920 DEFB 255,255,247,0,22,0,96,255,253,253,1,253,255,255,192,248
 35936 DEFB 62,63,191,239,207,152,152,231,68,180,180,244,12,12,31,31
 35952 DEFB 223,64,64,64,64,64,64,2,2,2,2,2,170,189,170,254
 35968 DEFB 4,172,172,172,12,207,15,44,172,143,140,143,78,34,253,5
 35984 DEFB 253,0,0,0,0,128,128,131,3,255,255,129,129,2,128,7
 36000 DEFB 65,3,240,0,0,2,131,135,7,31,24,24,24,255,114,0
 36016 DEFB 223,80,223,48,0,255,254,0,0,208,90,64,192,0,0,90
 36032 DEFB 1,0,255,48,48,62,62,3,224,1,248,81,128,1,128,14
 36048 DEFB 14,8,225,7,213,217,193,248,0,0,128,147,167,7,7,68
 36064 DEFB 72,0,254,255,255,15,16,4,2,0,128,252,48,232,234,237
 36080 DEFB 224,1,32,8,4,129,15,48,63,70,18,170,165,0,254,127
 36096 DEFB 64,252,128,31,63,0,0,136,0,125,1,0,145,0,14,20
 36112 DEFB 0,0,145,0,7,18,0,0,242,196,0,0,89,32,0,247
 36128 DEFB 224,130,0,3,2,128,161,0,1,0,0,0,0,0,0,125
 36144 DEFB 249,17,21,21,53,181,253,1,0,13,13,255,255,255,0,0
 36160 DEFB 0,255,0,40,40,243,0,1,1,127,70,0,64,127,255,255
 36176 DEFB 59,0,20,0,22,255,96,0,5,252,253,253,0,0,192,248
 36192 DEFB 31,63,255,239,143,152,152,199,68,180,52,252,12,12,31,31
 36208 DEFB 223,64,64,64,64,127,64,2,2,2,2,254,170,173,170,252
 36224 DEFB 4,172,172,172,12,143,15,108,172,157,140,140,60,190,133,5
 36240 DEFB 1,3,0,0,255,128,128,131,3,255,255,129,129,2,0,31
 36256 DEFB 33,129,248,192,0,3,131,7,7,31,24,24,152,255,60,0
 36272 DEFB 223,80,223,16,0,255,254,0,0,209,94,64,48,255,0,60
 36288 DEFB 254,0,254,48,48,62,63,255,16,1,240,81,0,3,0,14
 36304 DEFB 14,248,193,29,213,193,193,240,0,0,128,251,252,7,7,68
 36320 DEFB 72,0,2,2,0,16,16,4,1,0,128,254,127,239,234,237
 36336 DEFB 224,129,32,8,2,157,3,48,63,199,250,170,165,0,255,95
 36352 DEFB 64,240,255,31,63,0,0,162,0,33,255,0,73,0,5,20
 36368 DEFB 0,56,144,0,13,30,0,128,178,196,0,0,105,63,0,255
 36384 DEFB 80,130,0,3,2,128,161,0,255,31,0,255,0,0,128,33
 36400 DEFB 241,17,21,21,53,181,253,1,0,13,13,255,255,0,0,0
 36416 DEFB 0,0,0,40,40,19,0,1,1,78,110,0,64,127,255,159
 36432 DEFB 49,0,20,0,22,127,96,0,5,252,253,141,0,0,224,248
 36448 DEFB 31,31,255,239,143,152,152,199,68,180,52,252,12,28,31,31
 36464 DEFB 223,64,64,127,64,0,64,2,2,254,2,0,170,165,170,252
 36480 DEFB 4,172,172,172,12,143,15,204,172,140,143,140,24,126,5,253
 36496 DEFB 1,3,0,0,255,128,128,131,3,254,255,129,129,255,0,127
 36512 DEFB 33,128,248,192,0,3,131,7,7,31,24,24,159,255,24,127
 36528 DEFB 223,80,223,0,255,254,254,0,240,82,90,64,12,56,255,24
 36544 DEFB 0,0,252,48,48,62,48,1,12,255,224,80,1,3,0,14
 36560 DEFB 15,0,193,57,213,197,193,192,3,15,135,143,159,7,255,68
 36576 DEFB 248,248,252,254,255,32,16,4,1,0,128,255,96,232,234,238
 36592 DEFB 255,65,32,8,2,191,3,48,63,135,11,170,165,255,161,80
 36608 DEFB 254,128,255,31,63,0,255,128,7,31,255,0,1,254,3,4
 36624 DEFB 7,240,16,254,8,30,7,135,146,196,254,128,73,63,7,255
 36640 DEFB 40,130,254,3,2,128,161,7,255,15,254,255,7,254,192,31
 36656 DEFB 241,17,21,21,53,181,255,1,0,13,13,255,255,27,0,255
 36672 DEFB 255,214,0,239,239,147,0,255,255,74,70,0,127,127,255,157
 36688 DEFB 49,0,247,127,250,127,96,0,253,252,253,221,0,0,224,252
 36704 DEFB 31,255,255,207,143,152,152,199,68,180,52,252,12,28,31,159
 36720 DEFB 223,127,64,0,64,127,64,254,2,0,2,254,170,181,170,252
 36736 DEFB 4,172,172,172,12,143,15,172,172,140,140,140,0,62,5,5
 36752 DEFB 1,3,0,0,255,255,255,255,3,252,255,255,255,2,0,255
 36768 DEFB 17,192,252,192,0,131,131,7,7,31,24,24,223,255,0,128
 36784 DEFB 223,80,223,0,0,252,254,0,8,82,90,64,3,6,255,0
 36800 DEFB 0,0,48,48,62,62,48,0,2,255,192,80,25,3,0,14
 36816 DEFB 8,0,129,225,213,193,193,128,254,8,252,254,250,7,68,79
 36832 DEFB 0,8,4,2,255,32,8,4,1,255,128,255,127,239,239,239
 36848 DEFB 255,65,16,8,2,191,3,48,191,255,255,255,255,255,161,80

; Skool graphic data (tiles #b0-#b255, base page #b144)
;
; Used by the routine at #R24684. Tiles #b1, #b11, #b21 and #b30 are unused.
; .
; #UDGTABLE(gallery)
; { #UDG36865,,,256(tile0x01) | #UDG36875,,,256(tile0x0B) |
; #UDG36885,,,256(tile0x15) | #UDG36894,,,256(tile0x1E) }
; { #b1 | #b11 | #b21 | #b30 }
; TABLE#
b36864 DEFB 80,240,128,151,128,128,129,0,0,0,1,0,247,0,0,0
 36880 DEFB 0,0,255,255,65,80,255,8,9,0,0,0,255,255,63,252
 36896 DEFB 0,253,241,248,8,0,4,0,255,0,2,234,2,131,255,1
 36912 DEFB 115,5,5,255,16,19,4,80,247,16,240,0,1,64,15,24
 36928 DEFB 0,191,255,0,255,193,193,252,0,3,0,0,224,0,255,255
 36944 DEFB 1,249,5,5,253,1,129,3,251,63,0,0,252,0,0,2
 36960 DEFB 250,28,0,1,124,8,0,60,2,7,7,32,0,6,3,255
 36976 DEFB 128,1,224,0,254,0,253,63,16,97,48,254,191,7,63,95
 36992 DEFB 5,127,0,3,1,26,255,252,0,232,0,0,242,244,160,248
 37008 DEFB 95,255,15,255,171,234,94,54,109,223,255,0,0,211,4,1
 37024 DEFB 127,3,1,248,191,255,255,255,247,191,245,255,127,0,233,240
 37040 DEFB 0,152,252,246,192,24,255,252,0,240,128,192,240,248,255,0
 37056 DEFB 254,101,0,31,0,15,3,232,192,0,248,0,240,62,255,3
 37072 DEFB 0,30,251,249,96,0,0,0,142,240,244,127,224,23,128,0
 37088 DEFB 0,252,192,255,32,240,240,4,0,0,0,48,52,52,52,48
 37104 DEFB 0,4,0,3,3,0,128,128,4,0,1,3,7,8,15,0
 37120 DEFB 80,255,128,159,128,128,255,255,255,255,0,255,255,0,248,255
 37136 DEFB 255,255,255,1,64,240,255,8,9,254,254,254,255,1,51,248
 37152 DEFB 1,241,193,128,8,0,4,0,255,0,2,250,2,131,255,1
 37168 DEFB 243,5,5,255,16,19,4,80,255,16,240,1,1,0,57,96
 37184 DEFB 0,195,255,0,255,193,193,254,0,3,0,128,255,0,225,255
 37200 DEFB 1,255,5,5,1,1,241,3,255,30,248,7,248,0,0,3
 37216 DEFB 3,14,0,0,248,4,0,27,7,9,8,112,130,6,1,250
 37232 DEFB 96,1,216,3,218,0,255,0,18,106,16,255,255,15,94,95
 37248 DEFB 2,255,0,3,1,19,131,0,0,240,0,0,242,248,160,252
 37264 DEFB 191,255,31,255,199,170,94,38,91,255,255,0,56,96,2,1
 37280 DEFB 9,7,34,252,255,255,255,255,247,255,247,255,247,64,249,120
 37296 DEFB 0,152,247,252,128,12,255,248,5,240,128,192,240,248,255,0
 37312 DEFB 255,125,0,127,1,15,7,208,128,0,248,0,240,16,243,0
 37328 DEFB 0,30,115,249,0,0,0,0,159,16,21,248,248,192,128,0
 37344 DEFB 32,252,65,252,48,255,224,8,0,0,0,52,52,52,52,32
 37360 DEFB 0,4,0,3,2,128,128,128,4,0,1,3,4,8,14,0
 37376 DEFB 80,255,128,128,128,128,128,94,239,255,0,255,0,0,8,78
 37392 DEFB 255,255,255,1,127,255,255,8,9,106,174,254,255,129,243,240
 37408 DEFB 7,193,193,128,127,0,4,0,255,0,2,2,2,131,253,1
 37424 DEFB 243,5,5,255,16,19,4,80,255,16,248,7,3,8,72,0
 37440 DEFB 192,0,255,0,255,193,193,255,0,3,0,128,127,2,0,241
 37456 DEFB 1,197,5,5,1,1,255,3,255,3,248,11,0,31,0,1
 37472 DEFB 192,7,0,0,240,14,128,15,7,2,255,241,135,6,0,7
 37488 DEFB 56,1,244,7,252,0,255,0,156,244,32,255,255,31,158,63
 37504 DEFB 1,199,1,3,1,54,7,0,128,240,1,128,254,240,160,254
 37520 DEFB 95,255,63,255,171,230,90,44,171,255,252,0,254,200,2,6
 37536 DEFB 248,252,36,254,191,251,255,255,247,255,245,255,15,192,187,124
 37552 DEFB 0,240,15,0,192,12,255,240,14,224,192,192,240,248,255,0
 37568 DEFB 156,15,0,3,7,63,14,160,0,0,255,0,224,24,255,0
 37584 DEFB 57,61,251,248,0,0,0,0,204,16,30,240,31,207,0,224
 37600 DEFB 96,248,66,252,120,158,0,16,0,0,0,52,52,52,52,32
 37616 DEFB 0,8,0,3,4,128,128,128,4,0,1,3,4,8,14,0
 37632 DEFB 80,255,128,128,128,128,255,174,167,245,0,255,0,0,248,102
 37648 DEFB 82,242,0,1,127,255,255,8,8,106,170,254,63,225,255,192
 37664 DEFB 15,65,193,128,65,0,8,0,255,0,2,2,2,131,249,1
 37680 DEFB 255,5,5,255,16,19,2,80,255,16,254,3,3,5,4,0
 37696 DEFB 48,0,255,0,241,193,193,255,0,3,64,0,15,13,0,129
 37712 DEFB 1,5,253,5,1,249,255,3,255,0,255,115,0,32,1,0
 37728 DEFB 32,3,192,3,224,31,64,7,1,4,32,251,152,134,0,255
 37744 DEFB 200,0,250,142,166,0,0,0,248,160,64,7,255,63,158,155
 37760 DEFB 0,0,3,3,3,93,7,0,160,248,1,192,246,239,160,254
 37776 DEFB 255,255,63,255,155,166,90,117,111,255,252,0,31,24,1,25
 37792 DEFB 255,240,56,253,127,251,255,255,239,253,251,255,0,192,253,124
 37808 DEFB 0,240,1,0,224,6,255,224,8,224,192,192,240,254,127,0
 37824 DEFB 128,5,0,15,15,125,31,192,0,0,249,0,40,31,255,0
 37840 DEFB 79,126,251,255,0,0,224,0,237,24,20,239,15,207,0,224
 37856 DEFB 160,138,244,248,120,193,0,32,31,255,0,52,52,52,255,64
 37872 DEFB 255,8,0,255,4,128,128,255,4,0,3,3,7,8,14,0
 37888 DEFB 80,255,128,128,128,255,0,215,147,85,255,255,0,0,16,51
 37904 DEFB 82,73,7,1,80,255,255,8,8,106,170,78,255,33,255,128
 37920 DEFB 63,65,193,128,65,0,8,0,255,0,2,2,2,255,241,1
 37936 DEFB 255,29,5,255,16,19,2,80,255,16,255,1,25,3,0,0
 37952 DEFB 204,0,252,0,193,255,193,255,0,3,128,0,63,16,0,1
 37968 DEFB 31,5,5,5,1,255,255,3,251,0,255,7,0,252,3,0
 37984 DEFB 32,1,255,7,192,0,32,1,7,0,192,253,192,254,128,255
 38000 DEFB 127,0,253,124,39,0,0,0,249,32,64,3,255,63,15,79
 38016 DEFB 224,0,3,3,6,126,7,0,192,248,1,224,247,248,160,255
 38032 DEFB 255,55,63,255,155,182,91,117,111,191,252,7,131,138,1,224
 38048 DEFB 252,28,8,252,255,251,191,239,223,243,251,255,0,192,253,56
 38064 DEFB 64,224,0,0,216,159,190,192,40,192,192,192,240,255,3,0
 38080 DEFB 248,2,0,7,7,113,255,192,0,0,255,0,168,14,169,0
 38096 DEFB 135,254,255,255,0,0,16,0,238,216,20,208,60,254,192,0
 38112 DEFB 192,131,72,212,120,64,0,32,64,0,0,52,52,52,54,64
 38128 DEFB 1,16,0,3,4,128,128,128,8,0,3,7,4,15,14,128
 38144 DEFB 80,255,128,128,255,255,255,235,201,85,255,255,0,255,248,57
 38160 DEFB 82,100,255,193,80,255,255,8,8,42,170,166,255,33,255,0
 38176 DEFB 255,65,193,128,34,0,8,255,255,0,2,2,250,255,193,1
 38192 DEFB 245,101,5,255,16,16,2,176,255,16,255,1,24,3,0,0
 38208 DEFB 70,0,224,1,193,193,193,255,0,195,128,0,249,108,0,1
 38224 DEFB 249,5,5,5,1,255,63,3,255,0,255,15,0,255,4,32
 38240 DEFB 16,0,255,15,192,0,208,0,31,0,0,255,120,254,192,255
 38256 DEFB 63,0,95,24,0,0,0,0,253,32,64,1,135,63,143,47
 38272 DEFB 31,0,3,1,4,253,7,0,128,255,0,240,246,232,160,255
 38288 DEFB 252,31,63,243,155,174,90,126,215,255,255,7,39,251,1,64
 38304 DEFB 224,252,28,245,255,255,255,247,255,251,251,127,128,240,249,48
 38320 DEFB 224,120,0,128,239,255,62,128,72,128,192,192,240,250,0,56
 38336 DEFB 236,1,0,15,13,7,253,192,0,255,3,0,126,249,185,0
 38352 DEFB 15,63,255,250,0,248,248,0,207,84,28,160,253,255,0,192
 38368 DEFB 128,254,126,222,248,96,0,64,128,0,32,52,52,60,52,64
 38384 DEFB 2,16,2,3,8,128,0,128,8,0,3,4,4,15,14,128
 38400 DEFB 80,0,128,128,192,255,0,117,229,85,0,0,0,0,8,60
 38416 DEFB 82,114,255,65,80,0,252,9,8,170,170,82,255,33,0,0
 38432 DEFB 255,67,193,128,34,0,16,240,0,0,2,2,6,255,129,1
 38448 DEFB 197,133,253,255,16,16,1,24,16,16,255,7,124,1,51,0
 38464 DEFB 59,0,0,63,193,193,193,0,0,227,128,0,224,159,0,1
 38480 DEFB 249,5,5,5,1,1,15,195,255,0,7,30,0,255,0,16
 38496 DEFB 8,0,255,31,160,0,232,0,3,0,0,255,12,126,255,0
 38512 DEFB 7,0,44,24,0,1,0,0,254,37,32,0,3,62,207,19
 38528 DEFB 224,0,3,0,13,119,15,0,128,255,0,248,254,164,175,95
 38544 DEFB 252,15,63,147,187,174,94,126,91,254,255,7,38,30,1,32
 38560 DEFB 31,254,176,247,255,255,191,255,223,247,251,127,192,208,255,48
 38576 DEFB 224,135,248,128,190,255,126,0,88,0,192,224,240,251,0,120
 38592 DEFB 237,0,3,139,27,31,250,192,0,255,0,192,190,19,25,0
 38608 DEFB 31,84,249,238,0,255,0,12,255,84,28,64,127,248,0,248
 38624 DEFB 128,255,2,133,255,224,0,255,0,0,48,52,52,60,52,255
 38640 DEFB 2,255,3,3,255,128,0,128,248,1,3,7,8,15,14,128
 38656 DEFB 208,0,159,128,191,255,255,255,255,255,0,0,0,255,255,255
 38672 DEFB 255,255,255,65,80,0,248,9,255,254,254,254,255,63,0,0
 38688 DEFB 255,205,207,128,28,7,15,255,0,254,250,2,254,255,1,31
 38704 DEFB 5,5,129,248,19,252,254,239,16,16,255,3,127,7,15,0
 38720 DEFB 118,0,0,255,193,193,255,0,2,251,128,192,0,127,0,1
 38736 DEFB 249,5,5,5,1,1,3,227,255,1,3,254,0,240,0,12
 38752 DEFB 248,0,255,62,17,0,247,0,7,0,0,255,6,7,255,0
 38768 DEFB 1,0,63,248,0,2,0,0,255,42,16,31,3,62,255,10
 38784 DEFB 255,0,3,0,21,239,31,0,220,255,0,244,242,163,223,191
 38800 DEFB 127,7,63,159,170,174,182,111,167,255,255,3,197,4,1,16
 38816 DEFB 243,255,224,255,255,255,255,255,191,245,255,255,224,248,240,0
 38832 DEFB 8,223,251,128,255,255,254,0,208,128,192,240,240,254,0,248
 38848 DEFB 255,0,15,2,55,255,244,192,0,0,0,248,127,36,9,0
 38864 DEFB 30,255,249,228,0,0,0,140,255,116,60,128,63,128,0,192
 38880 DEFB 192,255,3,7,112,252,0,0,0,0,48,52,52,52,48,0
 38896 DEFB 2,0,3,3,0,128,128,0,0,1,3,4,15,15,14,128

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 1/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b38912 DEFB 128,192,32,224,96,64,0,196,0,16,0,4,0,32,0,100
 38928 DEFB 255,143,255,129,173,165,165,177,129,128,255,129,1,7,0,7
 38944 DEFB 127,7,255,252,255,255,255,2,255,127,127,0,255,254,255,4
 38960 DEFB 255,134,134,140,204,254,0,255,63,48,192,255,0,130,130,226
 38976 DEFB 255,0,0,4,255,4,255,0,255,207,160,168,255,227,131,140
 38992 DEFB 143,143,255,0,255,133,128,0,1,0,255,255,1,255,32,0
 39008 DEFB 0,32,0,255,224,255,0,255,2,217,0,4,0,255,253,4
 39024 DEFB 0,192,124,128,160,255,255,95,0,4,8,5,21,0,9,255
 39040 DEFB 254,245,0,160,63,132,5,1,1,65,255,255,128,1,143,136
 39056 DEFB 72,75,65,241,255,225,1,65,193,97,225,255,129,1,253,5
 39072 DEFB 221,255,0,3,50,67,18,0,0,159,20,1,52,180,1,240
 39088 DEFB 255,255,192,191,237,127,128,95,95,1,128,0,192,0,208,1
 39104 DEFB 64,2,124,120,255,255,129,208,6,0,252,5,15,255,253,248
 39120 DEFB 255,249,192,37,192,37,223,255,248,251,254,255,64,95,132,63

; Speech bubble lip UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG39136,56(lip) }
; TABLE#
@label=LIPUDG
b39136 DEFB 66,66,34,36,36,20,20,8

; Safe key UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG39144,6(safe_key) }
; TABLE#
@label=SAFEKEYUDG
b39144 DEFB 7,5,7,8,16,32,80,160

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 1/8)
;
; Used by the routine at #R24684.
b39152 DEFB 255,255,224,146,73,45,146,73,45,160

; Unused
s39162 DEFS 2

; Water animation table entry (phase 2)
;
; Used by the routine at #R63915. The next entry is at #R39420.
@label=WANIM2
b39164 DEFB 92       ; #AS92: water fired from the pistol (phase 2)
 39165 DEFB 254      ; -2: x-coordinate increment
 39166 DEFB 255      ; -1: y-coordinate increment
 39167 DEFB 0        ; 0=cannot hit anything at this phase

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 2/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b39168 DEFB 128,64,32,96,96,64,0,252,0,16,0,4,0,16,0,124
 39184 DEFB 255,143,255,129,165,165,165,129,131,128,253,1,1,15,0,15
 39200 DEFB 127,15,255,253,255,254,0,133,255,127,127,0,255,254,255,4
 39216 DEFB 255,134,134,140,204,254,255,255,63,48,192,255,0,130,130,242
 39232 DEFB 255,0,0,4,192,4,255,0,192,192,175,175,255,227,131,140
 39248 DEFB 140,140,255,0,128,8,0,255,255,0,0,0,0,0,160,0
 39264 DEFB 63,63,0,0,0,0,255,1,2,1,252,252,0,0,3,4
 39280 DEFB 0,127,0,191,160,0,128,223,0,252,248,245,21,0,9,0
 39296 DEFB 2,247,255,160,0,127,5,1,1,65,0,0,255,255,136,136
 39312 DEFB 239,75,65,249,255,225,1,65,65,225,225,253,193,1,5,253
 39328 DEFB 229,129,0,15,122,67,23,255,255,191,84,3,180,244,1,240
 39344 DEFB 128,0,64,128,13,64,160,80,81,1,128,0,223,255,208,1
 39360 DEFB 64,0,68,72,255,254,49,208,6,0,240,5,57,192,37,96
 39376 DEFB 255,255,192,37,192,37,255,255,248,193,6,15,32,130,8,82

; Top left corner of the speech bubble UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG39392,56(bubble_top_left) }
; TABLE#
@label=SBTLUDG
b39392 DEFB 62,65,64,128,128,128,128,128

; Science Lab storeroom key UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG39400,7(science_lab_storeroom_key) }
; TABLE#
@label=SLSKEYUDG
b39400 DEFB 8,20,8,8,8,8,8,12

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 2/8)
;
; Used by the routine at #R24684.
b39408 DEFB 73,46,32,146,73,45,146,73,45,160

; Unused
s39418 DEFS 2

; Water animation table entry (phase 3)
;
; Used by the routine at #R63915. The previous entry is at #R39164, and the
; next entry is at #R39676.
@label=WANIM3
b39420 DEFB 108      ; #AS108: water fired from the pistol (phase 3)
 39421 DEFB 254      ; -2: x-coordinate increment
 39422 DEFB 0        ; 0: y-coordinate increment
 39423 DEFB 1        ; 1=may hit a cup at this phase

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 3/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b39424 DEFB 128,64,32,96,96,64,12,32,0,96,0,2,1,12,0,16
 39440 DEFB 255,135,191,129,165,165,165,129,135,128,249,1,1,31,0,15
 39456 DEFB 255,15,255,253,255,252,255,133,255,255,127,0,255,254,254,134
 39472 DEFB 255,134,134,140,239,254,128,255,63,48,192,255,255,130,130,242
 39488 DEFB 255,255,0,4,128,4,255,255,128,191,168,160,251,227,131,140
 39504 DEFB 143,140,255,255,255,16,255,1,0,124,255,255,255,255,112,255
 39520 DEFB 32,0,0,224,0,255,165,255,2,255,4,0,0,255,5,5
 39536 DEFB 0,0,255,160,191,255,255,223,0,16,255,21,245,0,9,255
 39552 DEFB 254,214,192,160,127,255,1,255,1,81,255,1,255,0,136,200
 39568 DEFB 192,69,65,249,253,193,1,65,65,97,161,249,225,129,5,65
 39584 DEFB 243,129,0,51,122,67,20,0,1,131,244,1,180,255,255,224
 39600 DEFB 191,255,64,191,237,64,128,95,80,1,128,0,208,1,208,1
 39616 DEFB 64,0,120,127,208,6,15,208,6,192,255,253,232,192,37,32
 39632 DEFB 255,197,192,37,192,37,255,255,248,159,135,247,31,1,240,146

; Top-middle section of the speech bubble UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG39648,56(bubble_top_middle) }
; TABLE#
@label=SBTMUDG
b39648 DEFB 126,129,0,0,0,0,0,0

; Captured frog UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG39656,4(frog) }
; TABLE#
@label=FROGUDG
b39656 DEFB 8,20,34,68,156,164,136,124

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 3/8)
;
; Used by the routine at #R24684.
b39664 DEFB 73,45,32,146,73,45,146,73,45,160

; Unused
s39674 DEFS 2

; Water animation table entry (phase 4)
;
; Used by the routine at #R63915. The previous entry is at #R39420, and the
; next entry is at #R39932.
@label=WANIM4
b39676 DEFB 116      ; #AS116: water fired from the pistol (phase 4)
 39677 DEFB 255      ; -1: x-coordinate increment
 39678 DEFB 0        ; 0: y-coordinate increment
 39679 DEFB 0        ; 0=cannot hit anything at this phase

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 4/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b39680 DEFB 192,192,32,96,96,64,255,63,255,128,255,2,255,3,192,248
 39696 DEFB 255,135,159,129,165,165,165,129,143,128,249,1,1,31,1,31
 39712 DEFB 255,31,255,253,224,249,255,133,127,255,127,0,255,254,254,134
 39728 DEFB 247,134,134,140,239,254,128,191,63,48,192,255,255,130,194,242
 39744 DEFB 255,255,0,4,128,4,255,255,128,160,168,224,251,195,131,140
 39760 DEFB 142,140,255,255,128,16,0,1,0,134,181,175,255,0,104,0
 39776 DEFB 32,0,0,160,0,255,165,20,2,0,4,0,0,238,11,7
 39792 DEFB 0,0,145,175,128,255,64,223,0,16,84,213,4,1,9,191
 39808 DEFB 4,150,191,160,64,0,1,0,255,65,159,2,255,128,136,200
 39824 DEFB 64,68,65,253,253,193,193,65,65,225,33,241,241,65,5,61
 39840 DEFB 251,137,255,195,74,67,20,0,1,255,52,1,180,255,255,224
 39856 DEFB 175,237,64,191,237,64,128,81,80,3,128,0,208,1,208,1
 39872 DEFB 64,0,72,65,208,6,0,208,6,224,64,37,36,192,37,32
 39888 DEFB 240,5,192,37,192,37,255,255,254,33,203,11,0,0,0,146

; Top-right corner of the speech bubble UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG39904,56(bubble_top_right) }
; TABLE#
@label=SBTRUDG
b39904 DEFB 124,130,2,1,1,1,1,1

; Left half of the waterpistol UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG39912,5(pistol_left) }
; TABLE#
@label=WPLEFTUDG
b39912 DEFB 31,31,60,60,127,126,254,254

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 4/8)
;
; Used by the routine at #R24684.
b39920 DEFB 73,45,32,146,73,45,146,73,45,32

; Unused
s39930 DEFS 2

; Water animation table entry (phase 5)
;
; Used by the routine at #R63915. The previous entry is at #R39676, and the
; next entry is at #R40188.
@label=WANIM5
b39932 DEFB 124      ; #AS124: water fired from the pistol (phase 5+)
 39933 DEFB 0        ; 0: x-coordinate increment
 39934 DEFB 1        ; +1: y-coordinate increment
 39935 DEFB 0        ; 0=cannot hit anything at this phase

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 5/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b39936 DEFB 192,32,224,96,96,64,172,32,0,0,16,1,1,0,96,4
 39952 DEFB 191,131,143,129,165,165,165,129,159,128,241,1,1,63,1,31
 39968 DEFB 255,31,254,253,192,251,255,133,127,127,127,0,255,0,254,138
 39984 DEFB 246,134,134,140,255,254,128,191,63,48,192,1,255,130,195,254
 40000 DEFB 0,255,0,252,128,4,0,251,128,175,168,255,251,195,131,140
 40016 DEFB 142,140,159,255,128,8,255,5,255,255,181,170,255,0,156,63
 40032 DEFB 40,255,131,160,0,255,102,28,2,252,4,255,0,85,22,6
 40048 DEFB 0,0,128,175,255,157,95,81,0,16,5,213,255,3,9,170
 40064 DEFB 244,150,160,160,125,255,1,255,0,65,149,3,130,192,136,232
 40080 DEFB 96,66,193,253,249,129,65,65,65,97,33,225,249,33,5,25
 40096 DEFB 1,149,0,195,74,67,20,0,1,3,52,1,180,255,255,192
 40112 DEFB 175,173,64,170,173,95,128,80,95,6,0,0,208,1,208,1
 40128 DEFB 64,0,126,127,208,6,0,208,6,248,64,37,32,192,37,32
 40144 DEFB 255,253,255,253,192,37,191,255,255,66,76,133,0,0,0,146

; Bottom-left corner of the speech bubble UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG40160,56(bubble_bottom_left) }
; TABLE#
@label=SBBLUDG
b40160 DEFB 128,128,128,128,128,64,65,62

; Right half of the waterpistol UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG40168,5(pistol_right) }
; TABLE#
@label=WPRIGHTUDG
b40168 DEFB 252,252,128,128,128,0,0,0

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 5/8)
;
; Used by the routine at #R24684.
b40176 DEFB 73,45,160,146,73,45,146,73,45,32

; Unused
s40186 DEFS 2

; Water animation table entry (phase 6+)
;
; Used by the routine at #R63915. The previous entry is at #R39932, and the
; unused entry for phase 7+ is at #R40444.
@label=WANIM6
b40188 DEFB 124      ; #AS124: water fired from the pistol (phase 5+)
 40189 DEFB 0        ; 0: x-coordinate increment
 40190 DEFB 1        ; +1: y-coordinate increment
 40191 DEFB 2        ; 2=may hit a plant or the ground at this phase

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 6/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b40192 DEFB 64,32,224,96,96,64,95,32,0,0,8,1,15,0,240,2
 40208 DEFB 191,131,135,129,165,165,165,129,191,128,225,1,3,63,3,63
 40224 DEFB 255,63,254,255,192,251,255,125,127,127,255,0,254,0,254,138
 40240 DEFB 230,134,134,140,255,0,128,191,63,48,192,1,2,130,194,0
 40256 DEFB 0,0,7,0,128,252,0,9,143,168,168,255,243,195,131,141
 40272 DEFB 142,140,191,255,191,135,225,1,255,193,181,170,255,255,0,33
 40288 DEFB 32,255,4,160,0,255,36,227,2,196,4,255,192,171,28,6
 40304 DEFB 255,0,191,175,255,205,80,81,240,16,245,213,255,5,9,170
 40320 DEFB 20,150,160,160,149,1,1,255,127,65,149,2,130,160,136,104
 40336 DEFB 96,67,225,253,249,129,65,65,65,97,33,193,253,33,5,57
 40352 DEFB 255,137,1,67,74,67,21,255,255,3,52,1,180,255,255,192
 40368 DEFB 175,173,64,170,173,81,128,80,64,28,0,0,208,1,208,1
 40384 DEFB 64,0,66,66,208,6,0,208,6,252,64,37,32,192,37,32
 40400 DEFB 192,37,192,37,192,37,252,127,250,66,127,196,0,0,0,146

; Bottom-middle section of the speech bubble UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG40416,56(bubble_bottom_middle) }
; TABLE#
@label=SBBMUDG
b40416 DEFB 0,0,0,0,0,0,129,126

; Three stinkbombs UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG40424,7(stinkbombs3) }
; TABLE#
@label=STINKB3UDG
b40424 DEFB 32,80,34,5,18,40,16,0

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 6/8)
;
; Used by the routine at #R24684.
b40432 DEFB 73,45,160,146,73,45,146,73,45,32

; Unused
u40442 DEFS 2
; If the following bytes were used, they would be the entry for phase 7+ in the
; water animation table (see the entry for phase 6+ at #R40188, and the routine
; at #R63915).
@label=WANIM7
 40444 DEFB 124      ; #AS124: water fired from pistol (phase 5+)
 40445 DEFB 0        ; 0: x-coordinate increment
 40446 DEFB 1        ; +1: y-coordinate increment
 40447 DEFB 2        ; 2=may hit a plant or the ground at this phase

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 7/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b40448 DEFB 192,32,96,96,96,64,228,63,192,255,8,255,57,255,216,254
 40464 DEFB 159,129,131,129,165,165,165,129,255,128,225,1,3,127,3,63
 40480 DEFB 255,63,252,255,128,251,252,33,127,127,255,0,254,0,252,10
 40496 DEFB 230,134,142,140,255,0,128,63,63,112,192,1,130,130,226,0
 40512 DEFB 0,0,4,0,128,0,0,8,142,168,168,255,243,131,131,141
 40528 DEFB 142,140,255,255,166,128,1,1,255,129,181,170,255,33,0,32
 40544 DEFB 32,255,4,160,0,255,60,34,218,4,4,255,160,87,4,6
 40560 DEFB 128,0,191,160,255,229,95,81,8,16,245,21,255,5,9,170
 40576 DEFB 244,150,160,160,253,1,1,255,65,127,149,2,130,144,136,88
 40592 DEFB 80,65,225,255,241,1,65,65,65,97,33,129,255,17,5,89
 40608 DEFB 1,129,254,67,122,71,21,0,131,3,52,1,180,255,255,192
 40624 DEFB 171,173,64,191,255,80,128,95,64,56,0,0,208,1,223,255
 40640 DEFB 120,0,124,126,208,6,0,255,254,254,64,37,51,192,253,32
 40656 DEFB 192,37,192,37,192,37,243,112,251,68,95,228,0,0,0,146

; Bottom-right corner of the speech bubble UDG
;
; Used by the routine at #R26958.
; .
; #UDGTABLE
; { #UDG40672,56(bubble_bottom_right) }
; TABLE#
@label=SBBRUDG
b40672 DEFB 1,1,1,1,1,2,130,124

; Two stinkbombs UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG40680,7(stinkbombs2) }
; TABLE#
@label=STINKB2UDG
b40680 DEFB 4,10,4,0,32,80,32,0

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 7/8)
;
; Used by the routine at #R24684.
b40688 DEFB 73,45,160,146,73,45,82,73,46,32

; Unused
s40698 DEFS 2

; x-coordinates of the plant pots
;
; Used by the routine at #R63878. The y-coordinates of the plant pots can be
; found at #R40956.
@label=POTSX
b40700 DEFB 91       ; x-coordinate of the plant pot near the top-floor window
 40701 DEFB 93       ; x-coordinate of the plant pot near the middle-floor
                     ; window
 40702 DEFB 132      ; x-coordinate of the plant pot to the left of the skool
                     ; gate
 40703 DEFB 135      ; x-coordinate of the plant pot to the right of the skool
                     ; gate

; Skool graphic data (tiles #b0-#b223, base page #b152, byte 8/8)
;
; Used by the routine at #R24684. Tiles #b175-#b184 are unused; they would be
; used by the left study door when it's open (see #R56893), but that door is
; always shut.
b40704 DEFB 64,224,224,96,96,192,196,0,32,0,4,0,33,0,252,0
 40720 DEFB 159,129,129,177,165,165,173,129,255,129,193,1,7,255,7,63
 40736 DEFB 255,127,255,255,128,251,224,31,127,255,255,4,254,0,252,126
 40752 DEFB 198,134,140,140,255,0,128,63,63,224,192,1,130,130,226,0
 40768 DEFB 0,0,4,0,128,0,1,8,254,175,168,255,243,131,135,140
 40784 DEFB 142,140,255,255,191,255,255,1,255,255,181,170,255,255,255,63
 40800 DEFB 32,255,4,160,0,255,126,227,255,252,4,255,192,174,4,6
 40816 DEFB 127,255,191,160,255,0,64,81,252,255,245,21,255,9,9,0
 40832 DEFB 4,150,160,224,135,5,1,255,65,0,149,255,130,144,136,248
 40848 DEFB 80,65,241,255,241,1,65,65,65,225,33,1,255,9,5,25
 40864 DEFB 1,255,50,67,122,121,21,0,143,255,52,1,180,255,255,192
 40880 DEFB 171,173,64,128,0,80,128,80,64,255,255,192,208,1,192,0
 40896 DEFB 72,0,68,66,208,6,0,255,254,255,192,37,47,255,129,224
 40912 DEFB 192,37,192,37,255,253,245,15,126,64,100,68,0,0,0,146

; Captured mouse UDG
;
; Used by the routine at #R31573.
; .
; #UDGTABLE
; { #UDG40928,7(mouse) }
; TABLE#
@label=MOUSEUDG
b40928 DEFB 0,0,34,35,70,95,60,40

; Single stinkbomb UDG
;
; Used by the routine at #R31746.
; .
; #UDGTABLE
; { #UDG40936,7(stinkbombs1) }
; TABLE#
@label=STINKB1UDG
b40936 DEFB 0,0,16,40,16,0,0,0

; Skool graphic data (tiles #b240-#b249, base page #b152, byte 8/8)
;
; Used by the routine at #R24684.
b40944 DEFB 73,45,32,146,73,45,63,255,255,224

; Unused
s40954 DEFS 2

; y-coordinates of the plant pots
;
; Used by the routine at #R63878. The x-coordinates of the plant pots can be
; found at #R40700.
@label=POTSY
b40956 DEFB 2        ; y-coordinate of the plant pot near the top-floor window
 40957 DEFB 9        ; y-coordinate of the plant pot near the middle-floor
                     ; window
 40958 DEFB 16       ; y-coordinate of the plant pot to the  left of the skool
                     ; gate
 40959 DEFB 16       ; y-coordinate of the plant pot to the right of the skool
                     ; gate

; Skool UDG references (LSBs) for row 0
;
; Used by the routine at #R24684.
b40960 DEFB 82,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80
 40976 DEFB 80,80,80,80,80,80,170,80,80,80,80,80,80,80,80,80
 40992 DEFB 80,80,80,80,80,80,249,80,80,80,80,80,80,80,80,80
 41008 DEFB 80,80,80,80,80,80,80,80,80,80,80,80,80,99,80,80
 41024 DEFB 80,80,80,133,80,80,80,80,80,80,80,80,80,80,210,80
 41040 DEFB 80,80,80,80,80,80,80,46,59,81,81,95,107,120,136,155
 41056 DEFB 173,191,81,81,81,81,81,81,81,81,81,81,81,81,81,81
 41072 DEFB 81,81,81,81,81,16,80,80,80,80,80,80,80,80,80,80
 41088 DEFB 80,80,80,80,55,80,80,80,76,80,80,80,80,80,80,148

; Skool UDG MSB indicators for row 0
;
; Used by the routine at #R24684.
b41104 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
 41120 DEFB 1,0,0,2,0,16,144,240,192,0,0,0,0,68,0,0
 41136 DEFB 0,136,136,17

; BRIGHT/PAPER attributes for skool UDGs in row 0
;
; Used by the routine at #R24684.
b41140 DEFB 86,102,102,102,102,102,85,85,85,119,119,119,119,119,119,119
 41156 DEFB 119,119,119,102,119,117,85,85,85,102,102,102,102,102,111,119
 41172 DEFB 119,119,255,244,79,116,68,70,119,102,126,238,84,68,85,85
 41188 DEFB 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85
 41204 DEFB 85,85,85,102,238,238,238,236

; Entry #b0 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E0
b41212 DEFB 69       ; Entry #b0 in descent table #R64460#dt252(#b252)
@label=DT253E0
 41213 DEFB 160      ; Entry #b0 in descent table #R64460#dt253(#b253)
@label=DT254E0
 41214 DEFB 160      ; Entry #b0 in descent table #R64460#dt254(#b254)
@label=DT255E0
 41215 DEFB 96       ; Entry #b0 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 1
;
; Used by the routine at #R24684.
b41216 DEFB 81,82,80,80,80,80,80,80,80,80,80,80,80,80,80,80
 41232 DEFB 80,80,80,80,80,80,171,80,80,80,80,80,80,80,80,80
 41248 DEFB 80,80,80,80,80,80,250,80,80,80,80,80,80,80,80,80
 41264 DEFB 80,80,80,80,80,80,80,80,80,80,80,80,80,100,80,80
 41280 DEFB 80,80,127,134,80,80,80,80,80,80,80,80,80,202,87,80
 41296 DEFB 80,80,80,80,80,22,31,47,60,74,89,96,108,121,137,156
 41312 DEFB 174,192,203,81,81,81,81,81,81,81,81,81,81,81,81,81
 41328 DEFB 81,81,81,81,81,17,80,80,80,80,80,80,80,80,80,80
 41344 DEFB 80,80,80,46,56,80,80,80,77,80,80,80,80,80,80,149

; Skool UDG MSB indicators for row 1
;
; Used by the routine at #R24684.
b41360 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
 41376 DEFB 3,0,0,4,0,112,240,240,224,0,0,0,0,68,0,0
 41392 DEFB 17,136,136,17

; BRIGHT/PAPER attributes for skool UDGs in row 1
;
; Used by the routine at #R24684.
b41396 DEFB 85,103,119,119,119,102,86,102,85,85,103,119,116,68,68,68
 41412 DEFB 68,68,119,102,101,85,86,102,117,102,119,119,119,118,110,119
 41428 DEFB 119,119,114,36,68,68,68,70,102,102,102,238,84,68,68,85
 41444 DEFB 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85
 41460 DEFB 85,85,85,118,231,119,118,108

; Entry #b1 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E1
b41468 DEFB 69       ; Entry #b1 in descent table #R64460#dt252(#b252)
@label=DT253E1
 41469 DEFB 160      ; Entry #b1 in descent table #R64460#dt253(#b253)
@label=DT254E1
 41470 DEFB 160      ; Entry #b1 in descent table #R64460#dt254(#b254)
@label=DT255E1
 41471 DEFB 96       ; Entry #b1 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 2
;
; Used by the routine at #R24684.
b41472 DEFB 81,87,81,81,81,81,81,81,81,81,81,81,81,128,135,81
 41488 DEFB 128,135,81,128,135,162,172,81,81,81,81,81,81,81,81,128
 41504 DEFB 135,81,128,135,81,128,251,81,128,135,81,128,135,81,128,135
 41520 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,81,101,81,81
 41536 DEFB 81,81,128,135,140,145,148,148,163,174,81,161,191,118,211,103
 41552 DEFB 81,81,81,85,81,23,32,48,61,75,81,97,109,122,138,157
 41568 DEFB 175,193,204,215,81,81,81,81,81,81,81,81,81,81,81,81
 41584 DEFB 81,81,81,81,81,216,81,81,81,81,81,81,81,81,81,81
 41600 DEFB 81,81,81,128,57,81,81,81,78,81,81,81,81,125,136,150

; Skool UDG MSB indicators for row 2
;
; Used by the routine at #R24684.
b41616 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
 41632 DEFB 3,15,29,14,0,112,208,240,240,0,0,0,0,0,0,0
 41648 DEFB 1,136,136,119

; BRIGHT/PAPER attributes for skool UDGs in row 2
;
; Used by the routine at #R24684.
b41652 DEFB 85,85,85,85,85,85,93,213,221,93,213,116,68,68,68,77
 41668 DEFB 212,221,77,214,221,109,214,221,102,102,102,102,102,102,110,119
 41684 DEFB 119,119,4,68,64,68,4,70,102,102,102,228,68,68,68,69
 41700 DEFB 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85
 41716 DEFB 85,85,102,102,230,102,102,108

; Entry #b2 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E2
b41724 DEFB 69       ; Entry #b2 in descent table #R64460#dt252(#b252)
@label=DT253E2
 41725 DEFB 160      ; Entry #b2 in descent table #R64460#dt253(#b253)
@label=DT254E2
 41726 DEFB 2        ; Entry #b2 in descent table #R64460#dt254(#b254)
@label=DT255E2
 41727 DEFB 96       ; Entry #b2 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 3
;
; Used by the routine at #R24684.
b41728 DEFB 81,87,81,0,1,2,3,4,5,6,7,81,81,81,81,81
 41744 DEFB 81,81,81,81,81,81,173,180,181,188,189,192,196,205,210,81
 41760 DEFB 81,220,224,232,238,243,252,16,17,18,19,20,21,22,23,81
 41776 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,81,102,81,81
 41792 DEFB 124,243,129,136,141,146,149,155,164,81,81,81,81,118,212,103
 41808 DEFB 81,236,249,6,14,24,33,49,62,76,90,98,110,123,139,158
 41824 DEFB 176,194,205,216,223,81,81,81,81,234,81,242,81,81,81,81
 41840 DEFB 81,81,81,81,81,216,32,33,34,35,36,37,38,39,81,81
 41856 DEFB 81,81,81,128,58,165,165,103,79,89,98,108,81,126,137,151

; Skool UDG MSB indicators for row 3
;
; Used by the routine at #R24684.
b41872 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
 41888 DEFB 11,15,8,6,22,240,240,240,240,128,80,0,0,0,0,0
 41904 DEFB 1,136,255,119

; BRIGHT/PAPER attributes for skool UDGs in row 3
;
; Used by the routine at #R24684.
b41908 DEFB 85,95,255,255,255,245,85,85,85,85,85,119,119,119,119,116
 41924 DEFB 71,119,119,111,255,255,255,246,102,102,102,102,102,102,110,119
 41940 DEFB 102,103,68,221,68,68,68,102,102,102,102,68,68,68,68,68
 41956 DEFB 85,69,85,85,85,85,85,85,85,85,85,255,255,255,255,85
 41972 DEFB 85,85,109,214,230,102,102,236

; Entry #b3 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E3
b41980 DEFB 69       ; Entry #b3 in descent table #R64460#dt252(#b252)
@label=DT253E3
 41981 DEFB 96       ; Entry #b3 in descent table #R64460#dt253(#b253)
@label=DT254E3
 41982 DEFB 64       ; Entry #b3 in descent table #R64460#dt254(#b254)
@label=DT255E3
 41983 DEFB 96       ; Entry #b3 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 4
;
; Used by the routine at #R24684.
b41984 DEFB 81,87,81,8,9,10,11,12,13,14,15,81,81,81,81,81
 42000 DEFB 81,81,81,81,81,81,174,181,185,188,182,193,197,206,211,81
 42016 DEFB 81,221,225,232,239,238,252,24,25,26,27,28,29,30,31,81
 42032 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,81,102,81,81
 42048 DEFB 125,238,130,137,142,147,150,156,81,175,180,184,81,203,213,218
 42064 DEFB 225,237,250,7,15,25,34,50,63,81,81,99,111,124,140,159
 42080 DEFB 177,195,206,217,224,81,81,81,81,235,81,152,245,81,81,81
 42096 DEFB 81,81,81,81,81,216,40,41,42,43,44,45,46,47,81,81
 42112 DEFB 81,81,81,128,58,165,165,103,80,90,225,109,117,127,138,152

; Skool UDG MSB indicators for row 4
;
; Used by the routine at #R24684.
b42128 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
 42144 DEFB 11,15,7,7,30,240,144,240,240,128,65,128,0,0,0,0
 42160 DEFB 1,136,221,255

; BRIGHT/PAPER attributes for skool UDGs in row 4
;
; Used by the routine at #R24684.
b42164 DEFB 85,95,255,255,255,245,85,85,85,85,85,119,119,119,119,116
 42180 DEFB 71,119,119,111,255,255,255,246,102,102,102,102,102,102,110,119
 42196 DEFB 102,103,244,221,68,68,76,102,102,102,102,68,68,68,68,68
 42212 DEFB 85,84,85,85,85,85,85,85,85,85,85,255,255,255,255,85
 42228 DEFB 85,85,109,214,230,102,102,236

; Entry #b4 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E4
b42236 DEFB 69       ; Entry #b4 in descent table #R64460#dt252(#b252)
@label=DT253E4
 42237 DEFB 100      ; Entry #b4 in descent table #R64460#dt253(#b253)
@label=DT254E4
 42238 DEFB 64       ; Entry #b4 in descent table #R64460#dt254(#b254)
@label=DT255E4
 42239 DEFB 64       ; Entry #b4 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 5
;
; Used by the routine at #R24684.
b42240 DEFB 81,87,81,80,80,80,80,80,80,80,121,123,125,125,123,125
 42256 DEFB 123,125,123,125,123,163,175,182,181,182,182,194,198,207,212,81
 42272 DEFB 81,222,225,225,238,225,253,80,80,80,80,80,80,80,80,35
 42288 DEFB 123,125,123,125,123,125,123,125,123,125,123,163,81,102,81,81
 42304 DEFB 126,225,131,138,143,81,151,156,165,176,181,185,192,204,214,219
 42320 DEFB 226,238,251,8,16,26,35,87,64,77,91,100,81,125,141,160
 42336 DEFB 178,81,207,218,225,228,81,81,81,236,81,152,103,81,81,81
 42352 DEFB 81,81,81,81,81,216,80,80,80,80,80,80,37,38,125,123
 42368 DEFB 123,125,123,47,58,165,165,103,80,91,99,110,118,128,139,153

; Skool UDG MSB indicators for row 5
;
; Used by the routine at #R24684.
b42384 DEFB 0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4
 42400 DEFB 11,11,15,15,30,224,240,112,176,192,65,0,0,0,0,204
 42416 DEFB 17,136,255,255

; BRIGHT/PAPER attributes for skool UDGs in row 5
;
; Used by the routine at #R24684.
b42420 DEFB 85,95,255,255,255,253,221,221,221,221,221,127,255,255,255,244
 42436 DEFB 207,255,255,111,255,255,255,254,238,238,238,238,238,238,238,255
 42452 DEFB 238,231,244,221,204,204,204,110,238,238,238,238,68,68,68,69
 42468 DEFB 85,84,85,85,85,85,85,85,85,85,85,255,255,255,245,221
 42484 DEFB 221,221,109,222,230,238,238,236

; Entry #b5 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E5
b42492 DEFB 69       ; Entry #b5 in descent table #R64460#dt252(#b252)
@label=DT253E5
 42493 DEFB 37       ; Entry #b5 in descent table #R64460#dt253(#b253)
@label=DT254E5
 42494 DEFB 64       ; Entry #b5 in descent table #R64460#dt254(#b254)
@label=DT255E5
 42495 DEFB 64       ; Entry #b5 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 6
;
; Used by the routine at #R24684.
b42496 DEFB 81,87,81,81,81,81,81,81,81,81,122,124,126,126,124,126
 42512 DEFB 124,126,124,126,124,164,176,84,84,84,84,84,84,84,213,81
 42528 DEFB 81,223,84,84,84,84,254,81,81,81,81,81,81,81,81,36
 42544 DEFB 124,126,124,126,124,126,124,126,124,126,124,84,81,102,81,81
 42560 DEFB 223,84,132,139,144,81,152,157,166,177,108,186,193,205,214,220
 42576 DEFB 227,239,252,9,17,27,36,87,65,78,92,101,112,126,142,161
 42592 DEFB 179,196,208,219,226,229,81,81,81,236,81,152,103,81,81,81
 42608 DEFB 81,81,81,81,81,216,81,81,81,81,81,81,36,124,126,124
 42624 DEFB 124,126,124,84,58,84,84,178,81,84,100,111,119,129,140,154

; Skool UDG MSB indicators for row 6
;
; Used by the routine at #R24684.
b42640 DEFB 0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,4
 42656 DEFB 3,11,15,15,30,224,240,240,240,192,65,0,0,0,0,8
 42672 DEFB 1,136,187,255

; BRIGHT/PAPER attributes for skool UDGs in row 6
;
; Used by the routine at #R24684.
b42676 DEFB 85,85,93,221,221,221,221,221,221,221,221,127,255,255,255,244
 42692 DEFB 207,255,255,102,238,238,238,238,238,238,238,238,238,238,238,255
 42708 DEFB 238,231,244,204,204,68,204,110,238,238,238,238,68,68,68,69
 42724 DEFB 85,68,69,85,85,85,85,85,85,85,85,85,93,221,221,221
 42740 DEFB 221,221,102,238,230,238,238,236

; Entry #b6 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E6
b42748 DEFB 69       ; Entry #b6 in descent table #R64460#dt252(#b252)
@label=DT253E6
 42749 DEFB 69       ; Entry #b6 in descent table #R64460#dt253(#b253)
@label=DT254E6
 42750 DEFB 22       ; Entry #b6 in descent table #R64460#dt254(#b254)
@label=DT255E6
 42751 DEFB 64       ; Entry #b6 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 7
;
; Used by the routine at #R24684.
b42752 DEFB 83,88,80,80,80,80,80,80,80,80,80,80,80,129,80,80
 42768 DEFB 80,80,80,80,80,80,177,183,183,183,190,195,199,80,80,80
 42784 DEFB 80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80
 42800 DEFB 80,80,80,80,48,80,80,80,80,80,80,80,80,103,80,80
 42816 DEFB 80,80,80,80,80,80,80,153,167,80,80,80,80,80,215,221
 42832 DEFB 228,240,253,253,18,28,80,51,66,79,93,102,113,127,143,162
 42848 DEFB 180,197,209,220,227,230,81,81,81,236,81,152,103,81,81,81
 42864 DEFB 81,81,81,81,81,18,80,80,80,80,80,80,80,80,80,80
 42880 DEFB 80,80,80,48,59,64,64,70,82,80,80,80,80,80,80,155

; Skool UDG MSB indicators for row 7
;
; Used by the routine at #R24684.
b42896 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,4
 42912 DEFB 0,1,8,3,15,208,240,240,240,192,65,0,0,68,0,0
 42928 DEFB 17,255,136,17

; BRIGHT/PAPER attributes for skool UDGs in row 7
;
; Used by the routine at #R24684.
b42932 DEFB 119,119,119,119,119,127,255,103,119,119,119,127,255,102,102,103
 42948 DEFB 119,119,119,119,119,119,119,119,119,119,119,119,119,119,127,119
 42964 DEFB 119,103,119,126,226,119,196,102,238,238,238,102,102,68,68,68
 42980 DEFB 85,69,85,85,85,85,85,85,85,85,86,102,102,102,102,102
 42996 DEFB 102,102,102,238,238,238,238,238

; Entry #b7 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E7
b43004 DEFB 0        ; Entry #b7 in descent table #R64460#dt252(#b252)
@label=DT253E7
 43005 DEFB 69       ; Entry #b7 in descent table #R64460#dt253(#b253)
@label=DT254E7
 43006 DEFB 0        ; Entry #b7 in descent table #R64460#dt254(#b254)
@label=DT255E7
 43007 DEFB 64       ; Entry #b7 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 8
;
; Used by the routine at #R24684.
b43008 DEFB 81,87,81,81,81,81,81,81,81,81,81,81,81,103,103,81
 43024 DEFB 81,81,81,81,81,81,81,81,81,165,178,81,200,81,81,81
 43040 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,23,27,81,100
 43056 DEFB 81,81,81,81,49,81,81,81,35,73,79,85,90,104,80,80
 43072 DEFB 80,80,80,80,80,80,153,158,168,80,80,80,194,206,81,168
 43088 DEFB 87,81,81,81,81,81,81,52,67,80,81,103,114,128,144,163
 43104 DEFB 181,198,210,221,140,81,81,81,81,236,81,152,103,81,81,81
 43120 DEFB 81,81,81,81,81,19,81,81,81,81,81,81,81,81,81,81
 43136 DEFB 81,81,81,49,140,89,81,81,81,81,81,81,81,81,87,87

; Skool UDG MSB indicators for row 8
;
; Used by the routine at #R24684.
b43152 DEFB 0,0,0,0,0,0,0,0,0,0,0,12,0,8,15,12
 43168 DEFB 0,3,8,13,0,16,208,240,240,0,65,0,0,68,0,0
 43184 DEFB 17,0,0,0

; BRIGHT/PAPER attributes for skool UDGs in row 8
;
; Used by the routine at #R24684.
b43188 DEFB 119,255,255,255,255,255,255,102,102,102,102,102,102,102,102,102
 43204 DEFB 102,102,102,102,102,102,102,102,102,102,117,85,85,85,95,119
 43220 DEFB 119,103,119,238,231,119,102,102,102,102,102,102,110,85,84,68
 43236 DEFB 68,85,85,85,85,85,85,85,85,85,86,102,102,102,102,102
 43252 DEFB 102,110,102,110,102,102,102,110

; Entry #b8 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E8
b43260 DEFB 4        ; Entry #b8 in descent table #R64460#dt252(#b252)
@label=DT253E8
 43261 DEFB 0        ; Entry #b8 in descent table #R64460#dt253(#b253)
@label=DT254E8
 43262 DEFB 4        ; Entry #b8 in descent table #R64460#dt254(#b254)
@label=DT255E8
 43263 DEFB 64       ; Entry #b8 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 9
;
; Used by the routine at #R24684.
b43264 DEFB 84,84,89,94,100,81,109,114,109,114,109,114,109,130,103,137
 43280 DEFB 141,145,149,153,81,81,81,81,165,178,81,81,201,81,48,49
 43296 DEFB 50,51,52,53,54,55,81,81,81,14,17,20,24,28,32,37
 43312 DEFB 81,81,81,81,50,55,61,65,69,74,80,86,91,104,113,119
 43328 DEFB 113,119,113,119,113,119,128,159,168,178,182,187,195,81,81,168
 43344 DEFB 229,241,81,81,81,81,37,53,68,81,81,104,115,129,145,164
 43360 DEFB 80,199,211,222,81,81,81,81,81,236,81,152,103,81,81,81
 43376 DEFB 81,81,81,81,81,20,64,65,66,67,68,69,70,71,81,81
 43392 DEFB 81,81,81,50,81,140,89,81,81,81,81,81,165,165,216,87

; Skool UDG MSB indicators for row 9
;
; Used by the routine at #R24684.
b43408 DEFB 0,0,0,0,0,0,0,0,0,0,7,15,0,15,15,15
 43424 DEFB 15,15,15,9,12,48,208,240,112,0,65,0,0,68,0,0
 43440 DEFB 17,0,0,0

; BRIGHT/PAPER attributes for skool UDGs in row 9
;
; Used by the routine at #R24684.
b43444 DEFB 255,255,255,255,255,255,255,111,255,255,102,102,238,238,102,255
 43460 DEFB 255,255,255,102,102,102,102,102,102,102,117,85,85,85,95,255
 43476 DEFB 255,255,255,254,231,126,102,238,102,102,102,102,69,85,69,84
 43492 DEFB 68,85,85,85,85,85,85,85,85,85,85,255,255,255,255,102
 43508 DEFB 102,110,238,230,102,102,221,110

; Entry #b9 in descent tables #b252-#b255
;
; Used by the routine at #R64460.
@label=DT252E9
b43516 DEFB 0        ; Entry #b9 in descent table #R64460#dt252(#b252)
@label=DT253E9
 43517 DEFB 4        ; Entry #b9 in descent table #R64460#dt253(#b253)
@label=DT254E9
 43518 DEFB 0        ; Entry #b9 in descent table #R64460#dt254(#b254)
@label=DT255E9
 43519 DEFB 64       ; Entry #b9 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 10
;
; Used by the routine at #R24684.
b43520 DEFB 81,81,87,95,101,106,110,115,119,115,119,115,119,131,103,138
 43536 DEFB 142,146,150,154,81,81,81,165,178,81,81,81,201,81,56,57
 43552 DEFB 58,59,60,61,62,63,255,7,12,15,18,21,25,29,33,38
 43568 DEFB 41,43,43,46,51,56,62,66,70,75,81,87,92,104,114,120
 43584 DEFB 114,120,114,120,114,120,128,80,168,178,182,118,195,81,81,168
 43600 DEFB 230,242,89,81,81,81,38,54,69,82,81,105,116,81,146,80
 43616 DEFB 182,200,212,81,81,81,81,81,81,236,81,152,103,81,81,81
 43632 DEFB 81,81,81,81,81,21,72,73,74,75,76,77,78,79,81,81
 43648 DEFB 81,81,81,51,81,81,140,89,81,81,81,81,165,165,216,87

; Skool UDG MSB indicators for row 10
;
; Used by the routine at #R24684.
b43664 DEFB 0,0,0,0,0,0,0,0,0,1,15,15,15,15,15,15
 43680 DEFB 15,14,15,9,12,48,208,160,224,0,65,0,0,68,0,0
 43696 DEFB 17,0,0,0

; BRIGHT/PAPER attributes for skool UDGs in row 10
;
; Used by the routine at #R24684.
b43700 DEFB 255,247,255,255,255,255,255,111,255,255,102,110,238,238,102,255
 43716 DEFB 255,255,255,101,86,101,100,102,102,102,117,85,85,85,95,255
 43732 DEFB 255,255,255,254,231,238,102,238,102,230,102,110,85,85,85,85
 43748 DEFB 69,85,85,85,85,85,85,85,85,85,85,255,255,255,255,102
 43764 DEFB 102,110,238,238,102,102,221,110

; Unused
u43772 DEFB 80

; Entry #b10 in descent table #b253
;
; Used by the routine at #R64460.
@label=DT253E10
b43773 DEFB 0        ; Entry #b10 in descent table #R64460#dt253(#b253)

; Unused
u43774 DEFB 77

; Entry #b10 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E10
b43775 DEFB 68       ; Entry #b10 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 11
;
; Used by the routine at #R24684.
b43776 DEFB 81,81,87,95,102,107,111,116,120,116,120,116,120,131,103,81
 43792 DEFB 81,81,81,81,81,158,165,178,81,81,81,81,202,187,214,215
 43808 DEFB 80,80,80,80,80,80,0,8,13,16,19,22,26,30,34,39
 43824 DEFB 42,44,45,167,52,57,63,67,71,76,82,88,63,105,115,121
 43840 DEFB 115,121,115,121,115,121,128,80,168,178,182,118,196,109,216,222
 43856 DEFB 231,243,254,89,81,81,81,177,70,83,81,81,81,130,78,165
 43872 DEFB 183,81,81,81,81,81,81,81,81,237,81,152,246,81,81,81
 43888 DEFB 81,81,81,81,81,22,80,80,80,80,80,80,80,80,41,37
 43904 DEFB 37,41,43,51,81,81,81,140,89,81,81,81,84,84,27,87

; Skool UDG MSB indicators for row 11
;
; Used by the routine at #R24684.
b43920 DEFB 0,0,0,0,0,0,0,0,0,3,15,15,14,15,15,15
 43936 DEFB 15,14,15,11,14,1,192,82,128,0,65,128,0,68,0,48
 43952 DEFB 243,0,0,34

; BRIGHT/PAPER attributes for skool UDGs in row 11
;
; Used by the routine at #R24684.
b43956 DEFB 255,247,255,255,255,255,255,238,238,238,238,238,238,238,127,255
 43972 DEFB 255,255,255,255,255,255,255,255,255,255,117,238,238,238,239,255
 43988 DEFB 255,255,255,254,231,238,102,238,102,238,102,102,85,85,85,84
 44004 DEFB 85,85,85,85,85,85,85,85,85,85,85,255,255,255,255,238
 44020 DEFB 238,238,238,238,230,110,238,238

; Unused
u44028 DEFB 22,100,56

; Entry #b11 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E11
b44031 DEFB 68       ; Entry #b11 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 12
;
; Used by the routine at #R24684.
b44032 DEFB 81,81,87,95,103,81,112,117,112,117,112,117,112,131,103,81
 44048 DEFB 81,81,81,81,158,165,178,81,81,81,81,81,201,81,81,81
 44064 DEFB 103,81,81,81,81,244,1,9,1,9,1,9,1,9,1,9
 44080 DEFB 1,9,1,47,53,58,64,68,72,77,208,89,93,106,116,122
 44096 DEFB 116,122,116,122,116,122,128,80,168,178,182,118,197,207,81,104
 44112 DEFB 232,244,255,10,19,81,81,177,140,84,81,81,81,131,147,166
 44128 DEFB 184,81,81,81,81,81,81,81,81,236,81,152,103,81,249,81
 44144 DEFB 81,81,81,81,81,23,81,81,81,81,81,244,1,39,1,9
 44160 DEFB 9,1,9,51,81,81,81,81,140,89,81,81,81,81,87,87

; Skool UDG MSB indicators for row 12
;
; Used by the routine at #R24684.
b44176 DEFB 0,0,0,0,0,0,0,0,0,3,15,15,15,15,13,15
 44192 DEFB 15,14,15,13,30,129,64,112,128,0,65,32,0,68,0,79
 44208 DEFB 31,0,0,0

; BRIGHT/PAPER attributes for skool UDGs in row 12
;
; Used by the routine at #R24684.
b44212 DEFB 255,247,255,255,255,255,255,238,238,238,238,238,238,238,127,255
 44228 DEFB 110,238,238,255,255,255,255,255,255,255,117,238,238,238,239,255
 44244 DEFB 255,255,255,254,231,238,102,102,110,238,238,238,238,85,85,68
 44260 DEFB 85,85,85,85,85,85,85,85,85,85,86,102,110,238,238,238
 44276 DEFB 238,238,238,238,238,102,238,238

; Unused
u44284 DEFB 83,100,56

; Entry #b12 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E12
b44287 DEFB 68       ; Entry #b12 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 13
;
; Used by the routine at #R24684.
b44288 DEFB 85,85,90,96,80,80,113,118,113,118,113,118,113,132,136,139
 44304 DEFB 143,143,143,155,159,166,143,143,143,143,143,143,203,208,208,208
 44320 DEFB 80,80,80,80,80,245,2,10,2,10,2,10,2,10,2,40
 44336 DEFB 2,40,2,40,54,59,208,208,208,78,80,59,208,107,117,123
 44352 DEFB 117,123,117,123,117,123,128,80,168,178,182,118,197,207,81,223
 44368 DEFB 233,245,0,81,20,29,39,55,36,87,81,81,81,81,148,167
 44384 DEFB 185,81,81,81,81,81,117,232,233,238,240,243,247,240,250,255
 44400 DEFB 6,8,10,12,14,24,80,80,80,80,80,245,2,10,2,10
 44416 DEFB 40,2,40,52,60,65,65,71,83,92,101,80,80,80,80,156

; Skool UDG MSB indicators for row 13
;
; Used by the routine at #R24684.
b44432 DEFB 0,0,0,0,0,0,0,0,0,3,15,15,15,12,5,7
 44448 DEFB 15,14,15,13,44,240,128,48,128,48,240,240,255,204,0,15
 44464 DEFB 31,255,238,17

; BRIGHT/PAPER attributes for skool UDGs in row 13
;
; Used by the routine at #R24684.
b44468 DEFB 255,247,255,255,255,255,255,238,238,238,238,238,238,238,127,255
 44484 DEFB 255,255,255,255,255,255,255,255,255,255,117,238,238,238,239,255
 44500 DEFB 255,255,255,254,231,238,102,102,110,238,238,238,238,68,68,68
 44516 DEFB 68,68,68,68,68,68,68,68,68,68,70,238,238,238,238,238
 44532 DEFB 238,238,254,238,238,230,102,110

; Unused
u44540 DEFB 93,240,248

; Entry #b13 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E13
b44543 DEFB 5        ; Entry #b13 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 14
;
; Used by the routine at #R24684.
b44544 DEFB 81,87,81,81,81,81,81,81,81,81,81,81,81,87,81,87
 44560 DEFB 144,147,81,81,81,81,81,81,186,81,191,81,186,81,81,81
 44576 DEFB 216,81,226,208,81,81,81,81,81,81,81,81,81,81,81,81
 44592 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,103,108,118,112
 44608 DEFB 118,112,118,112,118,112,128,80,168,178,182,118,197,207,217,224
 44624 DEFB 234,246,40,40,40,40,40,56,71,85,81,81,81,81,149,80
 44640 DEFB 103,81,81,81,81,81,231,180,180,239,241,244,180,248,251,0
 44656 DEFB 7,9,11,13,15,25,81,128,81,81,81,81,81,81,81,81
 44672 DEFB 81,81,81,81,61,81,66,209,103,103,102,81,81,130,141,157

; Skool UDG MSB indicators for row 14
;
; Used by the routine at #R24684.
b44688 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6
 44704 DEFB 10,10,15,15,60,240,192,32,0,33,120,121,255,205,0,0
 44720 DEFB 0,171,34,119

; BRIGHT/PAPER attributes for skool UDGs in row 14
;
; Used by the routine at #R24684.
b44724 DEFB 68,68,68,68,68,68,68,68,119,119,119,119,119,119,119,255
 44740 DEFB 119,119,119,119,119,119,119,119,119,119,119,119,119,119,255,255
 44756 DEFB 255,255,255,254,231,238,102,102,238,102,102,102,110,68,68,68
 44772 DEFB 68,68,68,68,68,68,68,68,68,68,71,119,119,119,119,119
 44788 DEFB 119,119,254,238,231,119,127,255

; Unused
u44796 DEFB 95,112,248

; Entry #b14 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E14
b44799 DEFB 69       ; Entry #b14 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 15
;
; Used by the routine at #R24684.
b44800 DEFB 81,87,81,81,81,81,81,81,81,81,81,81,81,87,81,140
 44816 DEFB 89,148,151,81,81,167,179,184,187,187,187,187,204,209,81,81
 44832 DEFB 216,81,227,233,81,81,81,81,81,81,81,81,81,81,81,81
 44848 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,103,109,118,112
 44864 DEFB 118,112,118,112,118,112,128,80,169,178,182,118,197,208,115,165
 44880 DEFB 103,152,85,85,85,85,41,57,72,87,81,81,81,81,150,168
 44896 DEFB 186,81,81,81,81,81,81,81,81,81,81,81,81,81,252,1
 44912 DEFB 81,81,81,81,81,26,81,128,81,81,81,81,81,81,81,81
 44928 DEFB 81,81,81,81,61,66,69,165,84,93,103,112,120,131,142,158

; Skool UDG MSB indicators for row 15
;
; Used by the routine at #R24684.
b44944 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6
 44960 DEFB 10,10,15,12,4,48,128,48,128,0,0,49,0,69,0,0
 44976 DEFB 0,238,255,255

; BRIGHT/PAPER attributes for skool UDGs in row 15
;
; Used by the routine at #R24684.
b44980 DEFB 68,68,68,68,68,68,68,68,71,119,119,119,119,119,119,255
 44996 DEFB 119,119,119,119,119,119,119,119,119,119,119,119,119,119,255,255
 45012 DEFB 255,255,255,254,231,238,102,102,238,102,102,102,110,68,68,68
 45028 DEFB 68,68,68,68,68,68,68,68,68,68,64,119,119,119,119,119
 45044 DEFB 119,119,254,238,119,119,127,255

; Unused
u45052 DEFB 132,240,248

; Entry #b15 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E15
b45055 DEFB 69       ; Entry #b15 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 16
;
; Used by the routine at #R24684.
b45056 DEFB 81,87,91,97,104,108,108,108,108,108,108,108,127,133,81,81
 45072 DEFB 140,89,152,151,81,81,81,81,81,81,81,81,81,81,81,81
 45088 DEFB 217,80,228,234,240,195,3,80,80,80,80,80,80,80,80,80
 45104 DEFB 80,80,80,80,80,80,80,80,80,80,80,80,94,131,118,112
 45120 DEFB 118,112,118,112,118,112,128,160,170,179,183,188,198,209,165,178
 45136 DEFB 103,247,2,85,85,85,42,57,152,86,81,81,81,87,151,169
 45152 DEFB 187,81,81,81,81,81,81,81,81,81,81,81,81,81,253,2
 45168 DEFB 81,81,81,81,81,27,81,33,80,80,80,80,80,80,80,80
 45184 DEFB 80,80,80,80,62,67,165,72,85,94,104,113,121,132,143,83

; Skool UDG MSB indicators for row 16
;
; Used by the routine at #R24684.
b45200 DEFB 0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,10
 45216 DEFB 10,11,15,12,36,48,72,48,128,0,0,49,0,85,0,0
 45232 DEFB 0,221,255,254

; BRIGHT/PAPER attributes for skool UDGs in row 16
;
; Used by the routine at #R24684.
b45236 DEFB 68,68,68,68,68,68,68,204,204,119,119,119,119,119,119,255
 45252 DEFB 119,119,255,247,119,119,119,119,119,119,119,255,255,255,255,255
 45268 DEFB 255,255,255,254,238,238,102,102,230,102,102,102,236,68,68,68
 45284 DEFB 68,68,68,68,68,68,68,68,68,68,68,119,119,119,119,119
 45300 DEFB 119,119,254,231,119,119,127,255

; Unused
u45308 DEFB 135,112,248

; Entry #b16 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E16
b45311 DEFB 69       ; Entry #b16 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 17
;
; Used by the routine at #R24684.
b45312 DEFB 81,87,92,98,105,81,81,81,81,81,81,81,81,87,81,81
 45328 DEFB 81,140,89,156,160,81,81,81,81,81,81,81,81,81,81,81
 45344 DEFB 218,80,229,235,178,81,4,80,80,80,80,80,80,80,80,80
 45360 DEFB 80,80,80,80,80,80,80,80,80,80,80,80,95,110,80,80
 45376 DEFB 80,80,80,80,80,80,154,161,131,81,81,189,199,84,178,81
 45392 DEFB 103,195,3,12,12,12,43,57,152,87,81,81,81,132,152,170
 45408 DEFB 188,81,81,81,81,81,81,81,81,81,81,81,81,81,254,3
 45424 DEFB 81,81,81,81,81,87,30,78,80,80,80,80,80,80,80,80
 45440 DEFB 80,80,80,44,63,165,68,73,86,95,105,114,122,133,144,159

; Skool UDG MSB indicators for row 17
;
; Used by the routine at #R24684.
b45456 DEFB 0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,12
 45472 DEFB 0,3,1,8,52,240,72,112,128,0,0,49,0,35,0,0
 45488 DEFB 17,187,255,255

; BRIGHT/PAPER attributes for skool UDGs in row 17
;
; Used by the routine at #R24684.
b45492 DEFB 68,68,76,204,204,204,204,204,204,199,255,255,255,255,255,255
 45508 DEFB 119,119,255,247,119,119,119,119,119,119,119,255,255,255,255,119
 45524 DEFB 119,119,119,126,238,238,102,102,230,238,238,230,236,68,68,68
 45540 DEFB 68,68,68,68,68,68,68,68,68,68,68,119,119,119,119,119
 45556 DEFB 119,255,238,127,255,255,255,255

; Unused
u45564 DEFB 176,228,56

; Entry #b17 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E17
b45567 DEFB 70       ; Entry #b17 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 18
;
; Used by the routine at #R24684.
b45568 DEFB 81,87,93,99,99,99,99,99,99,99,99,99,99,134,81,81
 45584 DEFB 81,81,140,89,161,168,81,81,81,81,81,81,81,81,81,81
 45600 DEFB 219,80,230,236,241,246,5,11,11,11,11,11,11,11,11,11
 45616 DEFB 11,11,11,11,11,11,11,11,11,11,11,11,96,111,80,80
 45632 DEFB 80,80,80,80,80,80,80,162,171,84,84,89,200,81,81,81
 45648 DEFB 103,195,4,13,13,13,44,57,152,88,81,81,117,133,153,171
 45664 DEFB 189,201,213,81,81,81,81,81,81,81,81,81,81,81,254,3
 45680 DEFB 81,81,81,81,81,87,31,80,36,11,11,11,11,11,11,11
 45696 DEFB 40,80,44,53,165,68,178,74,87,96,106,115,123,134,145,160

; Skool UDG MSB indicators for row 18
;
; Used by the routine at #R24684.
b45712 DEFB 0,0,0,0,0,0,0,0,0,3,15,15,15,15,15,12
 45728 DEFB 0,1,8,8,52,240,72,240,224,0,0,49,0,34,143,15
 45744 DEFB 187,85,255,255

; BRIGHT/PAPER attributes for skool UDGs in row 18
;
; Used by the routine at #R24684.
b45748 DEFB 68,102,102,102,102,102,100,204,204,204,127,255,255,255,255,255
 45764 DEFB 119,119,119,255,255,255,255,255,255,255,255,255,255,255,255,119
 45780 DEFB 119,119,119,126,110,238,102,238,230,238,238,230,236,68,68,68
 45796 DEFB 68,68,68,68,68,68,68,68,68,68,68,119,255,255,255,255
 45812 DEFB 255,254,231,127,255,255,255,255

; Unused
u45820 DEFB 183,100,77

; Entry #b18 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E18
b45823 DEFB 0        ; Entry #b18 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 19
;
; Used by the routine at #R24684.
b45824 DEFB 81,86,80,80,80,80,80,80,80,80,80,80,80,80,85,85
 45840 DEFB 85,85,85,157,135,169,80,80,80,80,80,80,80,80,80,80
 45856 DEFB 80,80,231,237,242,247,6,6,6,6,6,6,6,6,6,6
 45872 DEFB 6,6,6,6,6,6,6,6,6,6,83,6,97,112,80,80
 45888 DEFB 80,80,80,80,80,80,80,154,172,43,43,190,201,80,80,80
 45904 DEFB 235,248,5,5,5,5,45,58,73,80,94,106,118,134,154,172
 45920 DEFB 190,202,214,81,81,81,81,81,81,81,81,81,81,81,207,4
 45936 DEFB 81,81,81,81,81,28,32,34,6,6,6,6,6,6,6,6
 45952 DEFB 41,80,45,54,80,80,80,75,88,97,107,116,124,135,146,87

; Skool UDG MSB indicators for row 19
;
; Used by the routine at #R24684.
b45968 DEFB 0,0,0,0,0,0,0,0,0,3,15,15,15,15,15,12
 45984 DEFB 0,1,15,8,60,240,176,240,224,0,0,19,0,119,15,15
 46000 DEFB 187,17,255,238

; BRIGHT/PAPER attributes for skool UDGs in row 19
;
; Used by the routine at #R24684.
b46004 DEFB 68,102,102,102,102,102,100,204,204,204,199,119,119,119,127,247
 46020 DEFB 119,119,119,119,119,119,119,119,119,119,119,119,119,119,127,119
 46036 DEFB 119,119,119,102,110,238,230,102,230,102,102,102,236,68,68,68
 46052 DEFB 68,68,68,68,68,68,68,68,68,68,68,119,119,119,119,119
 46068 DEFB 119,238,255,255,255,255,255,255

; Unused
u46076 DEFB 186,100,56

; Entry #b19 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E19
b46079 DEFB 64       ; Entry #b19 in descent table #R64460#dt255(#b255)

; Skool UDG references (LSBs) for row 20
;
; Used by the routine at #R24684.
b46080 DEFB 86,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80
 46096 DEFB 80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80
 46112 DEFB 80,80,80,80,80,248,208,208,208,208,208,208,208,31,208,208
 46128 DEFB 208,208,208,208,208,60,208,208,208,208,208,208,98,80,80,80
 46144 DEFB 80,80,80,80,80,80,80,80,173,80,80,80,80,80,80,80
 46160 DEFB 80,80,80,80,80,80,80,80,80,80,81,81,119,135,81,81
 46176 DEFB 81,81,81,81,81,81,81,81,81,81,81,81,81,36,122,5
 46192 DEFB 36,81,81,81,81,29,80,35,208,208,208,208,208,60,208,208
 46208 DEFB 42,80,159,166,80,80,80,80,80,80,80,80,80,80,147,90

; Skool UDG MSB indicators for row 20
;
; Used by the routine at #R24684.
b46224 DEFB 0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,8
 46240 DEFB 0,0,8,0,0,0,0,192,0,0,0,81,128,85,0,4
 46256 DEFB 136,0,0,34

; BRIGHT/PAPER attributes for skool UDGs in row 20
;
; Used by the routine at #R24684.
b46260 DEFB 71,102,102,102,102,102,100,68,68,68,71,119,119,119,127,247
 46276 DEFB 119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119
 46292 DEFB 119,119,119,118,102,102,102,102,102,102,102,102,102,68,68,68
 46308 DEFB 68,68,68,68,68,68,68,68,68,68,68,119,119,119,119,119
 46324 DEFB 126,238,255,255,255,255,255,255

; Unused
u46332 DEFB 179,228,77

; Entry #b20 in descent table #b255
;
; Used by the routine at #R64460.
@label=DT255E20
b46335 DEFB 32       ; Entry #b20 in descent table #R64460#dt255(#b255)

; Play area column pointers (Q values)
;
; Used by the routine at #R24684. Each byte (Q value) here corresponds to one
; of the 192 columns of the play area (x-coordinates 0-191). The Q value for an
; x-coordinate uniquely determines the appearance of the corresponding column
; of the play area; in other words, play area columns that have the same Q
; value are identical in appearance.
; .
; The first 32 Q values correspond to x-coordinates 0-31. In this range,
; x-coordinates 11 and 13 have the same Q value (#b11), and x-coordinates 28
; and 29 have the same Q value (#b27).
; .
; #UDGTABLE
; { #CALL:play_area(qvalues1,0,0,32,21,1,0,4) }
; TABLE#
@label=QVALUES
b46336 DEFB 0,1,2,3,4,5,6,7                 ; {0<=x<=31
 46344 DEFB 8,9,10,11,12,11,13,14           ;
 46352 DEFB 15,16,17,18,19,20,21,22         ;
 46360 DEFB 23,24,25,26,27,27,28,29         ; }
; The next 32 Q values correspond to x-coordinates 32-63. No two x-coordinates
; in this range have the same Q value.
; .
; #UDGTABLE
; { #CALL:play_area(qvalues2,32,0,32,21,1,0,4) }
; TABLE#
 46368 DEFB 30,31,32,33,34,35,36,37         ; {32<=x<=63
 46376 DEFB 38,39,40,41,42,43,44,45         ;
 46384 DEFB 46,47,48,49,50,51,52,53         ;
 46392 DEFB 54,55,56,57,58,59,60,61         ; }
; The next 32 Q values correspond to x-coordinates 64-95. In this range,
; x-coordinates 64, 66 and 68 have the same Q value (#b62), and x-coordinates
; 65, 67 and 69 have the same Q value (#b63).
; .
; #UDGTABLE
; { #CALL:play_area(qvalues3,64,0,32,21,1,0,4) }
; TABLE#
 46400 DEFB 62,63,62,63,62,63,64,65         ; {64<=x<=95
 46408 DEFB 66,67,68,69,70,71,72,73         ;
 46416 DEFB 74,75,76,77,78,79,80,81         ;
 46424 DEFB 82,83,84,85,86,87,88,89         ; }
; The next 32 Q values correspond to x-coordinates 96-127. In this range,
; x-coordinates 110, 112-120 and 122-127 have the same Q value (#b104).
; .
; #UDGTABLE
; { #CALL:play_area(qvalues4,96,0,32,21,1,0,4) }
; TABLE#
 46432 DEFB 90,91,92,93,94,95,96,97         ; {96<=x<=127
 46440 DEFB 98,99,100,101,102,103,104,105   ;
 46448 DEFB 104,104,104,104,104,104,104,104 ;
 46456 DEFB 104,106,104,104,104,104,104,104 ; }
; The next 32 Q values correspond to x-coordinates 128-159. In this range,
; x-coordinates 128-130, 138-146 and 148-157 have the same Q value (#b104).
; .
; #UDGTABLE
; { #CALL:play_area(qvalues5,128,0,32,21,1,0,4) }
; TABLE#
 46464 DEFB 104,104,104,107,108,109,110,111 ; {128<=x<=159
 46472 DEFB 112,113,104,104,104,104,104,104 ;
 46480 DEFB 104,104,104,114,104,104,104,104 ;
 46488 DEFB 104,104,104,104,104,104,115,116 ; }
; The next 32 Q values correspond to x-coordinates 160-191. In this range,
; x-coordinates 169, 171, 173 and 175 have the same Q value (#b126), and
; x-coordinates 170, 172 and 174 have the same Q value (#b127).
; .
; #UDGTABLE
; { #CALL:play_area(qvalues6,160,0,32,21,1,0,4) }
; TABLE#
 46496 DEFB 117,118,119,120,121,122,123,124 ; {160<=x<=191
 46504 DEFB 125,126,127,126,127,126,127,126 ;
 46512 DEFB 128,129,130,131,132,133,134,135 ;
 46520 DEFB 136,137,138,139,140,141,142,143 ; }

; Main timetable
;
; Used by the routine at #R63309.
@label=TIMETABLE
b46528 DEFB 59       ; #b192: #LESSON59(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46529 DEFB 37       ; #b193: #LESSON37(MR CREAK - BLUE ROOM)
 46530 DEFB 52       ; #b194: #LESSON52(ASSEMBLY)
 46531 DEFB 41       ; #b195: #LESSON41(MR WITHIT - BLUE ROOM)
 46532 DEFB 47       ; #b196: #LESSON47(MR ROCKITT - SCIENCE LAB)
 46533 DEFB 58       ; #b197: #LESSON58(PLAYTIME)
 46534 DEFB 45       ; #b198: #LESSON45(MR WITHIT - SCIENCE LAB)
 46535 DEFB 53       ; #b199: #LESSON53(REVISION LIBRARY)
 46536 DEFB 56       ; #b200: #LESSON56(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46537 DEFB 38       ; #b201: #LESSON38(MR CREAK - BLUE ROOM)
 46538 DEFB 54       ; #b202: #LESSON54(REVISION LIBRARY)
 46539 DEFB 50       ; #b203: #LESSON50(DINNER (MR WACKER))
 46540 DEFB 55       ; #b204: #LESSON55(PLAYTIME)
 46541 DEFB 39       ; #b205: #LESSON39(MR CREAK - YELLOW ROOM)
 46542 DEFB 52       ; #b206: #LESSON52(ASSEMBLY)
 46543 DEFB 46       ; #b207: #LESSON46(MR WITHIT - SCIENCE LAB)
 46544 DEFB 59       ; #b208: #LESSON59(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46545 DEFB 40       ; #b209: #LESSON40(MR CREAK - YELLOW ROOM)
 46546 DEFB 52       ; #b210: #LESSON52(ASSEMBLY)
 46547 DEFB 48       ; #b211: #LESSON48(MR ROCKITT - SCIENCE LAB)
 46548 DEFB 54       ; #b212: #LESSON54(REVISION LIBRARY)
 46549 DEFB 57       ; #b213: #LESSON57(PLAYTIME)
 46550 DEFB 49       ; #b214: #LESSON49(MR ROCKITT - SCIENCE LAB)
 46551 DEFB 37       ; #b215: #LESSON37(MR CREAK - BLUE ROOM)
 46552 DEFB 58       ; #b216: #LESSON58(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46553 DEFB 48       ; #b217: #LESSON48(MR ROCKITT - SCIENCE LAB)
 46554 DEFB 54       ; #b218: #LESSON54(REVISION LIBRARY)
 46555 DEFB 51       ; #b219: #LESSON51(DINNER (MR WITHIT))
 46556 DEFB 58       ; #b220: #LESSON58(PLAYTIME)
 46557 DEFB 47       ; #b221: #LESSON47(MR ROCKITT - SCIENCE LAB)
 46558 DEFB 52       ; #b222: #LESSON52(ASSEMBLY)
 46559 DEFB 39       ; #b223: #LESSON39(MR CREAK - YELLOW ROOM)
 46560 DEFB 59       ; #b224: #LESSON59(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46561 DEFB 53       ; #b225: #LESSON53(REVISION LIBRARY)
 46562 DEFB 49       ; #b226: #LESSON49(MR ROCKITT - SCIENCE LAB)
 46563 DEFB 52       ; #b227: #LESSON52(ASSEMBLY)
 46564 DEFB 58       ; #b228: #LESSON58(PLAYTIME)
 46565 DEFB 41       ; #b229: #LESSON41(MR WITHIT - BLUE ROOM)
 46566 DEFB 54       ; #b230: #LESSON54(REVISION LIBRARY)
 46567 DEFB 47       ; #b231: #LESSON47(MR ROCKITT - SCIENCE LAB)
 46568 DEFB 55       ; #b232: #LESSON55(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46569 DEFB 48       ; #b233: #LESSON48(MR ROCKITT - SCIENCE LAB)
 46570 DEFB 40       ; #b234: #LESSON40(MR CREAK - YELLOW ROOM)
 46571 DEFB 54       ; #b235: #LESSON54(REVISION LIBRARY)
 46572 DEFB 56       ; #b236: #LESSON56(PLAYTIME)
 46573 DEFB 45       ; #b237: #LESSON45(MR WITHIT - SCIENCE LAB)
 46574 DEFB 52       ; #b238: #LESSON52(ASSEMBLY)
 46575 DEFB 44       ; #b239: #LESSON44(MR WITHIT - YELLOW ROOM)
 46576 DEFB 59       ; #b240: #LESSON59(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46577 DEFB 49       ; #b241: #LESSON49(MR ROCKITT - SCIENCE LAB)
 46578 DEFB 37       ; #b242: #LESSON37(MR CREAK - BLUE ROOM)
 46579 DEFB 52       ; #b243: #LESSON52(ASSEMBLY)
 46580 DEFB 59       ; #b244: #LESSON59(PLAYTIME)
 46581 DEFB 42       ; #b245: #LESSON42(MR WITHIT - BLUE ROOM)
 46582 DEFB 53       ; #b246: #LESSON53(REVISION LIBRARY)
 46583 DEFB 40       ; #b247: #LESSON40(MR CREAK - YELLOW ROOM)
 46584 DEFB 57       ; #b248: #LESSON57(PLAYTIME) (this is an
                     ; #FACT#initialPlaytimes(initial playtime))
 46585 DEFB 46       ; #b249: #LESSON46(MR WITHIT - SCIENCE LAB)
 46586 DEFB 48       ; #b250: #LESSON48(MR ROCKITT - SCIENCE LAB)
 46587 DEFB 53       ; #b251: #LESSON53(REVISION LIBRARY)
 46588 DEFB 58       ; #b252: #LESSON58(PLAYTIME)
 46589 DEFB 39       ; #b253: #LESSON39(MR CREAK - YELLOW ROOM)
 46590 DEFB 52       ; #b254: #LESSON52(ASSEMBLY)
 46591 DEFB 49       ; #b255: #LESSON49(MR ROCKITT - SCIENCE LAB)

; Mirrored values of #b0 to #b255
;
; Used by the routine at #R24576 to flip sprite graphic data.
b46592 DEFB 0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240
 46608 DEFB 8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248
 46624 DEFB 4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244
 46640 DEFB 12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252
 46656 DEFB 2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242
 46672 DEFB 10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250
 46688 DEFB 6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246
 46704 DEFB 14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254
 46720 DEFB 1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241
 46736 DEFB 9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249
 46752 DEFB 5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245
 46768 DEFB 13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253
 46784 DEFB 3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243
 46800 DEFB 11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251
 46816 DEFB 7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247
 46832 DEFB 15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255

@defs=46848:32
; Character buffer for little girl no. 1 (#b183)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R46885.
@label=GIRL1CBUF
b46848 DEFS 32
 46880 DEFB 72       ; Initial animatory state: #AS72 (see #R62910)
 46881 DEFB 117,17   ; Initial location (see #R62910)
 46883 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF183_36
 46884 DEFB 36       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 1 (#b183)
;
; Used by the routine at #R63309.
@label=PTGIRL1
b46885 DEFB 0        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 46886 DEFB 12       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R53052(#b12)
                     ; (Dinner hall)
 46887 DEFB 0        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 46888 DEFB 10       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52796(#b10)
                     ; (Kitchen)
 46889 DEFB 0        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 46890 DEFB 0        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 46891 DEFB 2        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 46892 DEFB 0        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 46893 DEFB 0        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 46894 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 46895 DEFB 0        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 46896 DEFB 2        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 46897 DEFB 12       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R53052(#b12) (Dinner hall)
 46898 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 46899 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 46900 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 46901 DEFB 0        ; Lesson #LESSON53 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 46902 DEFB 2        ; Lesson #LESSON54 (REVISION LIBRARY): #R51772(#b2)
                     ; (Middle-floor classroom)
 46903 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 46904 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 46905 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 46906 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 46907 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Skool region identifier table for the top floor
;
; Used by the routine at #R25554. The skool region identifier table for the
; middle floor is at #R47164, and the table for the bottom floor is at #R47420.
@label=TOPFLOOR
b46908 DEFB 72,189   ; Region #b189: top floor, left of the left study door in
                     ; the boys' skool (x<=72)
 46910 DEFB 96,194   ; Region #b194: top floor, right of the left study door in
                     ; the boys' skool (72<x<=96)
 46912 DEFB 159,191  ; Region #b191: mid-air (96<x<=159)
 46914 DEFB 224,196  ; Region #b196: top floor in the girls' skool (x>159)

; Unused
s46916 DEFS 8

; Graphic data for animatory states #b0-#b79 (UDG byte 1/8)
;
; Used by the routine at #R24576.
b46924 DEFB 32,0,69,49,112,16,0,224,224,224,0,1,8,0,0,0
 46940 DEFB 0,0,0,0,0,0,0,255,127,0,128,0,15,7,0,248
 46956 DEFB 240,127,7,240,0,2,127,128,128,0,0,96,0,248,0,0
 46972 DEFB 0,0,127,0,255,192,1,128,20,0,127,79,0,127,0,255
 46988 DEFB 16,7,0,255,0,0,0,248,0,0,0,0,0,0,0,0
 47004 DEFB 0,0,0,0,0,0,0,0,0,0,0,47,0,0,2,0
 47020 DEFB 240,0,1,0,62,64,0,3,0,254,0,0,0,0,0,0
 47036 DEFB 62,63,0,0,0,3,7,0,224,224,63,7,224,0,0,5
 47052 DEFB 0,120,0,126,0,0,0,95,0,128,0,5,0,248,127,0
 47068 DEFB 0,0,3,223,0,0,63,31,0,252,252,0,0,0,0,33
 47084 DEFB 0,163,0,132,0,4,0,127,239,0,127,205,24,60,73,0
 47100 DEFB 0,3,0,254

@defs=47104:32
; Character buffer for little girl no. 2 (#b184)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R47141.
b47104 DEFS 32
 47136 DEFB 200      ; Initial animatory state: #AS200 (see #R62910)
 47137 DEFB 114,17   ; Initial location (see #R62910)
 47139 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF184_36
 47140 DEFB 36       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 2 (#b184)
;
; Used by the routine at #R63309.
@label=PTGIRL2
b47141 DEFB 0        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47142 DEFB 12       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R53052(#b12)
                     ; (Dinner hall)
 47143 DEFB 0        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47144 DEFB 10       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52796(#b10)
                     ; (Kitchen)
 47145 DEFB 0        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47146 DEFB 2        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47147 DEFB 2        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47148 DEFB 0        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47149 DEFB 0        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47150 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47151 DEFB 0        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 47152 DEFB 2        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 47153 DEFB 12       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R53052(#b12) (Dinner hall)
 47154 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 47155 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 47156 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 47157 DEFB 2        ; Lesson #LESSON53 (REVISION LIBRARY): #R51772(#b2)
                     ; (Middle-floor classroom)
 47158 DEFB 2        ; Lesson #LESSON54 (REVISION LIBRARY): #R51772(#b2)
                     ; (Middle-floor classroom)
 47159 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 47160 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 47161 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 47162 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 47163 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Skool region identifier table for the middle floor
;
; Used by the routine at #R25554. The skool region identifier table for the top
; floor is at #R46908, and the table for the bottom floor is at #R47420.
@label=MIDFLOOR
b47164 DEFB 63,190   ; Region #b190: middle floor, left of the far wall of the
                     ; Science Lab storeroom (x<=63)
 47166 DEFB 76,191   ; Region #b191: mid-air (63<x<=76)
 47168 DEFB 96,193   ; Region #b193: near the middle-floor window in the boys'
                     ; skool (76<x<=96)
 47170 DEFB 159,191  ; Region #b191: mid-air (96<x<=159)
 47172 DEFB 224,195  ; Region #b195: middle floor in the girls' skool (x>159)

; Unused
s47174 DEFS 6

; Graphic data for animatory states #b0-#b79 (UDG mask byte 1/8)
;
; Used by the routine at #R24576.
b47180 DEFB 47,255,69,53,116,215,254,255,255,255,255,255,235,243,255,255
@bfix=DEFB 255,223,255,255,255,254,7,255,127,255,191,240,239,231,127,251
 47196 DEFB 255,223,255,255,255,254,7,255,127,255,191,240,239,199,127,251
 47212 DEFB 247,127,231,247,255,250,127,191,191,255,255,110,255,251,255,255
 47228 DEFB 253,255,127,7,255,223,249,191,212,255,127,79,255,127,7,255
@bfix=DEFB 215,247,195,255,255,252,63,251,255,255,255,135,248,127,255,255
 47244 DEFB 215,247,195,255,255,253,63,251,255,255,0,135,248,127,255,255
@bfix=DEFB 255,135,131,248,63,255,255,253,131,255,255,175,127,255,250,255
 47260 DEFB 255,135,131,248,63,0,255,253,131,255,255,175,127,255,250,255
 47276 DEFB 247,255,253,255,190,95,255,251,135,254,255,255,255,239,249,255
 47292 DEFB 190,191,255,127,255,251,247,255,239,239,191,247,239,255,255,245
 47308 DEFB 255,123,251,126,255,255,195,95,255,191,252,245,63,251,127,255
 47324 DEFB 195,255,251,223,255,224,191,159,15,253,253,255,255,255,255,161
 47340 DEFB 255,171,255,133,255,228,255,127,239,127,127,205,219,189,73,255
 47356 DEFB 252,115,3,254

@defs=47360:32
; Character buffer for little girl no. 3 (#b185)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R47397.
b47360 DEFS 32
 47392 DEFB 72       ; Initial animatory state: #AS72 (see #R62910)
 47393 DEFB 120,17   ; Initial location (see #R62910)
 47395 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF185_36
 47396 DEFB 36       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 3 (#b185)
;
; Used by the routine at #R63309.
@label=PTGIRL3
b47397 DEFB 0        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47398 DEFB 2        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47399 DEFB 0        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47400 DEFB 10       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52796(#b10)
                     ; (Kitchen)
 47401 DEFB 12       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R53052(#b12)
                     ; (Dinner hall)
 47402 DEFB 2        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47403 DEFB 0        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47404 DEFB 0        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47405 DEFB 2        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51772(#b2)
                     ; (Middle-floor classroom)
 47406 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47407 DEFB 0        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 47408 DEFB 2        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 47409 DEFB 10       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52796(#b10) (Kitchen)
 47410 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 47411 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 47412 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 47413 DEFB 0        ; Lesson #LESSON53 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 47414 DEFB 0        ; Lesson #LESSON54 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 47415 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 47416 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 47417 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 47418 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 47419 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Skool region identifier table for the bottom floor
;
; Used by the routine at #R25554. The skool region identifier table for the top
; floor is at #R46908, and the table for the middle floor is at #R47164.
@label=BOTFLOOR
b47420 DEFB 224,191  ; Region #b191: Anywhere on the bottom floor

; Locations of doors
;
; Used by the routines at #R28767 and #R28877.
@label=DOORLOCS
b47422 DEFB 72,3     ; Left study door
 47424 DEFB 83,3     ; Right study door
 47426 DEFB 54,10    ; Science Lab storeroom door
 47428 DEFB 94,17    ; Boys' skool door
 47430 DEFB 133,17   ; Skool gate

; Unused
s47432 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG byte 2/8)
;
; Used by the routine at #R24576.
b47436 DEFB 32,0,50,203,139,16,1,192,192,192,0,3,20,12,0,0
 47452 DEFB 0,32,0,0,0,0,248,255,126,0,128,15,15,3,128,248
 47468 DEFB 32,126,11,208,0,3,63,128,128,0,0,144,0,248,0,0
 47484 DEFB 2,0,32,248,255,192,7,192,31,0,255,147,0,2,248,127
 47500 DEFB 40,3,60,251,0,3,192,184,0,0,0,120,7,128,0,0
 47516 DEFB 0,120,124,7,192,0,0,2,124,0,0,127,128,0,7,0
 47532 DEFB 248,0,1,0,31,192,0,2,120,126,0,0,0,16,6,0
 47548 DEFB 127,63,0,0,0,7,7,0,240,224,63,7,224,0,0,5
 47564 DEFB 0,252,4,118,0,0,60,91,0,128,3,5,192,184,247,0
 47580 DEFB 60,0,1,219,0,31,79,25,240,252,252,0,0,0,0,66
 47596 DEFB 0,86,0,66,0,1,0,255,102,128,255,126,36,66,42,0
 47612 DEFB 3,7,252,170

@defs=47616:32
; Character buffer for little girl no. 4 (#b186)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R47653.
b47616 DEFS 32
 47648 DEFB 200      ; Initial animatory state: #AS200 (see #R62910)
 47649 DEFB 160,17   ; Initial location (see #R62910)
 47651 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF186_36
 47652 DEFB 38       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 4 (#b186)
;
; Used by the routine at #R63309.
@label=PTGIRL4
b47653 DEFB 0        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47654 DEFB 2        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47655 DEFB 2        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47656 DEFB 2        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47657 DEFB 0        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47658 DEFB 2        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47659 DEFB 0        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47660 DEFB 10       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R52796(#b10) (Kitchen)
 47661 DEFB 0        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47662 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47663 DEFB 2        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 47664 DEFB 0        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 47665 DEFB 10       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52796(#b10) (Kitchen)
 47666 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 47667 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 47668 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 47669 DEFB 2        ; Lesson #LESSON53 (REVISION LIBRARY): #R51772(#b2)
                     ; (Middle-floor classroom)
 47670 DEFB 0        ; Lesson #LESSON54 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 47671 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 47672 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 47673 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 47674 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 47675 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; ERIC location identifier table for the top floor
;
; Used by the routine at #R25557. The location identifier table for the middle
; floor is at #R47932, and the table for the bottom floor is at #R48188.
@label=ERICLOCTF
b47676 DEFB 23,7     ; Location 7: Blue Room (x<=23)
 47678 DEFB 29,2     ; Location 2: Revision Library, outside the Blue Room
                     ; (23<x<=29)
 47680 DEFB 40,5     ; Location 5: Revision Library, outside the Yellow Room
                     ; (29<x<=40)
 47682 DEFB 63,8     ; Location 8: Yellow Room (40<x<=63)
 47684 DEFB 224,0    ; Location 0: anywhere else on the top floor (x>63;
                     ; forbidden)

; Unused
s47686 DEFS 6

; Graphic data for animatory states #b0-#b79 (UDG mask byte 2/8)
;
; Used by the routine at #R24576.
b47692 DEFB 47,127,178,203,139,214,253,255,255,255,255,255,213,237,255,255
 47708 DEFB 255,161,255,255,254,254,251,255,126,255,191,239,239,251,191,251
 47724 DEFB 47,126,235,215,255,251,191,191,191,254,248,148,63,251,255,255
 47740 DEFB 194,254,160,251,255,223,247,223,223,254,255,147,254,130,251,127
 47756 DEFB 170,251,188,251,255,251,207,187,254,31,243,123,247,191,252,63
 47772 DEFB 131,123,125,247,223,252,31,2,125,255,255,127,191,255,247,255
 47788 DEFB 251,255,253,255,223,223,255,250,123,126,255,255,225,215,246,255
 47804 DEFB 127,191,127,127,255,247,247,255,247,239,191,247,239,255,254,245
 47820 DEFB 255,253,245,118,255,159,189,91,255,191,251,245,223,187,247,255
 47836 DEFB 61,255,253,219,222,223,79,25,247,253,253,255,222,127,255,66
 47852 DEFB 255,86,255,66,255,249,255,255,102,191,255,126,165,66,170,255
 47868 DEFB 139,247,253,170

@defs=47872:32
; Character buffer for little girl no. 5 (#b187)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R47909.
b47872 DEFS 32
 47904 DEFB 72       ; Initial animatory state: #AS72 (see #R62910)
 47905 DEFB 163,17   ; Initial location (see #R62910)
 47907 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF187_36
 47908 DEFB 38       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 5 (#b187)
;
; Used by the routine at #R63309.
@label=PTGIRL5
b47909 DEFB 0        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47910 DEFB 2        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47911 DEFB 2        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47912 DEFB 2        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47913 DEFB 0        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 47914 DEFB 2        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47915 DEFB 2        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 47916 DEFB 10       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R52796(#b10) (Kitchen)
 47917 DEFB 0        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47918 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 47919 DEFB 2        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 47920 DEFB 0        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 47921 DEFB 12       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R53052(#b12) (Dinner hall)
 47922 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 47923 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 47924 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 47925 DEFB 2        ; Lesson #LESSON53 (REVISION LIBRARY): #R51772(#b2)
                     ; (Middle-floor classroom)
 47926 DEFB 0        ; Lesson #LESSON54 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 47927 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 47928 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 47929 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 47930 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 47931 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; ERIC location identifier table for the middle floor
;
; Used by the routine at #R25557. The location identifier table for the top
; floor is at #R47676, and the table for the bottom floor is at #R48188.
@label=ERICLOCMF
b47932 DEFB 30,2     ; Location 2: left of the Science Lab doorway (x<=30)
 47934 DEFB 53,6     ; Location 6: Science Lab (30<x<=53)
 47936 DEFB 224,0    ; Location 0: anywhere else on the middle floor (x>53;
                     ; forbidden)

; Unused
s47938 DEFS 10

; Graphic data for animatory states #b0-#b79 (UDG byte 3/8)
;
; Used by the routine at #R24576.
b47948 DEFB 160,128,74,4,4,9,2,128,132,128,0,7,36,18,0,0
 47964 DEFB 0,126,0,0,0,0,124,255,42,0,128,7,15,2,192,248
 47980 DEFB 64,42,11,80,0,3,127,128,128,1,7,11,192,252,0,0
 47996 DEFB 46,0,0,124,255,0,11,192,7,0,255,162,0,3,124,255
 48012 DEFB 56,1,79,255,0,4,240,248,1,224,12,252,15,192,3,192
 48028 DEFB 108,252,130,8,32,3,224,90,130,0,0,123,128,0,7,0
 48044 DEFB 184,0,1,0,63,192,0,4,92,62,0,0,22,40,9,0
 48060 DEFB 119,26,0,0,0,7,5,0,112,160,26,3,64,0,0,5
 48076 DEFB 0,236,14,126,0,96,126,95,0,128,7,5,224,248,255,0
 48092 DEFB 198,0,0,223,32,63,79,249,248,252,168,0,33,128,0,66
 48108 DEFB 0,95,0,226,0,0,0,127,87,192,127,95,66,129,42,0
 48124 DEFB 119,7,254,42

@defs=48128:32
; Character buffer for little girl no. 6 (#b188)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R48165.
b48128 DEFS 32
 48160 DEFB 200      ; Initial animatory state: #AS200 (see #R62910)
 48161 DEFB 166,17   ; Initial location (see #R62910)
 48163 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF188_36
 48164 DEFB 38       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 6 (#b188)
;
; Used by the routine at #R63309.
@label=PTGIRL6
b48165 DEFB 10       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52796(#b10)
                     ; (Kitchen)
 48166 DEFB 2        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48167 DEFB 2        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48168 DEFB 2        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48169 DEFB 12       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R53052(#b12)
                     ; (Dinner hall)
 48170 DEFB 0        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 48171 DEFB 2        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48172 DEFB 0        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 48173 DEFB 2        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51772(#b2)
                     ; (Middle-floor classroom)
 48174 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 48175 DEFB 2        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 48176 DEFB 0        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 48177 DEFB 0        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 48178 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 48179 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 48180 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 48181 DEFB 2        ; Lesson #LESSON53 (REVISION LIBRARY): #R51772(#b2)
                     ; (Middle-floor classroom)
 48182 DEFB 0        ; Lesson #LESSON54 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 48183 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 48184 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 48185 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 48186 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 48187 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; ERIC location identifier table for the bottom floor
;
; Used by the routine at #R25557. The location identifier table for the top
; floor is at #R47676, and the table for the middle floor is at #R47932.
@label=ERICLOCBF
b48188 DEFB 42,2     ; Location 2: left of the dining hall (x<=42)
 48190 DEFB 63,4     ; Location 4: dining hall (42<x<=63)
 48192 DEFB 77,3     ; Location 3: assembly hall (63<x<=77)
 48194 DEFB 96,2     ; Location 2: between the assembly hall and the skool door
                     ; (77<x<=96)
 48196 DEFB 159,1    ; Location 1: playground (96<x<=159)
 48198 DEFB 224,0    ; Location 0: girls' skool (x>159; forbidden)

; Unused
s48200 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG mask byte 3/8)
;
; Used by the routine at #R24576.
b48204 DEFB 175,191,74,52,116,223,250,243,149,255,255,255,165,210,255,251
 48220 DEFB 255,126,223,255,254,254,125,255,170,255,191,247,239,250,223,251
 48236 DEFB 95,170,235,87,255,251,127,191,191,253,247,11,223,253,255,240
 48252 DEFB 46,254,222,125,255,63,235,223,231,254,255,170,254,251,125,255
 48268 DEFB 186,253,79,255,127,244,247,251,253,231,141,253,239,223,251,223
 48284 DEFB 109,253,130,232,47,251,239,90,130,255,255,123,191,255,247,255
 48300 DEFB 187,255,253,255,191,223,255,244,93,62,255,255,214,171,233,255
 48316 DEFB 119,218,127,255,255,151,245,255,119,175,218,251,95,255,254,245
 48332 DEFB 255,237,238,126,255,111,126,95,255,191,247,245,239,251,255,240
 48348 DEFB 198,255,254,223,175,191,79,249,249,253,171,254,45,191,252,66
 48364 DEFB 127,95,255,226,255,252,255,127,87,223,127,95,66,129,170,255
 48380 DEFB 119,247,254,42

@defs=48384:32
; Character buffer for little girl no. 7 (#b189)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R48421.
b48384 DEFS 32
 48416 DEFB 72       ; Initial animatory state: #AS72 (see #R62910)
 48417 DEFB 165,17   ; Initial location (see #R62910)
 48419 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF189_36
 48420 DEFB 38       ; Random location table identifier (see #R25815)

; Personal timetable for little girl no. 7 (#b189)
;
; Used by the routine at #R63309.
@label=PTGIRL7
b48421 DEFB 10       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52796(#b10)
                     ; (Kitchen)
 48422 DEFB 2        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48423 DEFB 0        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 48424 DEFB 2        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48425 DEFB 0        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 48426 DEFB 0        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 48427 DEFB 2        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 48428 DEFB 0        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 48429 DEFB 2        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R51772(#b2)
                     ; (Middle-floor classroom)
 48430 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 48431 DEFB 2        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 48432 DEFB 0        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 48433 DEFB 0        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 48434 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 48435 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 48436 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 48437 DEFB 0        ; Lesson #LESSON53 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 48438 DEFB 0        ; Lesson #LESSON54 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 48439 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 48440 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 48441 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 48442 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 48443 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b189
;
; Used by the routine at #R25700. Skool region #b189 is on the top floor of the
; boys' skool, anywhere to the left of the left study door (x<=72). It is
; defined by the first entry in the skool region data table at #R46908.
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b189 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164); region #b192 is the assembly hall stage
; (see #R28067).
@label=SCEPIDS189
b48444 DEFB 189      ; Unused
 48445 DEFB 189      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R48452(#b189)
 48446 DEFB 189      ; Destination region #b191: staircase endpoint
                     ; #R48452(#b189)
 48447 DEFB 189      ; Destination region #b192: staircase endpoint
                     ; #R48452(#b189)
 48448 DEFB 189      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R48452(#b189)
 48449 DEFB 189      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R48452(#b189)
 48450 DEFB 189      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R48452(#b189)
 48451 DEFB 189      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R48452(#b189)

; Data for staircase endpoint #b189
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b189 is the
; top of the staircase leading down from the Revision Library.
b48452 DEFB 26       ; x-coordinate of the top of the staircase
 48453 DEFB 0        ; Face left to descend the staircase
 48454 DEFB 77       ; LSB of #R25677 (descend staircase)
 48455 DEFB 8        ; Number of steps in the staircase

; Unused
s48456 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG byte 4/8)
;
; Used by the routine at #R24576.
b48460 DEFB 64,64,90,28,4,6,2,12,42,0,12,0,42,34,0,4
 48476 DEFB 0,31,32,0,0,0,92,255,42,0,128,5,15,4,192,248
 48492 DEFB 160,42,20,72,0,7,95,128,128,2,3,71,224,252,0,15
 48508 DEFB 230,0,0,92,255,0,15,0,2,0,127,162,0,0,92,127
 48524 DEFB 48,0,75,255,0,4,176,248,2,120,82,156,9,192,7,224
 48540 DEFB 198,156,98,6,32,4,16,202,98,0,0,127,128,0,7,0
 48556 DEFB 248,0,3,0,95,192,0,5,4,62,0,0,50,16,0,0
 48572 DEFB 255,26,0,0,0,103,5,0,240,160,26,1,64,0,0,7
 48588 DEFB 0,252,27,254,0,144,78,95,0,128,4,5,224,248,255,15
 48604 DEFB 70,0,0,95,16,57,63,194,186,248,168,1,225,0,3,68
 48620 DEFB 128,95,0,242,0,3,0,255,79,192,255,127,36,153,42,0
 48636 DEFB 239,15,255,42

@defs=48640:32
; Character buffer for little boy no. 1 (#b190)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R48677.
b48640 DEFS 32
 48672 DEFB 64       ; Initial animatory state: #AS64 (see #R62910)
 48673 DEFB 5,10     ; Initial location (see #R62910)
 48675 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF190_36
 48676 DEFB 40       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 1 (#b190)
;
; Used by the routine at #R63309.
@label=PTBOY01
b48677 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 48678 DEFB 8        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52540(#b8)
                     ; (Science Lab)
 48679 DEFB 4        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 48680 DEFB 14       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R53308(#b14)
                     ; (Revision Library)
 48681 DEFB 4        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 48682 DEFB 6        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 48683 DEFB 4        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 48684 DEFB 14       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R53308(#b14) (Revision Library)
 48685 DEFB 8        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52540(#b8)
                     ; (Science Lab)
 48686 DEFB 6        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 48687 DEFB 6        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 48688 DEFB 8        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52540(#b8) (Science Lab)
 48689 DEFB 4        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 48690 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 48691 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 48692 DEFB 20       ; Lesson #LESSON52 (ASSEMBLY): #R57942(#b20) (Assembly)
 48693 DEFB 6        ; Lesson #LESSON53 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 48694 DEFB 4        ; Lesson #LESSON54 (REVISION LIBRARY): #R52028(#b4) (Blue
                     ; Room)
 48695 DEFB 14       ; Lesson #LESSON55 (PLAYTIME): #R53308(#b14) (Revision
                     ; Library)
 48696 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 48697 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 48698 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 48699 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b190
;
; Used by the routine at #R25700. Skool region #b190 is on the middle floor of
; the boys' skool, anywhere to the left of the far wall in the Science Lab
; storeroom (x<=63). It is defined by the first entry in the skool region data
; table at #R47164.
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b190 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164); region #b192 is the assembly hall stage
; (see #R28067).
@label=SCEPIDS190
b48700 DEFB 190      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R48708(#b190)
 48701 DEFB 190      ; Unused
 48702 DEFB 191      ; Destination region #b191: staircase endpoint
                     ; #R48964(#b191)
 48703 DEFB 191      ; Destination region #b192: staircase endpoint
                     ; #R48964(#b191)
 48704 DEFB 191      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R48964(#b191)
 48705 DEFB 191      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R48964(#b191)
 48706 DEFB 191      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R48964(#b191)
 48707 DEFB 191      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R48964(#b191)

; Data for staircase endpoint #b190
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b190 is the
; bottom of the staircase leading up to the Revision Library.
b48708 DEFB 19       ; x-coordinate of the bottom of the staircase
 48709 DEFB 128      ; Face right to ascend the staircase
 48710 DEFB 56       ; LSB of #R25656 (ascend staircase)
 48711 DEFB 8        ; Number of steps in the staircase

; Unused
s48712 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG mask byte 4/8)
;
; Used by the routine at #R24576.
b48716 DEFB 95,95,90,221,245,246,250,205,42,255,255,255,170,162,63,244
 48732 DEFB 63,159,175,127,254,254,93,255,170,255,191,245,239,244,223,251
 48748 DEFB 175,170,213,75,255,247,95,191,191,234,251,71,239,253,190,15
 48764 DEFB 230,192,254,93,255,127,239,63,250,254,127,170,254,252,93,127
 48780 DEFB 182,254,75,255,127,244,183,251,250,123,82,157,233,223,247,239
 48796 DEFB 198,157,98,246,47,244,23,202,98,255,135,127,191,248,247,127
 48812 DEFB 251,255,251,135,95,223,255,245,5,62,239,128,50,215,246,195
 48828 DEFB 255,218,127,255,252,103,245,63,247,175,218,253,95,255,254,247
 48844 DEFB 15,253,219,254,188,151,78,95,255,191,244,245,239,251,255,15
 48860 DEFB 70,251,255,95,215,185,191,194,186,251,171,253,225,127,251,68
 48876 DEFB 184,95,127,242,252,251,255,255,79,223,255,127,165,153,170,255
 48892 DEFB 239,239,255,42

@defs=48896:32
; Character buffer for little boy no. 2 (#b191)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R48933.
b48896 DEFS 32
 48928 DEFB 192      ; Initial animatory state: #AS192 (see #R62910)
 48929 DEFB 7,10     ; Initial location (see #R62910)
 48931 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF191_36
 48932 DEFB 40       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 2 (#b191)
;
; Used by the routine at #R63309.
@label=PTBOY02
b48933 DEFB 4        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 48934 DEFB 8        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52540(#b8)
                     ; (Science Lab)
 48935 DEFB 4        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 48936 DEFB 14       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R53308(#b14)
                     ; (Revision Library)
 48937 DEFB 4        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 48938 DEFB 4        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 48939 DEFB 8        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 48940 DEFB 4        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 48941 DEFB 6        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 48942 DEFB 8        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52540(#b8)
                     ; (Science Lab)
 48943 DEFB 4        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 48944 DEFB 4        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 48945 DEFB 6        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 48946 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 48947 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 48948 DEFB 20       ; Lesson #LESSON52 (ASSEMBLY): #R57942(#b20) (Assembly)
 48949 DEFB 8        ; Lesson #LESSON53 (REVISION LIBRARY): #R52540(#b8)
                     ; (Science Lab)
 48950 DEFB 4        ; Lesson #LESSON54 (REVISION LIBRARY): #R52028(#b4) (Blue
                     ; Room)
 48951 DEFB 14       ; Lesson #LESSON55 (PLAYTIME): #R53308(#b14) (Revision
                     ; Library)
 48952 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 48953 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 48954 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 48955 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b191
;
; Used by the routine at #R25700. Skool region #b191 corresponds to anywhere on
; the bottom floor (see the skool region data table at #R47420) or in mid-air
; (see #R46908 and #R47164).
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b191 to the destination region (#b189-#b196).
; Region #b192 is the assembly hall stage (see #R28067).
@label=SCEPIDS191
b48956 DEFB 192      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R49220(#b192)
 48957 DEFB 192      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R49220(#b192)
 48958 DEFB 191      ; Unused
 48959 DEFB 193      ; Destination region #b192: staircase endpoint
                     ; #R49476(#b193)
 48960 DEFB 193      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R49476(#b193)
 48961 DEFB 193      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R49476(#b193)
 48962 DEFB 194      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R49732(#b194)
 48963 DEFB 194      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R49732(#b194)

; Data for staircase endpoint #b191
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b191 is the
; top of the staircase leading down to the bottom floor on the far left of the
; boys' skool.
b48964 DEFB 15       ; x-coordinate of the top of the staircase
 48965 DEFB 128      ; Face right to descend the staircase
 48966 DEFB 77       ; LSB of #R25677 (descend staircase)
 48967 DEFB 8        ; Number of steps in the staircase

; Unused
s48968 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG byte 5/8)
;
; Used by the routine at #R24576.
b48972 DEFB 64,160,38,34,6,2,7,62,84,0,30,0,36,76,192,15
 48988 DEFB 64,33,112,0,0,0,4,255,42,0,128,0,15,5,64,248
 49004 DEFB 208,26,20,36,0,0,255,0,128,23,2,163,224,252,65,255
 49020 DEFB 174,63,0,244,255,0,19,0,1,0,255,162,0,0,4,63
 49036 DEFB 48,0,99,255,0,6,48,248,2,88,66,20,1,64,4,224
 49052 DEFB 198,20,90,5,160,3,16,218,230,0,120,127,128,7,7,128
 49068 DEFB 248,0,0,120,127,0,0,13,124,62,16,127,214,0,0,60
 49084 DEFB 191,26,0,0,3,159,10,192,240,80,26,2,192,0,1,15
 49100 DEFB 240,252,27,250,67,16,71,111,0,128,4,6,112,248,63,253
 49116 DEFB 142,4,0,111,24,121,47,252,31,248,168,0,255,128,4,64
 49132 DEFB 135,90,128,34,3,4,0,255,78,192,251,126,24,66,42,0
 49148 DEFB 239,18,255,42

@defs=49152:32
; Character buffer for little boy no. 3 (#b192)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R49189.
b49152 DEFS 32
 49184 DEFB 64       ; Initial animatory state: #AS64 (see #R62910)
 49185 DEFB 10,10    ; Initial location (see #R62910)
 49187 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF192_36
 49188 DEFB 40       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 3 (#b192)
;
; Used by the routine at #R63309.
@label=PTBOY03
b49189 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49190 DEFB 4        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 49191 DEFB 6        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49192 DEFB 6        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49193 DEFB 6        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49194 DEFB 4        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 49195 DEFB 6        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49196 DEFB 14       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R53308(#b14) (Revision Library)
 49197 DEFB 6        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 49198 DEFB 4        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52028(#b4)
                     ; (Blue Room)
 49199 DEFB 6        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 49200 DEFB 8        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52540(#b8) (Science Lab)
 49201 DEFB 4        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 49202 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 49203 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 49204 DEFB 20       ; Lesson #LESSON52 (ASSEMBLY): #R57942(#b20) (Assembly)
 49205 DEFB 14       ; Lesson #LESSON53 (REVISION LIBRARY): #R53308(#b14)
                     ; (Revision Library)
 49206 DEFB 8        ; Lesson #LESSON54 (REVISION LIBRARY): #R52540(#b8)
                     ; (Science Lab)
 49207 DEFB 14       ; Lesson #LESSON55 (PLAYTIME): #R53308(#b14) (Revision
                     ; Library)
 49208 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 49209 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 49210 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 49211 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b192
;
; Used by the routine at #R25700. Skool region #b192 is the assembly hall stage
; (see #R28067).
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b192 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164).
@label=SCEPIDS192
b49212 DEFB 195      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R49988(#b195)
 49213 DEFB 195      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R49988(#b195)
 49214 DEFB 195      ; Destination region #b191: staircase endpoint
                     ; #R49988(#b195)
 49215 DEFB 192      ; Unused
 49216 DEFB 196      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R50244(#b196)
 49217 DEFB 196      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R50244(#b196)
 49218 DEFB 195      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R49988(#b195)
 49219 DEFB 195      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R49988(#b195)

; Data for staircase endpoint #b192
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b192 is the
; bottom of the staircase leading up to the middle floor on the far left of the
; boys' skool.
b49220 DEFB 22       ; x-coordinate of the bottom of the staircase
 49221 DEFB 0        ; Face left to ascend the staircase
 49222 DEFB 56       ; LSB of #R25656 (ascend staircase)
 49223 DEFB 8        ; Number of steps in the staircase

; Unused
s49224 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG mask byte 5/8)
;
; Used by the routine at #R24576.
b49228 DEFB 95,175,166,162,54,250,247,190,85,255,255,255,165,77,195,239
 49244 DEFB 79,161,119,127,254,254,5,255,170,255,191,240,239,245,95,251
 49260 DEFB 215,218,213,165,254,248,255,127,191,215,250,163,239,253,65,255
 49276 DEFB 174,191,254,245,255,127,211,127,253,254,255,170,254,255,5,191
 49292 DEFB 182,254,99,255,127,246,55,251,250,91,66,21,225,95,244,239
 49308 DEFB 198,21,90,245,175,251,23,218,230,255,123,127,191,247,247,191
 49324 DEFB 251,255,252,123,127,63,255,205,125,62,208,127,214,239,254,189
 49340 DEFB 191,218,127,255,251,159,234,223,247,87,218,250,223,254,253,239
 49356 DEFB 247,253,219,250,67,23,71,111,127,191,244,246,119,251,63,253
 49372 DEFB 142,245,255,111,219,121,175,252,31,251,171,192,255,131,244,64
 49388 DEFB 135,90,191,34,251,244,127,255,78,223,251,126,219,66,170,255
 49404 DEFB 239,210,255,170

@defs=49408:32
; Character buffer for little boy no. 4 (#b193)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R49445.
b49408 DEFS 32
 49440 DEFB 192      ; Initial animatory state: #AS192 (see #R62910)
 49441 DEFB 72,17    ; Initial location (see #R62910)
 49443 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF193_36
 49444 DEFB 42       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 4 (#b193)
;
; Used by the routine at #R63309.
@label=PTBOY04
b49445 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49446 DEFB 8        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52540(#b8)
                     ; (Science Lab)
 49447 DEFB 8        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 49448 DEFB 14       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R53308(#b14)
                     ; (Revision Library)
 49449 DEFB 4        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 49450 DEFB 6        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49451 DEFB 4        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 49452 DEFB 4        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 49453 DEFB 6        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 49454 DEFB 14       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 49455 DEFB 4        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 49456 DEFB 14       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 49457 DEFB 6        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 49458 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 49459 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 49460 DEFB 20       ; Lesson #LESSON52 (ASSEMBLY): #R57942(#b20) (Assembly)
 49461 DEFB 6        ; Lesson #LESSON53 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 49462 DEFB 8        ; Lesson #LESSON54 (REVISION LIBRARY): #R52540(#b8)
                     ; (Science Lab)
 49463 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 49464 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 49465 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 49466 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 49467 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b193
;
; Used by the routine at #R25700. Skool region #b193 is on the middle floor, to
; the left of the window in the boys' skool (76<x<=96). It is defined by the
; third entry in the skool region data table at #R47164.
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b193 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164); region #b192 is the assembly hall stage
; (see #R28067).
@label=SCEPIDS193
b49468 DEFB 197      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R50500(#b197)
 49469 DEFB 197      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R50500(#b197)
 49470 DEFB 197      ; Destination region #b191: staircase endpoint
                     ; #R50500(#b197)
 49471 DEFB 197      ; Destination region #b192: staircase endpoint
                     ; #R50500(#b197)
 49472 DEFB 193      ; Unused
 49473 DEFB 198      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R50756(#b198)
 49474 DEFB 197      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R50500(#b197)
 49475 DEFB 197      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R50500(#b197)

; Data for staircase endpoint #b193
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b193 is the
; bottom of the staircase leading up to the assembly hall stage.
b49476 DEFB 83       ; x-coordinate of the bottom of the staircase
 49477 DEFB 0        ; Face left to ascend the staircase
 49478 DEFB 56       ; LSB of #R25656 (ascend staircase)
 49479 DEFB 4        ; Number of steps in the staircase

; Unused
s49480 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG byte 6/8)
;
; Used by the routine at #R24576.
b49484 DEFB 128,32,36,66,197,2,8,0,40,0,60,0,80,80,252,3
 49500 DEFB 160,1,56,0,0,1,126,255,62,0,128,7,31,14,224,248
 49516 DEFB 80,30,28,28,1,0,31,0,128,31,0,251,48,236,127,255
 49532 DEFB 238,32,0,70,255,0,12,0,0,0,63,227,0,0,126,63
 49548 DEFB 56,0,14,255,0,0,224,248,3,24,206,134,8,96,0,160
 49564 DEFB 222,134,4,0,64,2,208,210,70,0,92,255,128,5,15,192
 49580 DEFB 248,0,0,92,159,0,0,63,44,126,31,255,246,0,0,78
 49596 DEFB 95,10,0,0,4,9,10,224,240,80,26,2,224,1,3,0
 49612 DEFB 56,252,49,250,127,112,71,127,0,0,4,7,112,240,255,255
 49628 DEFB 254,10,0,127,28,113,31,148,126,252,248,63,189,252,3,64
 49644 DEFB 255,95,0,194,7,3,128,243,79,128,193,95,8,60,44,0
 49660 DEFB 203,12,255,62

@defs=49664:32
; Character buffer for little boy no. 5 (#b194)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R49701.
b49664 DEFS 32
 49696 DEFB 64       ; Initial animatory state: #AS64 (see #R62910)
 49697 DEFB 74,17    ; Initial location (see #R62910)
 49699 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF194_36
 49700 DEFB 42       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 5 (#b194)
;
; Used by the routine at #R63309.
@label=PTBOY05
b49701 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49702 DEFB 8        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52540(#b8)
                     ; (Science Lab)
 49703 DEFB 6        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49704 DEFB 6        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49705 DEFB 14       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R53308(#b14)
                     ; (Revision Library)
 49706 DEFB 4        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 49707 DEFB 8        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 49708 DEFB 6        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49709 DEFB 6        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 49710 DEFB 6        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 49711 DEFB 4        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 49712 DEFB 14       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 49713 DEFB 4        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 49714 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 49715 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 49716 DEFB 88       ; Lesson #LESSON52 (ASSEMBLY): #R58862(#b88) (Assembly)
 49717 DEFB 8        ; Lesson #LESSON53 (REVISION LIBRARY): #R52540(#b8)
                     ; (Science Lab)
 49718 DEFB 6        ; Lesson #LESSON54 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 49719 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 49720 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 49721 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 49722 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 49723 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b194
;
; Used by the routine at #R25700. Skool region #b194 is on the top floor, to
; the right of the left study door (72<x<=96). It is defined by the second
; entry in the skool region data table at #R46908.
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b194 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164); region #b192 is the assembly hall stage
; (see #R28067).
@label=SCEPIDS194
b49724 DEFB 199      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R51012(#b199)
 49725 DEFB 199      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R51012(#b199)
 49726 DEFB 199      ; Destination region #b191: staircase endpoint
                     ; #R51012(#b199)
 49727 DEFB 199      ; Destination region #b192: staircase endpoint
                     ; #R51012(#b199)
 49728 DEFB 199      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R51012(#b199)
 49729 DEFB 199      ; Unused
 49730 DEFB 199      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R51012(#b199)
 49731 DEFB 199      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R51012(#b199)

; Data for staircase endpoint #b194
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b194 is the
; bottom of the staircase leading up to the middle floor in the girls' skool.
b49732 DEFB 176      ; x-coordinate of the bottom of the staircase
 49733 DEFB 128      ; Face right to ascend the staircase
 49734 DEFB 56       ; LSB of #R25656 (ascend staircase)
 49735 DEFB 8        ; Number of steps in the staircase

; Unused
s49736 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG mask byte 6/8)
;
; Used by the routine at #R24576.
b49740 DEFB 191,47,165,90,213,250,232,193,171,255,255,255,83,83,252,243
 49756 DEFB 175,221,187,127,254,253,126,255,190,255,191,247,223,238,239,251
 49772 DEFB 87,222,221,221,253,255,31,255,191,223,248,251,55,237,127,255
 49788 DEFB 238,160,254,70,255,127,236,127,254,254,191,235,128,255,126,191
 49804 DEFB 186,254,14,255,255,240,239,251,251,27,206,134,232,111,240,175
 49820 DEFB 222,134,5,240,95,250,215,210,70,254,93,255,191,245,239,223
 49836 DEFB 251,254,255,93,159,255,252,191,45,126,223,255,246,255,255,78
@bfix=DEFB 95,234,127,255,244,105,234,239,247,87,218,250,239,253,251,240
 49852 DEFB 95,234,127,255,244,105,234,239,247,87,218,250,231,253,251,240
 49868 DEFB 59,253,177,250,127,119,71,127,127,127,244,247,119,247,255,255
 49884 DEFB 254,234,255,127,221,113,159,148,126,253,251,191,189,253,251,64
 49900 DEFB 255,95,127,194,247,251,143,243,79,191,193,95,233,61,173,207
 49916 DEFB 203,237,255,190

@defs=49920:32
; Character buffer for little boy no. 6 (#b195)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R49957.
b49920 DEFS 32
 49952 DEFB 192      ; Initial animatory state: #AS192 (see #R62910)
 49953 DEFB 104,17   ; Initial location (see #R62910)
 49955 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF195_36
 49956 DEFB 42       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 6 (#b195)
;
; Used by the routine at #R63309.
@label=PTBOY06
b49957 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49958 DEFB 8        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52540(#b8)
                     ; (Science Lab)
 49959 DEFB 8        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 49960 DEFB 8        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 49961 DEFB 14       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R53308(#b14)
                     ; (Revision Library)
 49962 DEFB 6        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 49963 DEFB 4        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 49964 DEFB 8        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 49965 DEFB 6        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 49966 DEFB 8        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52540(#b8)
                     ; (Science Lab)
 49967 DEFB 4        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 49968 DEFB 4        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 49969 DEFB 6        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 49970 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 49971 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 49972 DEFB 88       ; Lesson #LESSON52 (ASSEMBLY): #R58862(#b88) (Assembly)
 49973 DEFB 14       ; Lesson #LESSON53 (REVISION LIBRARY): #R53308(#b14)
                     ; (Revision Library)
 49974 DEFB 6        ; Lesson #LESSON54 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 49975 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 49976 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 49977 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 49978 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 49979 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b195
;
; Used by the routine at #R25700. Skool region #b195 is the middle floor in the
; girls' skool. It is defined by the fifth entry in the skool region data table
; at #R47164.
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b195 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164); region #b192 is the assembly hall stage
; (see #R28067).
@label=SCEPIDS195
b49980 DEFB 200      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R51268(#b200)
 49981 DEFB 200      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R51268(#b200)
 49982 DEFB 200      ; Destination region #b191: staircase endpoint
                     ; #R51268(#b200)
 49983 DEFB 200      ; Destination region #b192: staircase endpoint
                     ; #R51268(#b200)
 49984 DEFB 200      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R51268(#b200)
 49985 DEFB 200      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R51268(#b200)
 49986 DEFB 195      ; Unused
 49987 DEFB 206      ; Destination region #R46908(#b196): staircase endpoint
                     ; #R52804(#b206)

; Data for staircase endpoint #b195
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b195 is the
; top of the staircase leading down from the assembly hall stage.
b49988 DEFB 80       ; x-coordinate of the top of the staircase
 49989 DEFB 128      ; Face right to descend the staircase
 49990 DEFB 77       ; LSB of #R25677 (descend staircase)
 49991 DEFB 4        ; Number of steps in the staircase

; Unused
s49992 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG byte 7/8)
;
; Used by the routine at #R24576.
b49996 DEFB 0,144,20,71,40,1,8,0,20,0,120,0,80,32,3,4
 50012 DEFB 32,0,60,0,0,2,47,255,62,0,128,2,47,30,240,248
 50028 DEFB 56,14,56,12,2,0,127,0,0,31,3,159,240,234,113,191
 50044 DEFB 252,63,0,231,127,0,0,0,0,0,63,227,127,0,239,63
 50060 DEFB 28,0,116,255,0,7,64,248,0,112,166,255,15,240,4,48
 50076 DEFB 206,255,126,7,224,0,48,252,229,1,4,127,128,0,23,64
 50092 DEFB 248,1,0,4,62,0,3,31,62,252,28,111,254,0,0,78
 50108 DEFB 111,6,0,0,4,7,14,224,224,48,22,3,96,1,7,0
 50124 DEFB 56,252,97,250,67,240,54,127,0,0,3,7,96,240,255,255
 50140 DEFB 252,10,0,127,22,51,31,56,250,252,248,96,219,6,1,32
 50156 DEFB 193,145,0,4,15,1,240,147,153,0,135,153,26,136,28,48
 50172 DEFB 239,0,255,62

@defs=50176:32
; Character buffer for little boy no. 7 (#b196)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R50213.
b50176 DEFS 32
 50208 DEFB 64       ; Initial animatory state: #AS64 (see #R62910)
 50209 DEFB 107,17   ; Initial location (see #R62910)
 50211 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF196_36
 50212 DEFB 42       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 7 (#b196)
;
; Used by the routine at #R63309.
@label=PTBOY07
b50213 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50214 DEFB 4        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 50215 DEFB 6        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50216 DEFB 4        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 50217 DEFB 14       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R53308(#b14)
                     ; (Revision Library)
 50218 DEFB 6        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50219 DEFB 8        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 50220 DEFB 8        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 50221 DEFB 14       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 50222 DEFB 4        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52028(#b4)
                     ; (Blue Room)
 50223 DEFB 6        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 50224 DEFB 4        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 50225 DEFB 14       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 50226 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 50227 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 50228 DEFB 88       ; Lesson #LESSON52 (ASSEMBLY): #R58862(#b88) (Assembly)
 50229 DEFB 8        ; Lesson #LESSON53 (REVISION LIBRARY): #R52540(#b8)
                     ; (Science Lab)
 50230 DEFB 4        ; Lesson #LESSON54 (REVISION LIBRARY): #R52028(#b4) (Blue
                     ; Room)
 50231 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 50232 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 50233 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 50234 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 50235 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Staircase endpoint identifiers for skool region #b196
;
; Used by the routine at #R25700. Skool region #b196 is the top floor in the
; girls' skool. It is defined by the fourth entry in the skool region data
; table at #R46908.
; .
; Each entry in this table determines the first staircase endpoint to reach on
; the way from skool region #b196 to the destination region (#b189-#b196).
; Region #b191 corresponds to anywhere on the bottom floor (see #R47420) or in
; mid-air (see #R46908 and #R47164); region #b192 is the assembly hall stage
; (see #R28067).
@label=SCEPIDS196
b50236 DEFB 207      ; Destination region #R46908(#b189): staircase endpoint
                     ; #R53060(#b207)
 50237 DEFB 207      ; Destination region #R47164(#b190): staircase endpoint
                     ; #R53060(#b207)
 50238 DEFB 207      ; Destination region #b191: staircase endpoint
                     ; #R53060(#b207)
 50239 DEFB 207      ; Destination region #b192: staircase endpoint
                     ; #R53060(#b207)
 50240 DEFB 207      ; Destination region #R47164(#b193): staircase endpoint
                     ; #R53060(#b207)
 50241 DEFB 207      ; Destination region #R46908(#b194): staircase endpoint
                     ; #R53060(#b207)
 50242 DEFB 207      ; Destination region #R47164(#b195): staircase endpoint
                     ; #R53060(#b207)
 50243 DEFB 207      ; Unused

; Data for staircase endpoint #b196
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b196 is the
; bottom of the staircase leading up from the assembly hall stage.
b50244 DEFB 81       ; x-coordinate of the bottom of the staircase
 50245 DEFB 128      ; Face right to ascend the staircase
 50246 DEFB 56       ; LSB of #R25656 (ascend staircase)
 50247 DEFB 5        ; Number of steps in the staircase

; Unused
s50248 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG mask byte 7/8)
;
; Used by the routine at #R24576.
b50252 DEFB 127,151,213,87,42,253,235,255,213,255,255,255,87,175,3,244
@bfix=DEFB 47,254,189,127,254,250,175,255,190,127,191,250,175,222,247,251
 50268 DEFB 47,254,189,127,254,250,175,255,190,127,191,250,175,162,247,251
 50284 DEFB 187,238,187,237,250,255,127,255,127,223,251,159,247,234,113,191
 50300 DEFB 252,191,254,231,127,127,243,127,255,254,191,235,127,255,239,191
 50316 DEFB 220,254,116,255,255,247,79,251,248,115,166,255,239,247,244,55
 50332 DEFB 206,255,126,247,231,248,55,253,229,253,5,127,191,240,215,95
 50348 DEFB 251,253,255,5,62,255,251,159,62,252,220,111,254,255,255,78
 50364 DEFB 111,246,127,255,244,247,238,239,239,183,214,251,111,253,247,255
 50380 DEFB 59,253,109,250,67,247,182,127,255,127,251,247,111,247,255,255
 50396 DEFB 252,234,255,127,214,179,159,58,250,253,251,96,219,6,225,160
 50412 DEFB 193,145,7,5,239,225,243,147,153,7,135,153,218,138,221,179
 50428 DEFB 239,243,255,190

@defs=50432:32
; Character buffer for little boy no. 8 (#b197)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R50469.
b50432 DEFS 32
 50464 DEFB 192      ; Initial animatory state: #AS192 (see #R62910)
 50465 DEFB 110,17   ; Initial location (see #R62910)
 50467 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF197_36
 50468 DEFB 42       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 8 (#b197)
;
; Used by the routine at #R63309.
@label=PTBOY08
b50469 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50470 DEFB 4        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 50471 DEFB 4        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 50472 DEFB 4        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 50473 DEFB 6        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50474 DEFB 14       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R53308(#b14)
                     ; (Revision Library)
 50475 DEFB 4        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 50476 DEFB 4        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52028(#b4)
                     ; (Blue Room)
 50477 DEFB 14       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 50478 DEFB 14       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R53308(#b14) (Revision Library)
 50479 DEFB 6        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 50480 DEFB 4        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 50481 DEFB 8        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52540(#b8) (Science Lab)
 50482 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 50483 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 50484 DEFB 88       ; Lesson #LESSON52 (ASSEMBLY): #R58862(#b88) (Assembly)
 50485 DEFB 6        ; Lesson #LESSON53 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 50486 DEFB 6        ; Lesson #LESSON54 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 50487 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 50488 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 50489 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 50490 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 50491 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Theme tune data (segment 3/6)
;
; Used by the routine at #R24477. Segment 2 can be found at #R56430.
@label=OTSEG3
b50492 DEFB 241,128,59,113,51
 50497 DEFB 255               ; Segment end marker
 50498 DEFW 50748             ; Pointer to the next segment

; Data for staircase endpoint #b197
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b197 is the
; top of the staircase leading down to the assembly hall stage.
b50500 DEFB 85       ; x-coordinate of the top of the staircase
 50501 DEFB 0        ; Face left to descend the staircase
 50502 DEFB 77       ; LSB of #R25677 (descend staircase)
 50503 DEFB 5        ; Number of steps in the staircase

; Unused
s50504 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG byte 8/8)
;
; Used by the routine at #R24576.
b50508 DEFB 0,144,8,137,40,0,16,0,8,0,240,0,32,0,0,0
 50524 DEFB 0,0,126,0,0,1,127,126,126,128,128,7,23,60,248,232
 50540 DEFB 120,30,120,28,2,0,128,0,0,31,1,7,120,206,127,31
 50556 DEFB 224,79,0,255,127,0,0,0,0,1,63,231,95,0,255,63
 50572 DEFB 15,0,23,126,0,1,112,232,3,176,124,127,7,248,7,248
 50588 DEFB 252,255,127,7,248,3,248,192,255,0,126,254,128,7,15,224
 50604 DEFB 232,1,0,124,64,0,4,14,254,120,31,199,240,0,0,36
 50620 DEFB 52,14,0,0,2,7,28,64,144,96,62,7,192,0,5,0
 50636 DEFB 144,248,32,245,127,96,47,127,0,0,2,7,240,240,254,191
 50652 DEFB 176,7,0,127,7,15,31,61,252,252,248,63,137,252,31,31
 50668 DEFB 34,0,248,248,29,31,124,231,0,248,157,0,12,73,24,124
 50684 DEFB 139,0,255,126

@defs=50688:32
; Character buffer for little boy no. 9 (#b198)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R50725.
b50688 DEFS 32
 50720 DEFB 64       ; Initial animatory state: #AS64 (see #R62910)
 50721 DEFB 123,17   ; Initial location (see #R62910)
 50723 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF198_36
 50724 DEFB 44       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 9 (#b198)
;
; Used by the routine at #R63309.
@label=PTBOY09
b50725 DEFB 6        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50726 DEFB 8        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52540(#b8)
                     ; (Science Lab)
 50727 DEFB 8        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 50728 DEFB 8        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 50729 DEFB 6        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50730 DEFB 14       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R53308(#b14)
                     ; (Revision Library)
 50731 DEFB 8        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 50732 DEFB 8        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52540(#b8)
                     ; (Science Lab)
 50733 DEFB 6        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 50734 DEFB 6        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52284(#b6)
                     ; (Yellow Room)
 50735 DEFB 6        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52284(#b6) (Yellow Room)
 50736 DEFB 4        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 50737 DEFB 4        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52028(#b4) (Blue Room)
 50738 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 50739 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 50740 DEFB 88       ; Lesson #LESSON52 (ASSEMBLY): #R58862(#b88) (Assembly)
 50741 DEFB 6        ; Lesson #LESSON53 (REVISION LIBRARY): #R52284(#b6)
                     ; (Yellow Room)
 50742 DEFB 8        ; Lesson #LESSON54 (REVISION LIBRARY): #R52540(#b8)
                     ; (Science Lab)
 50743 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 50744 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 50745 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 50746 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 50747 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Theme tune data (segment 4/6)
;
; Used by the routine at #R24477. Segment 3 can be found at #R50492.
@label=OTSEG4
b50748 DEFB 183,57,27,91,123
 50753 DEFB 255              ; Segment end marker
 50754 DEFW 51004            ; Pointer to the next segment

; Data for staircase endpoint #b198
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b198 is the
; bottom of the staircase leading up to the head's study.
b50756 DEFB 91       ; x-coordinate of the bottom of the staircase
 50757 DEFB 0        ; Face left to ascend the staircase
 50758 DEFB 56       ; LSB of #R25656 (ascend staircase)
 50759 DEFB 8        ; Number of steps in the staircase

; Unused
s50760 DEFS 4

; Graphic data for animatory states #b0-#b79 (UDG mask byte 8/8)
;
; Used by the routine at #R24576.
b50764 DEFB 127,151,235,169,170,254,215,255,235,255,255,255,175,223,252,251
 50780 DEFB 223,255,126,127,255,253,127,126,126,191,191,247,215,189,251,235
 50796 DEFB 123,222,123,221,250,255,128,255,255,223,157,7,123,206,127,31
 50812 DEFB 225,79,254,255,127,127,255,127,255,253,191,231,95,255,255,191
 50828 DEFB 239,255,23,126,127,241,119,235,155,183,125,127,247,251,151,251
 50844 DEFB 253,255,127,247,251,155,251,193,255,254,126,254,191,247,239,239
 50860 DEFB 235,253,255,125,65,255,244,238,254,121,223,199,241,255,255,165
@bfix=DEFB 180,238,127,255,250,247,221,95,151,111,190,247,223,254,245,255
 50876 DEFB 180,231,127,255,250,247,221,95,151,111,190,247,223,254,245,255
 50892 DEFB 151,251,174,245,127,111,175,127,127,127,250,247,247,247,254,191
 50908 DEFB 179,247,255,127,231,207,159,189,253,253,251,191,137,253,223,223
 50924 DEFB 42,110,251,251,221,223,124,231,102,251,157,102,237,73,219,125
 50940 DEFB 139,255,255,126

@defs=50944:32
; Character buffer for little boy no. 10 (#b199)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R50981.
@label=BOY10CBUF
b50944 DEFS 32
 50976 DEFB 192      ; Initial animatory state: #AS192 (see #R62910)
 50977 DEFB 126,17   ; Initial location (see #R62910)
 50979 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF199_36
 50980 DEFB 44       ; Random location table identifier (see #R25815)

; Personal timetable for little boy no. 10 (#b199)
;
; Used by the routine at #R63309.
@label=PTBOY10
b50981 DEFB 4        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 50982 DEFB 4        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 50983 DEFB 6        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50984 DEFB 6        ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50985 DEFB 4        ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 50986 DEFB 4        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R52028(#b4)
                     ; (Blue Room)
 50987 DEFB 6        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50988 DEFB 6        ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM): #R52284(#b6)
                     ; (Yellow Room)
 50989 DEFB 8        ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB): #R52540(#b8)
                     ; (Science Lab)
 50990 DEFB 8        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R52540(#b8)
                     ; (Science Lab)
 50991 DEFB 8        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R52540(#b8) (Science Lab)
 50992 DEFB 8        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R52540(#b8) (Science Lab)
 50993 DEFB 8        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R52540(#b8) (Science Lab)
 50994 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 50995 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 50996 DEFB 20       ; Lesson #LESSON52 (ASSEMBLY): #R57942(#b20) (Assembly)
 50997 DEFB 14       ; Lesson #LESSON53 (REVISION LIBRARY): #R53308(#b14)
                     ; (Revision Library)
 50998 DEFB 14       ; Lesson #LESSON54 (REVISION LIBRARY): #R53308(#b14)
                     ; (Revision Library)
 50999 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 51000 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 51001 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 51002 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 51003 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Theme tune data (segment 5/6)
;
; Used by the routine at #R24477. Segment 4 can be found at #R50748.
@label=OTSEG5
b51004 DEFB 251,191,59,121,123
 51009 DEFB 255                ; Segment end marker
 51010 DEFW 51260              ; Pointer to the next segment

; Data for staircase endpoint #b199
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b199 is the
; top of the staircase leading down from the head's study.
b51012 DEFB 84       ; x-coordinate of the top of the staircase
 51013 DEFB 128      ; Face right to descend the staircase
 51014 DEFB 77       ; LSB of #R25677 (descend staircase)
 51015 DEFB 8        ; Number of steps in the staircase

; Unused
s51016 DEFB 0

; Graphic data for animatory states #b80-#b127 (UDG byte 1/8)
;
; Used by the routine at #R24576.
b51017 DEFB 16,1,0,0,8,0,8,128,28,0,0,243,204,0,7,1
 51033 DEFB 0,48,192,0,127,28,0,0,60,94,29,0,252,198,94,0
 51049 DEFB 3,5,1,0,207,236,181,0,192,96,224,29,94,0,5,60
 51065 DEFB 126,0,7,0,0,26,6,0,160,164,0,2,0,0,185,238
 51081 DEFB 228,0,192,72,240,0,11,62,12,0,156,228,231,128,0,228
 51097 DEFB 14,143,0,0,20,0,92,0,80,0,27,68,36,0,192,152
 51113 DEFB 64,0,1,4,1,0,188,73,68,128,0,18,32,2,82,0
 51129 DEFB 4,1,27,100,0,74,0,208,0,0,0,56,176,31,0,252
 51145 DEFB 50,192,0,3,11,3,0,143,3,222,192,32,0,63,1,252
 51161 DEFB 8,56,224,0,80,0,80,0,20,111,55,0,240,158,220,0
 51177 DEFB 6,6,0,79,249,253,0,224,192,55,0,3,125,20,239,0
 51193 DEFB 211,158,127,127,0,192,248

@defs=51200:32
; Character buffer for MR WACKER (#b200)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R51237.
@label=WACKERCBUF
b51200 DEFS 32
 51232 DEFB 80       ; Initial animatory state: #AS80 (see #R62910)
 51233 DEFB 76,3     ; Initial location (see #R62910)
 51235 DEFB 32       ; Initial flags for byte #b29 (see #R62910)
@label=CBUF200_36
 51236 DEFB 48       ; Random location table identifier (see #R25815)

; Personal timetable for MR WACKER (#b200)
;
; Used by the routine at #R63309.
@label=PTWACKER
b51237 DEFB 74       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59715(#b74)
                     ; (Head's study)
 51238 DEFB 70       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59681(#b70)
                     ; (Walkabout)
 51239 DEFB 74       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59715(#b74)
                     ; (Head's study)
 51240 DEFB 70       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59681(#b70)
                     ; (Walkabout)
 51241 DEFB 74       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59715(#b74)
                     ; (Head's study)
 51242 DEFB 70       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59681(#b70)
                     ; (Walkabout)
 51243 DEFB 74       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59715(#b74) (Head's study)
 51244 DEFB 70       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59681(#b70) (Walkabout)
 51245 DEFB 74       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R59715(#b74) (Head's study)
 51246 DEFB 70       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59681(#b70) (Walkabout)
 51247 DEFB 74       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R59715(#b74) (Head's study)
 51248 DEFB 70       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59681(#b70) (Walkabout)
 51249 DEFB 74       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R59715(#b74) (Head's study)
 51250 DEFB 30       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R57970(#b30)
                     ; (Dinner duty)
 51251 DEFB 70       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R59681(#b70)
                     ; (Walkabout)
 51252 DEFB 72       ; Lesson #LESSON52 (ASSEMBLY): #R59699(#b72) (Assembly)
 51253 DEFB 74       ; Lesson #LESSON53 (REVISION LIBRARY): #R59715(#b74)
                     ; (Head's study)
 51254 DEFB 70       ; Lesson #LESSON54 (REVISION LIBRARY): #R59681(#b70)
                     ; (Walkabout)
 51255 DEFB 66       ; Lesson #LESSON55 (PLAYTIME): #R59673(#b66) (Walkabout)
 51256 DEFB 66       ; Lesson #LESSON56 (PLAYTIME): #R59673(#b66) (Walkabout)
 51257 DEFB 66       ; Lesson #LESSON57 (PLAYTIME): #R59673(#b66) (Walkabout)
 51258 DEFB 66       ; Lesson #LESSON58 (PLAYTIME): #R59673(#b66) (Walkabout)
 51259 DEFB 66       ; Lesson #LESSON59 (PLAYTIME): #R59673(#b66) (Walkabout)

; Theme tune data (segment 6/6)
;
; Used by the routine at #R24477. Segment 5 can be found at #R51004.
@label=OTSEG6
b51260 DEFB 119,247,134
 51263 DEFB 0           ; End marker

; Unused
s51264 DEFS 4

; Data for staircase endpoint #b200
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b200 is the
; top of the staircase leading down to the bottom floor in the girls' skool.
b51268 DEFB 183      ; x-coordinate of the top of the staircase
 51269 DEFB 0        ; Face left to descend the staircase
 51270 DEFB 77       ; LSB of #R25677 (descend staircase)
 51271 DEFB 8        ; Number of steps in the staircase

; Unused
s51272 DEFB 0

; Graphic data for animatory states #b80-#b127 (UDG mask byte 1/8)
;
; Used by the routine at #R24576.
b51273 DEFB 215,253,255,255,235,255,235,191,156,207,127,243,205,31,247,253
 51289 DEFB 254,55,223,255,127,220,225,225,188,94,221,255,253,198,94,254
 51305 DEFB 251,245,253,31,207,236,181,255,223,111,239,221,94,255,245,60
 51321 DEFB 126,255,247,255,255,90,246,255,175,165,254,250,254,195,185,238
 51337 DEFB 228,255,223,75,247,252,235,190,236,63,157,228,231,191,255,228
 51353 DEFB 238,143,127,255,212,255,92,255,87,227,219,68,164,255,223,155
 51369 DEFB 95,254,253,244,253,63,189,73,69,191,255,210,47,250,82,255
 51385 DEFB 229,253,155,100,255,74,255,215,255,254,224,184,176,223,127,253
 51401 DEFB 50,223,254,251,235,251,7,143,3,222,223,47,255,191,253,253
@bfix=DEFB 235,184,224,255,80,255,87,240,212,111,183,127,247,158,221,255
 51417 DEFB 139,184,224,255,80,255,87,240,212,111,183,127,247,158,221,255
 51433 DEFB 246,246,7,79,249,253,127,239,223,183,255,251,125,212,239,254
 51449 DEFB 211,158,127,127,255,192,251

@defs=51456:32
; Character buffer for MR WITHIT (#b201)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R51493.
b51456 DEFS 32
 51488 DEFB 216      ; Initial animatory state: #AS216 (see #R62910)
 51489 DEFB 15,17    ; Initial location (see #R62910)
 51491 DEFB 32       ; Initial flags for byte #b29 (see #R62910)
@label=CBUF201_36
 51492 DEFB 48       ; Random location table identifier (see #R25815)

; Personal timetable for MR WITHIT (#b201)
;
; Used by the routine at #R63309.
@label=PTWITHIT
b51493 DEFB 60       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59629(#b60)
                     ; (Yellow Room)
 51494 DEFB 64       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59663(#b64)
                     ; (Walkabout)
 51495 DEFB 58       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59612(#b58)
                     ; (Blue Room)
 51496 DEFB 58       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59612(#b58)
                     ; (Blue Room)
 51497 DEFB 58       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59612(#b58)
                     ; (Blue Room)
 51498 DEFB 58       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59612(#b58)
                     ; (Blue Room)
 51499 DEFB 60       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59629(#b60) (Yellow Room)
 51500 DEFB 60       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59629(#b60) (Yellow Room)
 51501 DEFB 62       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R59646(#b62) (Science Lab)
 51502 DEFB 62       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59646(#b62) (Science Lab)
 51503 DEFB 60       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R59629(#b60) (Yellow Room)
 51504 DEFB 64       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59663(#b64) (Walkabout)
 51505 DEFB 58       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R59612(#b58) (Blue Room)
 51506 DEFB 64       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R59663(#b64)
                     ; (Walkabout)
 51507 DEFB 30       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R57970(#b30)
                     ; (Dinner duty)
 51508 DEFB 80       ; Lesson #LESSON52 (ASSEMBLY): #R59788(#b80) (Assembly)
 51509 DEFB 64       ; Lesson #LESSON53 (REVISION LIBRARY): #R59663(#b64)
                     ; (Walkabout)
 51510 DEFB 58       ; Lesson #LESSON54 (REVISION LIBRARY): #R59612(#b58) (Blue
                     ; Room)
 51511 DEFB 68       ; Lesson #LESSON55 (PLAYTIME): #R59677(#b68) (Walkabout)
 51512 DEFB 68       ; Lesson #LESSON56 (PLAYTIME): #R59677(#b68) (Walkabout)
 51513 DEFB 68       ; Lesson #LESSON57 (PLAYTIME): #R59677(#b68) (Walkabout)
 51514 DEFB 68       ; Lesson #LESSON58 (PLAYTIME): #R59677(#b68) (Walkabout)
 51515 DEFB 68       ; Lesson #LESSON59 (PLAYTIME): #R59677(#b68) (Walkabout)

; Command list #b0: Top-floor classroom - girl
;
; Used by the little girls and HAYLEY in various lessons.
@label=CLIST0
b51516 DEFW 25700    ; Go to...
 51518 DEFB 177,3    ; ...the top-floor classroom in the girls' skool
 51520 DEFW 31952    ; Move about until...
 51522 DEFB 8        ; ...the teacher arrives at the top-floor classroom in the
                     ; girls' skool
 51523 DEFW 26304    ; Find a seat and sit down
 51525 DEFW 53796    ; Sit still

; Unused
u51527 DEFB 1,0

; Graphic data for animatory states #b80-#b127 (UDG byte 2/8)
;
; Used by the routine at #R24576.
b51529 DEFB 16,2,0,0,4,0,8,128,113,48,0,226,18,224,7,3
 51545 DEFB 1,32,32,0,126,49,30,30,125,125,29,0,244,46,94,1
 51561 DEFB 7,7,1,224,223,210,151,0,64,224,224,25,94,0,4,253
 51577 DEFB 29,0,4,0,0,144,6,0,224,228,0,2,0,60,255,110
 51593 DEFB 228,0,224,136,112,3,15,38,12,192,254,232,243,128,0,244
 51609 DEFB 15,143,0,0,18,0,78,0,208,28,63,72,20,0,160,144
 51625 DEFB 64,1,3,4,1,192,250,145,140,0,0,18,32,4,137,0
@bfix=DEFB 10,0,127,232,0,69,0,80,0,0,31,79,163,31,128,194
 51641 DEFB 10,0,127,228,0,69,0,80,0,0,31,79,163,31,128,194
 51657 DEFB 84,192,1,4,10,3,248,252,53,207,32,64,0,31,0,252
 51673 DEFB 20,79,59,0,78,0,80,15,55,96,55,128,216,158,220,0
 51689 DEFB 6,6,248,125,9,253,128,224,192,55,0,3,125,55,96,0
 51705 DEFB 175,110,126,127,0,255,36

@defs=51712:32
; Character buffer for MR ROCKITT (#b202)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R51749.
b51712 DEFS 32
 51744 DEFB 96       ; Initial animatory state: #AS96 (see #R62910)
 51745 DEFB 37,10    ; Initial location (see #R62910)
 51747 DEFB 32       ; Initial flags for byte #b29 (see #R62910)
@label=CBUF202_36
 51748 DEFB 68       ; Random location table identifier (see #R25815)

; Personal timetable for MR ROCKITT (#b202)
;
; Used by the routine at #R63309.
@label=PTROCKITT
b51749 DEFB 68       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59677(#b68)
                     ; (Walkabout)
 51750 DEFB 62       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59646(#b62)
                     ; (Science Lab)
 51751 DEFB 62       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59646(#b62)
                     ; (Science Lab)
 51752 DEFB 62       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59646(#b62)
                     ; (Science Lab)
 51753 DEFB 68       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59677(#b68)
                     ; (Walkabout)
 51754 DEFB 60       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59629(#b60)
                     ; (Yellow Room)
 51755 DEFB 62       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59646(#b62) (Science Lab)
 51756 DEFB 62       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59646(#b62) (Science Lab)
 51757 DEFB 68       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R59677(#b68) (Walkabout)
 51758 DEFB 60       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59629(#b60) (Yellow Room)
 51759 DEFB 62       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R59646(#b62) (Science Lab)
 51760 DEFB 62       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59646(#b62) (Science Lab)
 51761 DEFB 62       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R59646(#b62) (Science Lab)
 51762 DEFB 68       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R59677(#b68)
                     ; (Walkabout)
 51763 DEFB 68       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R59677(#b68)
                     ; (Walkabout)
 51764 DEFB 80       ; Lesson #LESSON52 (ASSEMBLY): #R59788(#b80) (Assembly)
 51765 DEFB 62       ; Lesson #LESSON53 (REVISION LIBRARY): #R59646(#b62)
                     ; (Science Lab)
 51766 DEFB 62       ; Lesson #LESSON54 (REVISION LIBRARY): #R59646(#b62)
                     ; (Science Lab)
 51767 DEFB 68       ; Lesson #LESSON55 (PLAYTIME): #R59677(#b68) (Walkabout)
 51768 DEFB 68       ; Lesson #LESSON56 (PLAYTIME): #R59677(#b68) (Walkabout)
 51769 DEFB 68       ; Lesson #LESSON57 (PLAYTIME): #R59677(#b68) (Walkabout)
 51770 DEFB 68       ; Lesson #LESSON58 (PLAYTIME): #R59677(#b68) (Walkabout)
 51771 DEFB 68       ; Lesson #LESSON59 (PLAYTIME): #R59677(#b68) (Walkabout)

; Command list #b2: Middle-floor classroom - girl
;
; Used by the little girls and HAYLEY in various lessons.
@label=CLIST2
b51772 DEFW 25700    ; Go to...
 51774 DEFB 174,10   ; ...the middle-floor classroom in the girls' skool
 51776 DEFW 31952    ; Move about until...
 51778 DEFB 9        ; ...the teacher arrives at middle-floor classroom in the
                     ; girls' skool
 51779 DEFW 26304    ; Find a seat and sit down
 51781 DEFW 53796    ; Sit still

; Unused
u51783 DEFB 1,0

; Graphic data for animatory states #b80-#b127 (UDG mask byte 2/8)
;
; Used by the routine at #R24576.
b51785 DEFB 215,250,255,135,245,255,235,191,113,183,255,226,18,231,247,251
 51801 DEFB 253,47,47,127,126,177,222,222,125,125,221,255,245,46,94,253
 51817 DEFB 247,247,253,239,223,210,151,255,95,239,239,217,94,255,244,253
 51833 DEFB 157,255,244,191,255,144,246,255,239,229,254,250,254,189,255,110
 51849 DEFB 228,255,239,139,119,251,239,166,236,223,254,232,243,191,255,244
 51865 DEFB 239,143,127,255,210,252,78,255,215,220,191,72,212,255,175,151
 51881 DEFB 95,253,251,244,253,207,250,145,141,127,255,210,47,244,137,127
@bfix=DEFB 234,254,127,232,255,69,255,87,255,254,223,79,163,223,159,194
 51897 DEFB 234,254,127,228,255,69,255,87,255,254,223,79,163,223,159,194
 51913 DEFB 85,223,253,244,234,251,249,252,53,207,47,95,127,223,254,253
 51929 DEFB 213,79,59,248,78,255,87,239,183,96,183,191,219,158,221,254
 51945 DEFB 246,246,251,125,9,253,191,239,223,183,255,251,125,183,96,120
 51961 DEFB 175,110,126,127,255,255,37

@defs=51968:32
; Character buffer for MR CREAK (#b203)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R52005.
b51968 DEFS 32
 52000 DEFB 232      ; Initial animatory state: #AS232 (see #R62910)
 52001 DEFB 43,17    ; Initial location (see #R62910)
 52003 DEFB 32       ; Initial flags for byte #b29 (see #R62910)
@label=CBUF203_36
 52004 DEFB 68       ; Random location table identifier (see #R25815)

; Personal timetable for MR CREAK (#b203)
;
; Used by the routine at #R63309.
@label=PTCREAK
b52005 DEFB 58       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59612(#b58)
                     ; (Blue Room)
 52006 DEFB 58       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59612(#b58)
                     ; (Blue Room)
 52007 DEFB 60       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59629(#b60)
                     ; (Yellow Room)
 52008 DEFB 60       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59629(#b60)
                     ; (Yellow Room)
 52009 DEFB 60       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59629(#b60)
                     ; (Yellow Room)
 52010 DEFB 68       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59677(#b68)
                     ; (Walkabout)
 52011 DEFB 58       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59612(#b58) (Blue Room)
 52012 DEFB 58       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59612(#b58) (Blue Room)
 52013 DEFB 60       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R59629(#b60) (Yellow Room)
 52014 DEFB 58       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59612(#b58) (Blue Room)
 52015 DEFB 58       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R59612(#b58) (Blue Room)
 52016 DEFB 58       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59612(#b58) (Blue Room)
 52017 DEFB 60       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R59629(#b60) (Yellow Room)
 52018 DEFB 68       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R59677(#b68)
                     ; (Walkabout)
 52019 DEFB 68       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R59677(#b68)
                     ; (Walkabout)
 52020 DEFB 80       ; Lesson #LESSON52 (ASSEMBLY): #R59788(#b80) (Assembly)
 52021 DEFB 60       ; Lesson #LESSON53 (REVISION LIBRARY): #R59629(#b60)
                     ; (Yellow Room)
 52022 DEFB 60       ; Lesson #LESSON54 (REVISION LIBRARY): #R59629(#b60)
                     ; (Yellow Room)
 52023 DEFB 68       ; Lesson #LESSON55 (PLAYTIME): #R59677(#b68) (Walkabout)
 52024 DEFB 68       ; Lesson #LESSON56 (PLAYTIME): #R59677(#b68) (Walkabout)
 52025 DEFB 68       ; Lesson #LESSON57 (PLAYTIME): #R59677(#b68) (Walkabout)
 52026 DEFB 68       ; Lesson #LESSON58 (PLAYTIME): #R59677(#b68) (Walkabout)
 52027 DEFB 68       ; Lesson #LESSON59 (PLAYTIME): #R59677(#b68) (Walkabout)

; Command list #b4: Blue Room - little boy
;
; Used by the little boys in various lessons.
@label=CLIST4
b52028 DEFW 25700    ; Go to...
 52030 DEFB 22,3     ; ...the Blue Room
 52032 DEFW 31952    ; Move about until...
 52034 DEFB 10       ; ...the teacher arrives at the Blue Room
 52035 DEFW 26304    ; Find a seat and sit down
 52037 DEFW 53796    ; Sit still

; Unused
u52039 DEFB 1,0

; Graphic data for animatory states #b80-#b127 (UDG byte 3/8)
;
; Used by the routine at #R24576.
b52041 DEFB 16,4,0,120,2,0,4,64,177,40,0,182,18,24,7,3
 52057 DEFB 2,96,32,128,123,49,33,33,126,126,31,0,244,30,92,2
 52073 DEFB 7,7,1,16,239,225,149,0,64,224,224,25,92,0,5,254
@bfix=DEFB 30,0,4,64,0,141,14,0,96,180,1,1,0,66,110,238
 52089 DEFB 28,0,4,64,0,141,14,0,96,180,1,1,0,66,110,238
 52105 DEFB 228,0,208,244,112,4,20,30,9,32,237,239,241,64,0,244
 52121 DEFB 15,159,0,0,23,3,71,0,160,3,110,104,20,0,16,112
 52137 DEFB 64,0,6,6,0,48,225,135,142,0,0,18,32,4,136,128
 52153 DEFB 9,0,142,40,0,68,0,32,0,0,15,133,199,31,224,194
 52169 DEFB 140,192,0,8,12,7,254,92,120,207,32,192,128,31,0,126
 52185 DEFB 18,133,35,7,72,0,32,31,111,111,53,192,188,190,92,1
 52201 DEFB 6,7,252,251,251,115,192,224,192,49,0,3,77,111,47,135
 52217 DEFB 222,238,126,127,0,226,132

@defs=52224:32
; Character buffer for MISS TAKE (#b204)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R52261.
@label=TAKECBUF
b52224 DEFS 32
 52256 DEFB 112      ; Initial animatory state: #AS112 (see #R62910)
 52257 DEFB 188,3    ; Initial location (see #R62910)
 52259 DEFB 32       ; Initial flags for byte #b29 (see #R62910)
@label=CBUF204_36
 52260 DEFB 38       ; Random location table identifier (see #R25815)

; Personal timetable for MISS TAKE (#b204)
;
; Used by the routine at #R63309.
@label=PTTAKE
b52261 DEFB 22       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R58368(#b22)
                     ; (Top-floor classroom)
 52262 DEFB 24       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R58880(#b24)
                     ; (Middle-floor classroom)
 52263 DEFB 22       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R58368(#b22)
                     ; (Top-floor classroom)
 52264 DEFB 24       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R58880(#b24)
                     ; (Middle-floor classroom)
 52265 DEFB 22       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R58368(#b22)
                     ; (Top-floor classroom)
 52266 DEFB 24       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R58880(#b24)
                     ; (Middle-floor classroom)
 52267 DEFB 24       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R58880(#b24) (Middle-floor classroom)
 52268 DEFB 22       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R58368(#b22) (Top-floor classroom)
 52269 DEFB 24       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R58880(#b24) (Middle-floor classroom)
 52270 DEFB 22       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R58368(#b22) (Top-floor classroom)
 52271 DEFB 24       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R58880(#b24) (Middle-floor classroom)
 52272 DEFB 24       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R58880(#b24) (Middle-floor classroom)
 52273 DEFB 22       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R58368(#b22) (Top-floor classroom)
 52274 DEFB 26       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R59136(#b26)
                     ; (Kitchen walkabout)
 52275 DEFB 26       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R59136(#b26)
                     ; (Kitchen walkabout)
 52276 DEFB 26       ; Lesson #LESSON52 (ASSEMBLY): #R59136(#b26) (Kitchen
                     ; walkabout)
 52277 DEFB 22       ; Lesson #LESSON53 (REVISION LIBRARY): #R58368(#b22)
                     ; (Top-floor classroom)
 52278 DEFB 22       ; Lesson #LESSON54 (REVISION LIBRARY): #R58368(#b22)
                     ; (Top-floor classroom)
 52279 DEFB 26       ; Lesson #LESSON55 (PLAYTIME): #R59136(#b26) (Kitchen
                     ; walkabout)
 52280 DEFB 28       ; Lesson #LESSON56 (PLAYTIME): #R57956(#b28) (Girls' skool
                     ; walkabout)
 52281 DEFB 26       ; Lesson #LESSON57 (PLAYTIME): #R59136(#b26) (Kitchen
                     ; walkabout)
 52282 DEFB 28       ; Lesson #LESSON58 (PLAYTIME): #R57956(#b28) (Girls' skool
                     ; walkabout)
 52283 DEFB 26       ; Lesson #LESSON59 (PLAYTIME): #R59136(#b26) (Kitchen
                     ; walkabout)

; Command list #b6: Yellow Room - little boy
;
; Used by the little boys in various lessons.
@label=CLIST6
b52284 DEFW 25700    ; Go to...
 52286 DEFB 56,3     ; ...the Yellow Room
 52288 DEFW 31952    ; Move about until...
 52290 DEFB 11       ; ...the teacher arrives at the Yellow Room
 52291 DEFW 26304    ; Find a seat and sit down
 52293 DEFW 53796    ; Sit still

; Unused
u52295 DEFB 1,0

; Graphic data for animatory states #b80-#b127 (UDG mask byte 3/8)
;
; Used by the routine at #R24576.
b52297 DEFB 215,245,254,121,250,255,245,95,177,168,255,182,18,27,247,251
@bfix=DEFB 250,111,47,191,123,177,161,161,126,126,223,127,245,30,93,250
 52313 DEFB 250,111,47,159,123,177,161,161,126,126,223,127,245,30,93,250
 52329 DEFB 247,247,253,23,239,225,149,255,95,239,239,217,93,255,245,254
@bfix=DEFB 222,127,244,95,255,141,206,255,111,181,253,253,254,66,110,238
 52345 DEFB 220,127,244,95,255,141,206,255,111,181,253,253,254,66,110,238
 52361 DEFB 228,255,215,245,119,244,212,222,233,47,237,239,241,95,127,244
 52377 DEFB 239,159,127,255,215,251,71,127,167,195,110,104,212,127,23,119
 52393 DEFB 95,252,246,246,254,55,225,135,142,127,255,210,47,244,168,191
 52409 DEFB 233,255,142,40,252,68,127,47,254,254,239,133,199,223,239,194
 52425 DEFB 141,223,254,232,236,247,254,92,120,207,47,223,191,223,255,126
 52441 DEFB 210,133,163,247,72,127,47,223,111,111,181,223,189,190,93,253
 52457 DEFB 246,247,253,251,251,115,223,239,223,177,255,251,77,111,175,135
 52473 DEFB 222,238,126,127,255,226,133

@defs=52480:32
; Character buffer for ALBERT (#b205)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R52517.
@label=ALBERTCBUF
b52480 DEFS 32
 52512 DEFB 120      ; Initial animatory state: #AS120 (see #R62910)
 52513 DEFB 136,17   ; Initial location (see #R62910)
 52515 DEFB 32       ; Initial flags for byte #b29 (see #R62910)
@label=CBUF205_36
 52516 DEFB 44       ; Random location table identifier (see #R25815)

; Personal timetable for ALBERT (#b205)
;
; Used by the routine at #R63309.
@label=PTALBERT
b52517 DEFB 76       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59724(#b76)
                     ; (Close the gate and the door)
 52518 DEFB 76       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59724(#b76)
                     ; (Close the gate and the door)
 52519 DEFB 76       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59724(#b76)
                     ; (Close the gate and the door)
 52520 DEFB 76       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59724(#b76)
                     ; (Close the gate and the door)
 52521 DEFB 76       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59724(#b76)
                     ; (Close the gate and the door)
 52522 DEFB 76       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59724(#b76)
                     ; (Close the gate and the door)
 52523 DEFB 76       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59724(#b76) (Close the gate and the door)
 52524 DEFB 76       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59724(#b76) (Close the gate and the door)
 52525 DEFB 76       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R59724(#b76) (Close the gate and the door)
 52526 DEFB 76       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59724(#b76) (Close the gate and the door)
 52527 DEFB 76       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R59724(#b76) (Close the gate and the door)
 52528 DEFB 76       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59724(#b76) (Close the gate and the door)
 52529 DEFB 76       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R59724(#b76) (Close the gate and the door)
 52530 DEFB 76       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R59724(#b76)
                     ; (Close the gate and the door)
 52531 DEFB 76       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R59724(#b76)
                     ; (Close the gate and the door)
 52532 DEFB 76       ; Lesson #LESSON52 (ASSEMBLY): #R59724(#b76) (Close the
                     ; gate and the door)
 52533 DEFB 76       ; Lesson #LESSON53 (REVISION LIBRARY): #R59724(#b76)
                     ; (Close the gate and the door)
 52534 DEFB 76       ; Lesson #LESSON54 (REVISION LIBRARY): #R59724(#b76)
                     ; (Close the gate and the door)
 52535 DEFB 78       ; Lesson #LESSON55 (PLAYTIME): #R59765(#b78) (Open the
                     ; door and the gate)
 52536 DEFB 78       ; Lesson #LESSON56 (PLAYTIME): #R59765(#b78) (Open the
                     ; door and the gate)
 52537 DEFB 78       ; Lesson #LESSON57 (PLAYTIME): #R59765(#b78) (Open the
                     ; door and the gate)
 52538 DEFB 78       ; Lesson #LESSON58 (PLAYTIME): #R59765(#b78) (Open the
                     ; door and the gate)
 52539 DEFB 78       ; Lesson #LESSON59 (PLAYTIME): #R59765(#b78) (Open the
                     ; door and the gate)

; Command list #b8: Science Lab - little boy
;
; Used by the little boys in various lessons.
@label=CLIST8
b52540 DEFW 25700    ; Go to...
 52542 DEFB 50,10    ; ...the Science Lab
 52544 DEFW 31952    ; Move about until...
 52546 DEFB 12       ; ...the teacher arrives at the Science Lab
 52547 DEFW 26304    ; Find a seat and sit down
 52549 DEFW 53796    ; Sit still

; Unused
u52551 DEFB 1,0

; Graphic data for animatory states #b80-#b127 (UDG byte 4/8)
;
; Used by the routine at #R24576.
b52553 DEFB 16,4,1,134,1,0,4,64,50,47,0,158,33,28,3,3
 52569 DEFB 2,224,16,192,57,50,33,67,114,29,31,128,228,254,92,4
 52585 DEFB 7,1,1,56,46,223,149,0,64,224,144,25,92,0,3,114
 52601 DEFB 29,128,3,96,0,72,61,0,112,178,1,0,0,71,110,241
 52617 DEFB 110,0,208,244,112,4,22,15,9,112,237,31,120,64,128,116
 52633 DEFB 7,23,0,0,13,4,39,128,240,43,68,36,20,128,136,80
 52649 DEFB 64,2,4,2,0,184,72,69,141,0,0,18,32,4,132,64
@bfix=DEFB 11,0,132,36,3,39,128,112,0,0,16,133,143,31,112,130
 52665 DEFB 11,0,132,40,3,39,128,112,0,0,16,133,143,31,112,130
 52681 DEFB 196,192,1,8,8,7,7,88,252,135,32,64,128,31,0,255
 52697 DEFB 22,133,35,8,40,128,240,17,77,183,63,224,188,188,92,1
 52713 DEFB 11,2,30,219,123,251,192,192,192,53,0,3,93,77,55,185
 52729 DEFB 220,238,126,127,0,250,36

@defs=52736:32
; Character buffer for BOY WANDER (#b206)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R52773.
b52736 DEFS 32
 52768 DEFB 144      ; Initial animatory state: #AS144 (see #R62910)
 52769 DEFB 122,17   ; Initial location (see #R62910)
 52771 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF206_36
 52772 DEFB 46       ; Random location table identifier (see #R25815)

; Personal timetable for BOY WANDER (#b206)
;
; Used by the routine at #R63309.
@label=PTTEARAWAY
b52773 DEFB 46       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59488(#b46)
                     ; (Blue Room)
 52774 DEFB 32       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R58768(#b32)
                     ; (Science Lab)
 52775 DEFB 50       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59519(#b50)
                     ; (Yellow Room)
 52776 DEFB 50       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59519(#b50)
                     ; (Yellow Room)
 52777 DEFB 46       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59488(#b46)
                     ; (Blue Room)
 52778 DEFB 36       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R58798(#b36)
                     ; (Revision Library)
 52779 DEFB 50       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59519(#b50) (Yellow Room)
 52780 DEFB 50       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59519(#b50) (Yellow Room)
 52781 DEFB 32       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R58768(#b32) (Science Lab)
 52782 DEFB 36       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R58798(#b36) (Revision Library)
 52783 DEFB 32       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R58768(#b32) (Science Lab)
 52784 DEFB 46       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59488(#b46) (Blue Room)
 52785 DEFB 32       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R58768(#b32) (Science Lab)
 52786 DEFB 38       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R58813(#b38)
                     ; (Dinner)
 52787 DEFB 38       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R58813(#b38)
                     ; (Dinner)
 52788 DEFB 40       ; Lesson #LESSON52 (ASSEMBLY): #R59151(#b40) (Assembly)
 52789 DEFB 36       ; Lesson #LESSON53 (REVISION LIBRARY): #R58798(#b36)
                     ; (Revision Library)
 52790 DEFB 46       ; Lesson #LESSON54 (REVISION LIBRARY): #R59488(#b46) (Blue
                     ; Room)
 52791 DEFB 54       ; Lesson #LESSON55 (PLAYTIME): #R59550(#b54) (Write on the
                     ; blackboards in the boys' skool)
 52792 DEFB 54       ; Lesson #LESSON56 (PLAYTIME): #R59550(#b54) (Write on the
                     ; blackboards in the boys' skool)
 52793 DEFB 56       ; Lesson #LESSON57 (PLAYTIME): #R59584(#b56) (Write on the
                     ; blackboards in the girls' skool)
 52794 DEFB 42       ; Lesson #LESSON58 (PLAYTIME): #R58828(#b42) (Walkabout)
 52795 DEFB 42       ; Lesson #LESSON59 (PLAYTIME): #R58828(#b42) (Walkabout)

; Command list #b10: Kitchen - girl
;
; Used by the little girls and HAYLEY in various lessons.
@label=CLIST10
b52796 DEFW 25700    ; Go to...
 52798 DEFB 190,17   ; ...the kitchen
 52800 DEFW 31952    ; Move about until...
 52802 DEFB 0        ; ...the bell rings

; Unused
s52803 DEFB 0

; Data for staircase endpoint #b206
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b206 is the
; bottom of the staircase leading up to the top floor in the girls' skool.
b52804 DEFB 186      ; x-coordinate of the bottom of the staircase
 52805 DEFB 0        ; Face left to ascend the staircase
 52806 DEFB 56       ; LSB of #R25656 (ascend staircase)
 52807 DEFB 8        ; Number of steps in the staircase

; Unused
s52808 DEFB 0

; Graphic data for animatory states #b80-#b127 (UDG mask byte 4/8)
;
; Used by the routine at #R24576.
b52809 DEFB 215,245,249,134,253,127,245,95,50,175,255,158,33,29,251,251
 52825 DEFB 250,239,23,223,185,178,161,67,114,157,223,191,229,254,93,244
 52841 DEFB 247,249,253,59,46,223,149,255,95,239,151,217,93,255,251,114
 52857 DEFB 221,191,251,96,255,72,61,255,119,178,253,254,255,71,110,241
 52873 DEFB 110,127,215,245,119,244,214,239,233,119,237,31,120,95,191,116
 52889 DEFB 247,23,127,255,237,228,167,191,247,171,68,164,212,191,139,87
 52905 DEFB 95,250,244,250,254,187,72,69,141,127,127,210,47,244,180,95
@bfix=DEFB 235,255,132,164,251,167,191,119,254,254,208,133,143,223,119,130
 52921 DEFB 235,255,132,168,251,167,191,119,254,254,208,133,143,223,119,130
 52937 DEFB 197,223,253,232,232,247,7,88,252,183,47,95,191,223,254,255
 52953 DEFB 214,133,163,232,168,191,247,209,77,183,191,239,189,189,93,253
 52969 DEFB 235,250,30,219,123,251,223,223,223,181,255,251,93,77,183,185
 52985 DEFB 220,238,126,127,255,250,37

@defs=52992:32
; Character buffer for ANGELFACE (#b207)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R53029.
@label=BULLYCBUF
b52992 DEFS 32
 53024 DEFB 32       ; Initial animatory state: #AS32 (see #R62910)
 53025 DEFB 116,17   ; Initial location (see #R62910)
 53027 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF207_36
 53028 DEFB 46       ; Random location table identifier (see #R25815)

; Personal timetable for ANGELFACE (#b207)
;
; Used by the routine at #R63309.
@label=PTBULLY
b53029 DEFB 48       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59499(#b48)
                     ; (Blue Room)
 53030 DEFB 48       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59499(#b48)
                     ; (Blue Room)
 53031 DEFB 52       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59530(#b52)
                     ; (Yellow Room)
 53032 DEFB 34       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R58779(#b34)
                     ; (Science Lab)
 53033 DEFB 52       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59530(#b52)
                     ; (Yellow Room)
 53034 DEFB 48       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59499(#b48)
                     ; (Blue Room)
 53035 DEFB 48       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59499(#b48) (Blue Room)
 53036 DEFB 36       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R58798(#b36) (Revision Library)
 53037 DEFB 34       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R58779(#b34) (Science Lab)
 53038 DEFB 52       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59530(#b52) (Yellow Room)
 53039 DEFB 34       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R58779(#b34) (Science Lab)
 53040 DEFB 34       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R58779(#b34) (Science Lab)
 53041 DEFB 36       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R58798(#b36) (Revision Library)
 53042 DEFB 38       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R58813(#b38)
                     ; (Dinner)
 53043 DEFB 38       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R58813(#b38)
                     ; (Dinner)
 53044 DEFB 40       ; Lesson #LESSON52 (ASSEMBLY): #R59151(#b40) (Assembly)
 53045 DEFB 36       ; Lesson #LESSON53 (REVISION LIBRARY): #R58798(#b36)
                     ; (Revision Library)
 53046 DEFB 36       ; Lesson #LESSON54 (REVISION LIBRARY): #R58798(#b36)
                     ; (Revision Library)
 53047 DEFB 44       ; Lesson #LESSON55 (PLAYTIME): #R58844(#b44) (Stalk
                     ; HAYLEY)
 53048 DEFB 42       ; Lesson #LESSON56 (PLAYTIME): #R58828(#b42) (Walkabout)
 53049 DEFB 44       ; Lesson #LESSON57 (PLAYTIME): #R58844(#b44) (Stalk
                     ; HAYLEY)
 53050 DEFB 42       ; Lesson #LESSON58 (PLAYTIME): #R58828(#b42) (Walkabout)
 53051 DEFB 44       ; Lesson #LESSON59 (PLAYTIME): #R58844(#b44) (Stalk
                     ; HAYLEY)

; Command list #b12: Dinner hall - girl
;
; Used by the little girls and HAYLEY in various lessons.
@label=CLIST12
b53052 DEFW 25700    ; Go to...
 53054 DEFB 174,17   ; ...the dinner hall in the girls' skool
 53056 DEFW 31952    ; Move about until...
 53058 DEFB 0        ; ...the bell rings

; Unused
s53059 DEFB 0

; Data for staircase endpoint #b207
;
; Used by the routines at #R25700 and #R25843. Staircase endpoint #b207 is the
; top of the staircase leading down to the middle floor in the girls' skool.
b53060 DEFB 179      ; x-coordinate of the top of the staircase
 53061 DEFB 128      ; Face right to descend the staircase
 53062 DEFB 77       ; LSB of #R25677 (descend staircase)
 53063 DEFB 8        ; Number of steps in the staircase

; Unused
s53064 DEFB 0

; Graphic data for animatory states #b80-#b127 (UDG byte 5/8)
;
; Used by the routine at #R24576.
b53065 DEFB 16,8,6,1,0,128,2,0,62,16,0,254,233,92,3,3
 53081 DEFB 3,224,144,192,63,62,53,106,120,29,3,128,230,94,72,6
 53097 DEFB 7,1,0,168,142,213,148,0,96,224,144,9,72,0,1,56
 53113 DEFB 29,64,3,127,0,95,195,0,144,170,1,0,0,111,110,224
 53129 DEFB 36,0,208,240,64,6,22,14,9,240,109,15,4,0,128,12
 53145 DEFB 1,31,0,0,9,31,35,192,144,86,69,44,12,128,200,16
 53161 DEFB 64,5,4,2,0,104,92,193,159,0,128,18,32,5,2,96
@bfix=DEFB 6,0,165,44,6,34,128,144,0,0,26,165,159,31,240,146
 53177 DEFB 6,0,165,36,6,34,128,144,0,0,26,165,159,31,240,146
 53193 DEFB 232,192,1,10,9,7,175,89,254,131,32,128,64,15,0,255
 53209 DEFB 29,133,35,31,39,128,144,26,77,183,7,224,188,162,96,1
 53225 DEFB 11,2,174,219,122,138,192,32,0,13,0,0,222,77,55,193
 53241 DEFB 237,238,126,127,0,204,4

@defs=53248:32
; Character buffer for EINSTEIN (#b208)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R53285.
@label=SWOTCBUF
b53248 DEFS 32
 53280 DEFB 48       ; Initial animatory state: #AS48 (see #R62910)
 53281 DEFB 24,3     ; Initial location (see #R62910)
 53283 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF208_36
 53284 DEFB 44       ; Random location table identifier (see #R25815)

; Personal timetable for EINSTEIN (#b208)
;
; Used by the routine at #R63309.
@label=PTSWOT
b53285 DEFB 82       ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R59801(#b82)
                     ; (Blue Room)
 53286 DEFB 82       ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R59801(#b82)
                     ; (Blue Room)
 53287 DEFB 84       ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R59812(#b84)
                     ; (Yellow Room)
 53288 DEFB 84       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R59812(#b84)
                     ; (Yellow Room)
 53289 DEFB 82       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R59801(#b82)
                     ; (Blue Room)
 53290 DEFB 82       ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R59801(#b82)
                     ; (Blue Room)
 53291 DEFB 84       ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM):
                     ; #R59812(#b84) (Yellow Room)
 53292 DEFB 84       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R59812(#b84) (Yellow Room)
 53293 DEFB 86       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R59823(#b86) (Science Lab)
 53294 DEFB 86       ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB):
                     ; #R59823(#b86) (Science Lab)
 53295 DEFB 86       ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R59823(#b86) (Science Lab)
 53296 DEFB 86       ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R59823(#b86) (Science Lab)
 53297 DEFB 86       ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R59823(#b86) (Science Lab)
 53298 DEFB 16       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53564(#b16)
                     ; (Dinner)
 53299 DEFB 16       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53564(#b16)
                     ; (Dinner)
 53300 DEFB 20       ; Lesson #LESSON52 (ASSEMBLY): #R57942(#b20) (Assembly)
 53301 DEFB 14       ; Lesson #LESSON53 (REVISION LIBRARY): #R53308(#b14)
                     ; (Revision Library)
 53302 DEFB 14       ; Lesson #LESSON54 (REVISION LIBRARY): #R53308(#b14)
                     ; (Revision Library)
 53303 DEFB 18       ; Lesson #LESSON55 (PLAYTIME): #R53820(#b18) (Walkabout)
 53304 DEFB 18       ; Lesson #LESSON56 (PLAYTIME): #R53820(#b18) (Walkabout)
 53305 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 53306 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 53307 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Command list #b14: Revision Library - EINSTEIN/little boy
;
; Used by the little boys in various lessons, and by EINSTEIN in lessons
; #LESSON53 and #LESSON54.
@label=CLIST14
b53308 DEFW 25700    ; Go to...
 53310 DEFB 37,3     ; ...the Revision Library
 53312 DEFW 31952    ; Move about until...
 53314 DEFB 0        ; ...the bell rings

; Unused
s53315 DEFS 6

; Graphic data for animatory states #b80-#b127 (UDG mask byte 5/8)
;
; Used by the routine at #R24576.
b53321 DEFB 215,235,230,121,254,191,250,191,62,208,255,254,233,93,251,251
 53337 DEFB 251,239,151,223,159,190,181,106,120,221,227,191,230,94,75,246
@bfix=DEFB 247,253,254,171,142,213,148,255,111,239,151,233,75,255,253,56
 53353 DEFB 247,253,254,187,142,213,148,255,111,239,151,233,75,255,253,56
 53369 DEFB 221,95,251,127,248,95,195,127,151,170,253,254,255,111,110,224
 53385 DEFB 164,127,215,243,79,246,214,238,233,247,109,15,4,31,191,140
 53401 DEFB 249,31,127,255,233,223,163,223,151,86,69,172,236,191,203,23
 53417 DEFB 95,245,244,250,254,107,92,193,159,127,191,210,47,245,122,111
@bfix=DEFB 246,255,165,172,230,162,191,151,254,254,218,165,159,223,247,146
 53433 DEFB 246,255,165,164,230,162,191,151,254,254,218,165,159,223,247,146
@bfix=DEFB 235,223,253,234,233,231,175,89,254,187,47,191,95,239,254,255
 53449 DEFB 235,223,253,234,233,231,175,89,254,187,47,191,79,239,254,255
 53465 DEFB 221,133,163,223,167,159,151,218,77,183,199,239,189,162,99,253
 53481 DEFB 235,250,174,219,122,138,223,47,63,205,240,252,222,77,183,193
 53497 DEFB 237,238,126,127,63,204,5

@defs=53504:32
; Character buffer for HAYLEY (#b209)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used. This character's personal
; timetable follows at #R53541.
@label=HAYLEYCBUF
b53504 DEFS 32
 53536 DEFB 56       ; Initial animatory state: #AS56 (see #R62910)
 53537 DEFB 136,17   ; Initial location (see #R62910)
 53539 DEFB 0        ; Initial flags for byte #b29 (see #R62910)
@label=CBUF209_36
 53540 DEFB 36       ; Random location table identifier (see #R25815)

; Personal timetable for HAYLEY (#b209)
;
; Used by the routine at #R63309.
@label=PTHAYLEY
b53541 DEFB 0        ; Lesson #LESSON37 (MR CREAK - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 53542 DEFB 2        ; Lesson #LESSON38 (MR CREAK - BLUE ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 53543 DEFB 0        ; Lesson #LESSON39 (MR CREAK - YELLOW ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 53544 DEFB 10       ; Lesson #LESSON40 (MR CREAK - YELLOW ROOM): #R52796(#b10)
                     ; (Kitchen)
 53545 DEFB 12       ; Lesson #LESSON41 (MR WITHIT - BLUE ROOM): #R53052(#b12)
                     ; (Dinner hall)
 53546 DEFB 0        ; Lesson #LESSON42 (MR WITHIT - BLUE ROOM): #R51516(#b0)
                     ; (Top-floor classroom)
 53547 DEFB 2        ; Lesson #LESSON43 (MR WITHIT - YELLOW ROOM): #R51772(#b2)
                     ; (Middle-floor classroom)
 53548 DEFB 10       ; Lesson #LESSON44 (MR WITHIT - YELLOW ROOM):
                     ; #R52796(#b10) (Kitchen)
 53549 DEFB 12       ; Lesson #LESSON45 (MR WITHIT - SCIENCE LAB):
                     ; #R53052(#b12) (Dinner hall)
 53550 DEFB 0        ; Lesson #LESSON46 (MR WITHIT - SCIENCE LAB): #R51516(#b0)
                     ; (Top-floor classroom)
 53551 DEFB 2        ; Lesson #LESSON47 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 53552 DEFB 2        ; Lesson #LESSON48 (MR ROCKITT - SCIENCE LAB):
                     ; #R51772(#b2) (Middle-floor classroom)
 53553 DEFB 0        ; Lesson #LESSON49 (MR ROCKITT - SCIENCE LAB):
                     ; #R51516(#b0) (Top-floor classroom)
 53554 DEFB 12       ; Lesson #LESSON50 (DINNER (MR WACKER)): #R53052(#b12)
                     ; (Dinner hall)
 53555 DEFB 12       ; Lesson #LESSON51 (DINNER (MR WITHIT)): #R53052(#b12)
                     ; (Dinner hall)
 53556 DEFB 12       ; Lesson #LESSON52 (ASSEMBLY): #R53052(#b12) (Dinner hall)
 53557 DEFB 0        ; Lesson #LESSON53 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 53558 DEFB 0        ; Lesson #LESSON54 (REVISION LIBRARY): #R51516(#b0)
                     ; (Top-floor classroom)
 53559 DEFB 10       ; Lesson #LESSON55 (PLAYTIME): #R52796(#b10) (Kitchen)
 53560 DEFB 10       ; Lesson #LESSON56 (PLAYTIME): #R52796(#b10) (Kitchen)
 53561 DEFB 18       ; Lesson #LESSON57 (PLAYTIME): #R53820(#b18) (Walkabout)
 53562 DEFB 18       ; Lesson #LESSON58 (PLAYTIME): #R53820(#b18) (Walkabout)
 53563 DEFB 18       ; Lesson #LESSON59 (PLAYTIME): #R53820(#b18) (Walkabout)

; Command list #b16: Dinner - EINSTEIN/little boy
;
; Used by the little boys and EINSTEIN in lessons #LESSON50 and #LESSON51.
@label=CLIST16
b53564 DEFW 25700    ; Go to...
 53566 DEFB 54,17    ; ...the dinner hall in the boys' skool
 53568 DEFW 31952    ; Move about until...
 53570 DEFB 0        ; ...the bell rings

; Unused
s53571 DEFS 6

; Graphic data for animatory states #b80-#b127 (UDG byte 6/8)
;
; Used by the routine at #R24576.
b53577 DEFB 16,8,24,0,0,64,2,0,126,8,0,254,233,20,3,3
 53593 DEFB 2,224,144,64,63,62,33,67,120,29,1,128,230,94,72,4
 53609 DEFB 7,1,0,56,142,213,148,0,96,224,112,9,72,0,0,152
 53625 DEFB 29,32,5,112,7,47,55,128,136,238,1,0,0,71,110,228
 53641 DEFB 61,0,208,240,192,4,22,14,30,112,173,79,2,0,128,29
 53657 DEFB 3,231,0,0,9,36,23,32,136,40,68,46,31,128,72,16
 53673 DEFB 64,2,4,2,1,144,68,225,212,0,128,59,160,15,1,224
@bfix=DEFB 6,0,164,46,31,19,128,8,0,0,16,165,127,63,80,146
 53689 DEFB 6,0,164,44,31,19,128,8,0,0,16,165,127,63,80,146
 53705 DEFB 248,192,1,10,7,31,5,89,255,129,32,128,64,31,1,246
 53721 DEFB 4,133,47,47,23,224,8,16,79,119,7,96,188,210,64,1
 53737 DEFB 7,2,6,251,125,137,192,32,0,13,15,0,88,207,55,128
 53753 DEFB 253,230,126,224,192,2,120

@defs=53760:32
; Character buffer for ERIC (#b210)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used.
@label=ERICCBUF
b53760 DEFS 32
 53792 DEFB 128      ; Initial animatory state: #AS128 (see #R62910)
 53793 DEFB 133,17   ; Initial location (see #R62910)
 53795 DEFB 0        ; Initial flags for byte #b29 (see #R62910) (irrelevant
                     ; for ERIC)

; Make a character do nothing
;
; Used by the routines at #R24348 and #R62910, and by command lists
; #R51516(#b0), #R51772(#b2), #R52028(#b4), #R52284(#b6), #R52540(#b8),
; #R58768(#b32), #R58779(#b34), #R59488(#b46), #R59499(#b48), #R59519(#b50) and
; #R59530(#b52) to make a character do nothing. The #S/RET/ instruction is
; located in ERIC's buffer at byte #b36, which is otherwise unused.
@label=DONOWT
c53796 RET           ; Return having done nothing

; Lesson descriptors
;
; When a lesson starts, the routine at #R63309 picks up the lesson descriptor
; from this table and copies it into #R32736. Each entry in this table defines
; the teacher for the period (if any), and the room. The teacher is identified
; by bits 4-7:
; .
; #TABLE(default)
; { =h Bits | =h Teacher }
; { 0000    | None }
; { 0001    | MR WACKER }
; { 0010    | MR WITHIT }
; { 0011    | MR ROCKITT }
; { 0100    | MR CREAK }
; TABLE#
; .
; The room is identified by bits 0-3:
; .
; #TABLE(default)
; { =h Bits | =h Room }
; { 0010    | PLAYTIME }
; { 0011    | ASSEMBLY }
; { 0100    | DINNER }
; { 0101    | REVISION LIBRARY }
; { 0110    | SCIENCE LAB }
; { 0111    | BLUE ROOM }
; { 1000    | YELLOW ROOM }
; TABLE#
@label=LDESCS
b53797 DEFB 71       ; Lesson #LESSON37: MR CREAK - BLUE ROOM
 53798 DEFB 71       ; Lesson #LESSON38: MR CREAK - BLUE ROOM
 53799 DEFB 72       ; Lesson #LESSON39: MR CREAK - YELLOW ROOM
 53800 DEFB 72       ; Lesson #LESSON40: MR CREAK - YELLOW ROOM
 53801 DEFB 39       ; Lesson #LESSON41: MR WITHIT - BLUE ROOM
 53802 DEFB 39       ; Lesson #LESSON42: MR WITHIT - BLUE ROOM
 53803 DEFB 40       ; Lesson #LESSON43: MR WITHIT - YELLOW ROOM
 53804 DEFB 40       ; Lesson #LESSON44: MR WITHIT - YELLOW ROOM
 53805 DEFB 38       ; Lesson #LESSON45: MR WITHIT - SCIENCE LAB
 53806 DEFB 38       ; Lesson #LESSON46: MR WITHIT - SCIENCE LAB
 53807 DEFB 54       ; Lesson #LESSON47: MR ROCKITT - SCIENCE LAB
 53808 DEFB 54       ; Lesson #LESSON48: MR ROCKITT - SCIENCE LAB
 53809 DEFB 54       ; Lesson #LESSON49: MR ROCKITT - SCIENCE LAB
 53810 DEFB 20       ; Lesson #LESSON50: DINNER (MR WACKER)
 53811 DEFB 36       ; Lesson #LESSON51: DINNER (MR WITHIT)
 53812 DEFB 35       ; Lesson #LESSON52: ASSEMBLY
 53813 DEFB 5        ; Lesson #LESSON53: REVISION LIBRARY
 53814 DEFB 5        ; Lesson #LESSON54: REVISION LIBRARY
 53815 DEFB 2        ; Lesson #LESSON55: PLAYTIME
 53816 DEFB 2        ; Lesson #LESSON56: PLAYTIME
 53817 DEFB 2        ; Lesson #LESSON57: PLAYTIME
 53818 DEFB 2        ; Lesson #LESSON58: PLAYTIME
 53819 DEFB 2        ; Lesson #LESSON59: PLAYTIME

; Command list #b18: Walkabout - EINSTEIN/little boy/girl
;
; Used by the little girls, the little boys, EINSTEIN and HAYLEY in various
; lessons.
@label=CLIST18
b53820 DEFW 25815    ; Go to a random location
 53822 DEFW 31969    ; Walk up and down...
 53824 DEFB 0,10     ; ...10 times
 53826 DEFW 61624    ; Restart the command list

; Unused
s53828 DEFS 5

; Graphic data for animatory states #b80-#b127 (UDG mask byte 6/8)
;
; Used by the routine at #R24576.
b53833 DEFB 215,235,153,254,255,95,250,255,126,232,255,254,233,21,251,251
@bfix=DEFB 250,239,151,95,223,190,161,67,120,221,253,143,230,94,75,244
 53849 DEFB 250,239,151,95,159,190,161,67,120,221,253,143,230,94,75,244
 53865 DEFB 247,253,254,56,142,213,148,255,111,239,119,233,75,255,254,152
@bfix=DEFB 221,175,245,112,247,47,55,191,139,238,253,254,255,71,110,228
 53881 DEFB 221,175,245,112,247,47,55,191,139,238,253,254,255,71,110,238
 53897 DEFB 189,127,215,247,223,244,214,238,222,119,173,79,250,127,191,221
 53913 DEFB 251,231,127,255,233,164,215,47,139,168,68,174,223,191,75,23
 53929 DEFB 95,250,244,250,253,147,68,225,212,127,191,187,175,239,125,239
@bfix=DEFB 246,255,164,174,159,211,159,11,254,254,208,165,127,191,87,146
 53945 DEFB 246,255,164,172,159,211,159,11,254,254,208,165,127,191,87,146
@bfix=DEFB 251,223,253,234,247,223,5,89,255,189,47,191,95,223,253,246
 53961 DEFB 251,223,253,234,247,223,5,89,255,189,47,191,79,223,253,246
 53977 DEFB 228,133,175,175,215,239,11,208,79,119,247,111,189,210,95,253
 53993 DEFB 247,250,6,251,125,169,223,47,127,237,207,255,89,207,183,128
 54009 DEFB 253,230,126,224,223,2,123

@defs=54016:32
; Character buffer for the bike (#b211)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used.
@label=BIKECBUF
b54016 DEFS 32
 54048 DEFB 24       ; Initial animatory state: #AS24 (see #R62910)
 54049 DEFB 224,17   ; Initial location (see #R62910)
 54051 DEFB 64       ; Initial flags for byte #b29 (see #R62910)

; Random locations
;
; Used by the routine at #R25815. Each location's visitors are indicated in
; brackets. The next set of random locations is at #R54084.
@label=RANDLOCS1
b54052 DEFB 129,17   ; Just left of the skool gate (little girls 1-3, HAYLEY)
 54054 DEFB 189,17   ; Kitchen in the girls' skool (little girls 4-7, MISS
                     ; TAKE)
 54056 DEFB 38,3     ; Revision Library (little boys 1-3)
 54058 DEFB 38,3     ; Revision Library (little boys 4-8)
 54060 DEFB 112,17   ; Middle of the boys' playground (little boys 9 and 10,
                     ; ALBERT, EINSTEIN)
 54062 DEFB 189,10   ; Near the window on the middle floor in the girls' skool
                     ; (BOY WANDER, ANGELFACE)
 54064 DEFB 157,17   ; Just outside the entrance to the girls' skool (MR
                     ; WACKER, MR WITHIT)

; x-coordinates of the left ends of the classrooms
;
; Used by the routine at #R26068. The x-coordinates of the right ends of the
; classrooms can be found at #R54322.
@label=TFRMSMINX
b54066 DEFB 0        ; x-coordinate of the left end of the Blue Room
 54067 DEFB 40       ; x-coordinate of the left end of the Yellow Room
 54068 DEFB 159      ; x-coordinate of the left end of the top-floor room in
                     ; the girls' skool
@label=MFRMSMINX
 54069 DEFB 30       ; x-coordinate of the left end of the Science Lab
 54070 DEFB 159      ; x-coordinate of the left end of the middle-floor room in
                     ; the girls' skool

; x-coordinates of the left edges of the blackboards
;
; Used by the routine at #R26453. The blackboard identifiers can be found at
; #R54327, and the y-coordinates of the top rows of the blackboards can be
; found at #R54583.
@label=BBSLEFTXT
b54071 DEFB 3        ; x-coordinate of the left edge of the blackboard in the
                     ; Blue Room
 54072 DEFB 41       ; x-coordinate of the left edge of the blackboard in the
                     ; Yellow Room
 54073 DEFB 161      ; x-coordinate of the left edge of the blackboard in the
                     ; top-floor room in the girls' skool
@label=BBSLEFTXM
 54074 DEFB 32       ; x-coordinate of the left edge of the blackboard in the
                     ; Science Lab
 54075 DEFB 161      ; x-coordinate of the left edge of the blackboard in the
                     ; middle-floor room in the girls' skool

; LSBs of addresses of ERIC-handling routines
;
; Used by the routine at #R63405. The corresponding MSBs can be found at
; #R54332.
@label=EHRLSBS1
@ssub=DEFB 62094%256
b54076 DEFB 142      ; LSB of #R62094 (used when bit 7 is set at #R32763)
 54077 DEFB 0        ; Unused (when bit 6 is set at #R32763, ERIC is
                     ; incapacitated)
@ssub=DEFB 24237%256
 54078 DEFB 173      ; LSB of #R24237 (used when bit 5 is set at #R32763)
@ssub=DEFB 24175%256
 54079 DEFB 111      ; LSB of #R24175 (used when bit 4 is set at #R32763)
@ssub=DEFB 57669%256
 54080 DEFB 69       ; LSB of #R57669 (used when bit 3 is set at #R32763)
@ssub=DEFB 62178%256
 54081 DEFB 226      ; LSB of #R62178 (used when bit 2 is set at #R32763)
 54082 DEFB 0        ; Unused (when bit 1 is set at #R32763, ERIC's secondary
                     ; status flags at #R32749 are checked)
@ssub=DEFB 23907%256
 54083 DEFB 99       ; LSB of #R23907 (used when bit 0 is set at #R32763)

; Random location
;
; This random location is used by MR ROCKITT and MR CREAK (see #R25815). The
; next set of random locations is at #R54308.
@label=RANDLOCS2
b54084 DEFB 38,3     ; Revision Library

; Unused
s54086 DEFS 3

; Graphic data for animatory states #b80-#b127 (UDG byte 7/8)
;
; Used by the routine at #R24576.
b54089 DEFB 16,8,96,0,0,32,1,0,255,7,0,254,249,132,1,3
 54105 DEFB 2,224,144,64,31,63,40,53,124,29,1,240,230,94,120,3
 54121 DEFB 7,1,1,95,206,213,244,0,96,224,224,31,112,0,0,156
 54137 DEFB 29,16,0,112,8,142,255,64,200,233,1,0,0,111,6,228
 54153 DEFB 127,0,208,240,192,6,22,14,62,240,205,79,3,0,128,63
 54169 DEFB 7,198,0,0,4,68,14,112,200,33,76,54,53,0,104,16
 54185 DEFB 192,2,4,3,1,16,198,193,117,0,0,110,224,25,1,96
@bfix=DEFB 2,0,44,54,100,15,96,72,0,0,30,165,63,66,80,146
 54201 DEFB 2,0,44,46,100,15,96,72,0,0,30,165,63,66,80,146
 54217 DEFB 224,32,1,10,3,48,229,89,254,130,32,0,192,36,2,20
 54233 DEFB 2,5,63,80,15,112,72,12,79,55,11,64,190,220,192,0
 54249 DEFB 6,7,196,251,125,143,224,192,0,27,63,0,252,79,55,88
 54265 DEFB 251,251,126,160,64,3,152

@defs=54272:32
; Character buffer for the frog or mouse (#b212)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used.
@label=ANIMALCBUF
b54272 DEFS 32
 54304 DEFB 47       ; Initial animatory state: #AS47 (see #R62910)
 54305 DEFB 17,3     ; Initial location (see #R62910)
 54307 DEFB 64       ; Initial flags for byte #b29 (see #R62910)

; Random locations
;
; Used by the routine at #R25815. Each location's visitors are indicated in
; brackets. The next set of random locations is at #R54340.
@label=RANDLOCS3
b54308 DEFB 144,17   ; Middle of the girls' playground (little girls 1-3,
                     ; HAYLEY)
 54310 DEFB 189,10   ; Near the window on the middle floor in the girls' skool
                     ; (little girls 4-7, MISS TAKE)
 54312 DEFB 10,10    ; Wash basins (little boys 1-3)
 54314 DEFB 10,17    ; Cloak room at far left of boys' skool (little boys 4-8)
 54316 DEFB 145,17   ; Middle of the girls' playground (little boys 9 and 10,
                     ; ALBERT, EINSTEIN)
 54318 DEFB 183,17   ; Kitchen in the girls' skool (BOY WANDER, ANGELFACE)
 54320 DEFB 38,3     ; Revision Library (MR WACKER, MR WITHIT)

; x-coordinates of the right ends of the classrooms
;
; Used by the routine at #R26068. The x-coordinates of the left ends of the
; classrooms can be found at #R54066.
@label=TFRMSMAXX
b54322 DEFB 23       ; x-coordinate of the right end of the Blue Room
 54323 DEFB 63       ; x-coordinate of the right end of the Yellow Room
 54324 DEFB 180      ; x-coordinate of the right end of the top-floor room in
                     ; the girls' skool
@label=MFRMSMAXX
 54325 DEFB 54       ; x-coordinate of the right end of the Science Lab
 54326 DEFB 179      ; x-coordinate of the right end of the middle-floor room
                     ; in the girls' skool

; Blackboard identifiers
;
; Used by the routine at #R26453. Each identifier is the LSB of the
; corresponding blackboard buffer. The x-coordinates of the left edges of the
; blackboards can be found at #R54071, and the y-coordinates of the top rows of
; the blackboards can be found at #R54583.
@label=BOARDIDS
b54327 DEFB 84       ; ID of the blackboard in the Blue Room (LSB of #R32596)
 54328 DEFB 90       ; ID of the blackboard in the Yellow Room (LSB of #R32602)
 54329 DEFB 96       ; ID of the blackboard in the top-floor room in the girls'
                     ; skool (LSB of #R32608)
 54330 DEFB 102      ; ID of the blackboard in the Science Lab (LSB of #R32614)
 54331 DEFB 108      ; ID of the blackboard in the middle-floor room in the
                     ; girls' skool (LSB of #R32620)

; MSBs of addresses of ERIC-handling routines
;
; Used by the routine at #R63405. The corresponding LSBs can be found at
; #R54076.
@label=EHRMSBS1
@ssub=DEFB 62094/256
b54332 DEFB 242      ; MSB of #R62094 (used when bit 7 is set at #R32763)
 54333 DEFB 0        ; Unused (when bit 6 is set at #R32763, ERIC is
                     ; incapacitated)
@ssub=DEFB 24237/256
 54334 DEFB 94       ; MSB of #R24237 (used when bit 5 is set at #R32763)
@ssub=DEFB 24175/256
 54335 DEFB 94       ; MSB of #R24175 (used when bit 4 is set at #R32763)
@ssub=DEFB 57669/256
 54336 DEFB 225      ; MSB of #R57669 (used when bit 3 is set at #R32763)
@ssub=DEFB 62178/256
 54337 DEFB 242      ; MSB of #R62178 (used when bit 2 is set at #R32763)
 54338 DEFB 0        ; Unused (when bit 1 is set at #R32763, ERIC's secondary
                     ; status flags at #R32749 are checked)
@ssub=DEFB 23907/256
 54339 DEFB 93       ; MSB of #R23907 (used when bit 0 is set at #R32763)

; Random location
;
; This random location is used by MR ROCKITT and MR CREAK (see #R25815). The
; next set of random locations is at #R54564.
@label=RANDLOCS4
b54340 DEFB 90,3     ; Near the top-floor window in the boys' skool

; Unused
s54342 DEFS 3

; Graphic data for animatory states #b80-#b127 (UDG mask byte 7/8)
;
; Used by the routine at #R24576.
b54345 DEFB 215,235,103,255,255,175,253,255,255,247,255,254,249,133,253,251
 54361 DEFB 250,239,151,95,223,191,168,181,124,221,253,247,230,94,123,251
 54377 DEFB 247,253,253,95,206,213,244,127,111,239,239,223,119,253,254,156
 54393 DEFB 221,215,250,112,232,142,255,95,203,233,253,254,255,111,6,228
 54409 DEFB 127,127,215,247,223,246,214,238,190,247,205,79,251,127,191,191
 54425 DEFB 247,198,255,247,244,68,238,119,203,161,76,182,181,127,107,23
 54441 DEFB 223,250,244,251,253,23,198,193,117,127,127,110,239,217,125,111
@bfix=DEFB 250,255,44,182,100,239,111,75,254,255,222,165,191,66,87,146
 54457 DEFB 250,255,44,174,100,239,111,75,254,255,222,165,191,66,87,146
@bfix=DEFB 231,47,253,234,251,176,229,89,254,186,47,127,223,164,250,20
 54473 DEFB 231,47,253,234,251,176,229,89,254,186,47,127,207,164,226,20
 54489 DEFB 250,5,191,80,239,119,75,236,79,183,235,95,190,221,223,254
 54505 DEFB 246,247,197,251,125,175,239,223,127,219,191,254,253,79,183,88
 54521 DEFB 251,251,126,160,95,3,155

@defs=54528:32
; Character buffer for the stinkbomb cloud or BOY WANDER's pellet (#b213)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used.
@label=CBUF213
b54528 DEFS 32
 54560 DEFB 0        ; Initial animatory state: #AS0 (see #R62910)
 54561 DEFB 224,17   ; Initial location (see #R62910)
 54563 DEFB 64       ; Initial flags for byte #b29 (see #R62910)

; Random locations
;
; Used by the routine at #R25815. Each location's visitors are indicated in
; brackets. The next set of random locations is at #R54596.
@label=RANDLOCS5
b54564 DEFB 136,17   ; Just to the right of the skool gate (little girls 1-3,
                     ; HAYLEY)
 54566 DEFB 170,17   ; Dinner hall in the girls' skool (little girls 4-7, MISS
                     ; TAKE)
 54568 DEFB 10,17    ; Cloak room at the far left of the boys' skool (little
                     ; boys 1-3)
 54570 DEFB 109,17   ; Just to the right of the tree (little boys 4-8)
 54572 DEFB 158,17   ; Just outside the entrance to the girls' skool (little
                     ; boys 9 and 10, ALBERT, EINSTEIN)
 54574 DEFB 137,17   ; Just to the right of the skool gate (BOY WANDER,
                     ; ANGELFACE)
 54576 DEFB 10,17    ; Cloak room at the far left of the boys' skool (MR
                     ; WACKER, MR WITHIT)

; x-coordinates of the leftmost seats in the classrooms
;
; Used by the routine at #R26068. The x-coordinates of the rightmost seats in
; the classrooms can be found at #R54834.
@label=SEATSMINX
b54578 DEFB 11       ; x-coordinate of the leftmost seat in the Blue Room
 54579 DEFB 50       ; x-coordinate of the leftmost seat in the Yellow Room
 54580 DEFB 168      ; x-coordinate of the leftmost seat in the top-floor room
                     ; in the girls' skool
 54581 DEFB 40       ; x-coordinate of the leftmost seat in the Science Lab
 54582 DEFB 167      ; x-coordinate of the leftmost seat in the middle-floor
                     ; room in the girls' skool

; y-coordinates of the top rows of the blackboards
;
; Used by the routine at #R26453. The x-coordinates of the left edges of the
; blackboards can be found at #R54071, and the blackboard identifiers can be
; found at #R54327.
@label=BBSY
b54583 DEFB 3        ; y-coordinate of the top row of the blackboard in the
                     ; Blue Room
 54584 DEFB 3        ; y-coordinate of the top row of the blackboard in the
                     ; Yellow Room
 54585 DEFB 3        ; y-coordinate of the top row of the blackboard in the
                     ; top-floor room in the girls' skool
 54586 DEFB 9        ; y-coordinate of the top row of the blackboard in the
                     ; Science Lab
 54587 DEFB 9        ; y-coordinate of the top row of the blackboard in the
                     ; middle-floor room in the girls' skool

; LSBs of addresses of ERIC-handling routines
;
; Used by the routine at #R63405. The corresponding MSBs can be found at
; #R54844.
@label=EHRLSBS2
@ssub=DEFB 29462%256
b54588 DEFB 22       ; LSB of #R29462 (used when bit 7 is set at #R32749)
@ssub=DEFB 23843%256
 54589 DEFB 35       ; LSB of #R23843 (used when bit 6 is set at #R32749)
@ssub=DEFB 23859%256
 54590 DEFB 51       ; LSB of #R23859 (used when bit 5 is set at #R32749)
@ssub=DEFB 64460%256
 54591 DEFB 204      ; LSB of #R64460 (used when bit 4 is set at #R32749)
@ssub=DEFB 64416%256
 54592 DEFB 160      ; LSB of #R64416 (used when bit 3 is set at #R32749)
@ssub=DEFB 64259%256
 54593 DEFB 3        ; LSB of #R64259 (used when bit 2 is set at #R32749)
@ssub=DEFB 64316%256
 54594 DEFB 60       ; LSB of #R64316 (used when bit 1 is set at #R32749)
@ssub=DEFB 29278%256
 54595 DEFB 94       ; LSB of #R29278 (used when bit 0 is set at #R32749)

; Random location
;
; This random location is used by MR ROCKITT and MR CREAK (see #R25815). The
; next set of random locations is at #R54820.
@label=RANDLOCS6
b54596 DEFB 10,17    ; Cloak room at the far left of the boys' skool

; Unused
s54598 DEFS 3

; Graphic data for animatory states #b80-#b127 (UDG byte 8/8)
;
; Used by the routine at #R24576.
b54601 DEFB 16,16,128,0,0,16,1,0,127,0,0,252,241,8,1,7
 54617 DEFB 1,192,16,128,31,127,16,33,92,29,3,248,230,94,120,2
 54633 DEFB 5,1,3,31,206,213,245,128,96,224,192,63,112,2,0,92
 54649 DEFB 29,8,0,127,16,126,255,224,232,222,1,0,0,126,232,228
 54665 DEFB 255,0,240,240,192,7,30,14,126,224,239,79,7,0,128,127
 54681 DEFB 7,204,0,8,4,78,14,240,232,61,101,53,72,128,72,224
 54697 DEFB 64,3,6,3,2,216,84,94,30,0,0,68,32,17,2,32
@bfix=DEFB 2,0,37,53,69,15,112,200,0,0,8,163,63,127,32,122
 54713 DEFB 2,0,37,54,69,15,112,200,0,0,8,163,63,127,32,122
 54729 DEFB 224,224,0,10,3,15,130,55,254,135,160,0,128,127,7,247
 54745 DEFB 1,35,63,90,15,240,104,8,111,55,23,64,190,220,192,0
 54761 DEFB 6,15,132,251,125,158,224,192,0,55,61,1,248,111,55,175
 54777 DEFB 31,241,127,175,192,254,240

@defs=54784:32
; Character buffer for water/sherry, plant, conker, desk lid or ERIC's pellet
; (#b214)
;
; See the #LINK:CharacterBuffers(character buffer documentation) for details of
; how bytes #b0-#b31 of the buffer are used.
@label=CBUF214
b54784 DEFS 32
 54816 DEFB 0        ; Initial animatory state: #AS0 (see #R62910)
 54817 DEFB 224,17   ; Initial location (see #R62910)
 54819 DEFB 64       ; Initial flags for byte #b29 (see #R62910)

; Random locations
;
; Used by the routine at #R25815. Each location's visitors are indicated in
; brackets. The next set of random locations is at #R54852.
@label=RANDLOCS7
b54820 DEFB 189,17   ; Kitchen in the girls' skool (little girls 1-3, HAYLEY)
 54822 DEFB 182,3    ; Just outside MISS TAKE's study (little girls 4-7, MISS
                     ; TAKE)
 54824 DEFB 66,17    ; Left end of the assembly hall (little boys 1-3)
 54826 DEFB 75,17    ; Right end of the assembly hall (little boys 4-8)
 54828 DEFB 37,3     ; Revision Library (little boys 9 and 10, ALBERT,
                     ; EINSTEIN)
 54830 DEFB 72,17    ; Middle of the assembly hall (BOY WANDER, ANGELFACE)
 54832 DEFB 92,17    ; Just to the left of the boys' skool door (MR WACKER, MR
                     ; WITHIT)

; x-coordinates of the rightmost seats in the classrooms
;
; Used by the routine at #R26068. The x-coordinates of the leftmost seats in
; the classrooms can be found at #R54578.
@label=SEATSMAXX
b54834 DEFB 22       ; x-coordinate of the rightmost seat in the Blue Room
 54835 DEFB 61       ; x-coordinate of the rightmost seat in the Yellow Room
 54836 DEFB 179      ; x-coordinate of the rightmost seat in the top-floor room
                     ; in the girls' skool
 54837 DEFB 53       ; x-coordinate of the rightmost seat in the Science Lab
 54838 DEFB 178      ; x-coordinate of the rightmost seat in the middle-floor
                     ; room in the girls' skool

; Unused
s54839 DEFS 5

; MSBs of addresses of ERIC-handling routines
;
; Used by the routine at #R63405. The corresponding LSBs can be found at
; #R54588.
@label=EHRMSBS2
@ssub=DEFB 29462/256
b54844 DEFB 115      ; MSB of #R29462 (used when bit 7 is set at #R32749)
@ssub=DEFB 23843/256
 54845 DEFB 93       ; MSB of #R23843 (used when bit 6 is set at #R32749)
@ssub=DEFB 23859/256
 54846 DEFB 93       ; MSB of #R23859 (used when bit 5 is set at #R32749)
@ssub=DEFB 64460/256
 54847 DEFB 251      ; MSB of #R64460 (used when bit 4 is set at #R32749)
@ssub=DEFB 64416/256
 54848 DEFB 251      ; MSB of #R64416 (used when bit 3 is set at #R32749)
@ssub=DEFB 64259/256
 54849 DEFB 251      ; MSB of #R64259 (used when bit 2 is set at #R32749)
@ssub=DEFB 64316/256
 54850 DEFB 251      ; MSB of #R64316 (used when bit 1 is set at #R32749)
@ssub=DEFB 29278/256
 54851 DEFB 114      ; MSB of #R29278 (used when bit 0 is set at #R32749)

; Random location
;
; This random location is used by MR ROCKITT and MR CREAK (see #R25815).
@label=RANDLOCS8
b54852 DEFB 90,17    ; Just to the left of the boys' skool door

; Unused
s54854 DEFS 3

; Graphic data for animatory states #b80-#b127 (UDG mask byte 8/8)
;
; Used by the routine at #R24576.
@bfix=DEFB 215,215,159,255,255,215,253,255,127,248,255,253,241,11,253,247
b54857 DEFB 215,215,159,255,255,215,253,255,255,248,255,253,241,11,253,247
@bfix=DEFB 253,223,23,191,223,127,208,161,92,221,251,251,230,94,123,250
 54873 DEFB 253,223,23,159,223,127,208,161,92,221,251,251,230,94,123,250
 54889 DEFB 245,253,251,31,206,213,245,191,111,239,223,191,119,242,255,92
 54905 DEFB 221,232,255,127,208,126,255,239,235,222,253,254,254,126,232,228
 54921 DEFB 255,63,247,247,223,247,222,238,126,227,239,79,247,127,191,127
 54937 DEFB 247,205,255,203,244,78,238,247,235,189,101,181,72,191,75,239
 54953 DEFB 95,251,246,251,250,219,84,94,30,255,255,68,47,209,122,47
@bfix=DEFB 250,255,37,181,69,239,119,203,254,255,200,163,191,127,35,122
 54969 DEFB 250,255,37,182,69,239,119,203,254,255,200,163,191,127,35,122
 54985 DEFB 239,239,252,234,251,143,130,55,254,183,175,255,191,127,247,247
 55001 DEFB 253,35,191,90,239,247,107,232,111,183,215,95,190,221,223,254
 55017 DEFB 246,239,132,251,125,158,239,223,255,183,189,253,251,111,183,175
 55033 DEFB 31,241,127,175,223,254,247

; UDG reference table for the top-floor window when shut
;
; Used by the routine at #R27672. The UDG reference table for the top-floor
; window when open is at #R55296.
; .
; #UDGTABLE
; { #CALL:mutable(55040) }
; TABLE#
@label=URTTFWSHUT
b55040 DEFB 2,93,48,132
 55044 DEFB 3,92,33,132,3,93,49,132,3,94,62,132
 55056 DEFB 4,92,34,132,4,93,50,132,4,94,63,132
 55068 DEFB 255                                 ; End marker

; Unused
s55069 DEFS 3

; Font character bitmap widths for CHR$(32-127)
;
; Used by the routine at #R27110.
@label=FCBWIDTHS
b55072 DEFB 3,1,3,5,5,3,5,2,2,2,5,5,2,4,2,3
 55088 DEFB 4,3,4,4,4,4,4,4,4,4,2,2,4,4,4,4
 55104 DEFB 5,4,4,4,4,4,4,4,4,3,4,4,4,5,4,4
 55120 DEFB 4,5,4,4,5,4,5,5,5,5,5,2,3,2,5,5
 55136 DEFB 4,4,4,4,4,4,4,4,4,1,3,4,1,5,4,4
 55152 DEFB 4,4,4,4,3,4,3,5,5,4,4,3,1,3,4,5

; UDG references for animatory states #b0-#b127 at row 0, column 0
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w55253 }
; { #AS93    | #w55261 }
; { #AS100   | #w55268 }
; { #AS101   | #w55269 }
; { #AS109   | #w55277 }
; { #AS117   | #w55285 }
; { #AS125   | #w55293 }
; TABLE#
b55168 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 55184 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 55200 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 55216 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 55232 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 55248 DEFB 0,142,0,142,0,0,0,156,0,203,0,203,76,0,0,0
 55264 DEFB 0,170,0,170,75,0,0,0,0,104,0,104,0,0,0,118
 55280 DEFB 0,232,0,232,0,0,0,0,0,89,0,89,0,0,0,0

; UDG reference table for the top-floor window when open
;
; Used by the routine at #R27672. The UDG reference table for the top-floor
; window when shut is at #R55040.
; .
; #UDGTABLE
; { #CALL:mutable(55296) }
; TABLE#
@label=URTTFWOPEN
b55296 DEFB 2,93,48,132
 55300 DEFB 3,92,202,196,3,93,203,196,3,94,204,196
 55312 DEFB 4,92,205,196,4,93,206,196,4,94,207,196
 55324 DEFB 255                                    ; End marker

; Unused
s55325 DEFS 3

; Font graphic data for CHR$(32-127) (pixel column 1)
;
; Used by the routine at #R27110.
b55328 DEFB 0,250,192,40,18,78,108,64,124,130,16,8,1,8,3,3
 55344 DEFB 124,66,70,130,56,242,124,128,108,98,54,49,8,20,34,64
 55360 DEFB 76,126,254,124,254,254,254,126,254,130,4,254,254,254,254,124
 55376 DEFB 254,124,254,98,128,252,224,252,198,192,134,255,192,129,32,1
 55392 DEFB 2,28,254,28,28,28,16,24,254,94,1,254,254,62,62,28
 55408 DEFB 63,24,62,18,16,60,56,56,34,56,38,24,255,129,8,124

; UDG references for animatory states #b0-#b127 at row 1, column 0
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w55509 }
; { #AS93    | #w55517 }
; { #AS100   | #w55524 }
; { #AS101   | #w55525 }
; { #AS109   | #w55533 }
; { #AS117   | #w55541 }
; { #AS125   | #w55549 }
; TABLE#
b55424 DEFB 96,103,96,103,96,0,0,140,96,136,96,125,240,240,224,225
 55440 DEFB 96,159,96,159,96,0,0,140,0,0,96,125,0,0,91,0
 55456 DEFB 96,152,96,152,96,0,0,0,96,136,0,0,0,0,0,0
 55472 DEFB 0,145,0,145,0,0,0,0,0,214,0,214,0,0,0,221
 55488 DEFB 0,169,0,169,0,0,0,82,0,192,0,192,201,0,0,0
 55504 DEFB 131,143,131,143,77,0,0,157,193,204,193,204,0,0,0,217
 55520 DEFB 0,171,0,171,0,0,0,185,0,105,0,105,74,0,122,119
 55536 DEFB 0,171,0,171,0,0,0,217,0,88,0,88,0,0,243,82

; UDG reference table for the middle-floor window when shut
;
; Used by the routine at #R27672. The UDG reference table for the middle-floor
; window when open is at #R55808.
; .
; #UDGTABLE
; { #CALL:mutable(55552) }
; TABLE#
@label=URTMFWSHUT
b55552 DEFB 8,95,80,142
 55556 DEFB 9,94,68,132,9,95,81,133
 55564 DEFB 10,94,69,133,10,95,82,133
 55572 DEFB 11,94,70,133,11,95,83,133
 55580 DEFB 255                       ; End marker

; Unused
s55581 DEFS 3

; Font graphic data for CHR$(32-127) (pixel column 2)
;
@ignoreua
; Used by the routine at #R27110. The following addresses are unused, because
; the corresponding font character bitmaps are less than 2 pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code | =h Address }
; { #b33 [!]      | #w55585 }
; { #b105 [i]     | #w55657 }
; { #b108 [l]     | #w55660 }
; { #b124 [|]     | #w55676 }
; TABLE#
b55584 DEFB 0,0,0,254,42,16,146,128,130,124,124,8,2,8,3,56
 55600 DEFB 138,254,138,146,72,146,146,134,146,146,54,50,20,20,20,138
 55616 DEFB 82,144,146,130,130,146,144,130,16,254,2,16,2,64,96,130
 55632 DEFB 144,130,144,146,128,2,28,2,40,32,138,129,56,255,64,1
 55648 DEFB 126,34,34,34,34,42,126,37,32,0,1,16,0,32,16,34
 55664 DEFB 36,36,16,42,126,2,6,6,20,5,42,102,0,102,16,146

; UDG references for animatory states #b0-#b127 at row 2, column 0
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w55765 }
; { #AS93    | #w55773 }
; { #AS100   | #w55780 }
; { #AS101   | #w55781 }
; { #AS109   | #w55789 }
; { #AS117   | #w55797 }
; { #AS125   | #w55805 }
; TABLE#
b55680 DEFB 97,104,97,104,112,0,0,141,132,137,130,126,241,241,141,226
 55696 DEFB 97,104,97,104,112,0,0,141,0,234,130,126,0,0,0,0
 55712 DEFB 97,104,97,104,112,0,0,252,132,137,0,0,87,87,87,0
 55728 DEFB 97,104,97,104,112,0,0,0,0,215,0,215,202,0,0,222
 55744 DEFB 165,170,165,170,173,178,0,81,186,193,186,193,202,0,0,0
 55760 DEFB 132,144,132,144,0,0,0,132,194,205,194,205,0,0,0,0
 55776 DEFB 0,172,0,172,0,0,0,186,0,106,0,106,0,0,123,0
 55792 DEFB 194,233,194,233,0,0,0,0,0,87,0,87,0,0,251,0

; UDG reference table for the middle-floor window when open
;
; Used by the routine at #R27672. The UDG reference table for the middle-floor
; window when shut is at #R55552.
; .
; #UDGTABLE
; { #CALL:mutable(55808) }
; TABLE#
@label=URTMFWOPEN
b55808 DEFB 8,95,80,142
 55812 DEFB 9,94,208,196,9,95,209,197
 55820 DEFB 10,94,210,197,10,95,211,197
 55828 DEFB 11,94,212,197,11,95,213,197
 55836 DEFB 255                         ; End marker

; Unused
s55837 DEFS 3

; Font graphic data for CHR$(32-127) (pixel column 3)
;
@ignoreua
; Used by the routine at #R27110. The following addresses are unused, because
; the corresponding font character bitmaps are less than 3 pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s) | =h Address(es) }
; { #b33 [!]         | #w55841 }
; { #b39-#b41 ['()]  | #w55847-#w55849 }
; { #b44 [,]         | #w55852 }
; { #b46 [.]         | #w55854 }
; { #b58-#b59 [:;]   | #w55866-#w55867 }
; { #b91 [[]         | #w55899 }
; { #b93 []]         | #w55901 }
; { #b105 [i]        | #w55913 }
; { #b108 [l]        | #w55916 }
; { #b124 [|]        | #w55932 }
; TABLE#
b55840 DEFB 0,0,192,40,127,228,146,0,0,0,56,62,0,8,0,192
 55856 DEFB 146,2,146,178,254,146,146,152,146,146,0,0,20,20,20,144
 55872 DEFB 94,144,146,130,130,146,144,138,16,130,2,40,2,48,24,130
 55888 DEFB 144,134,152,146,254,2,2,28,16,30,146,0,3,0,191,1
 55904 DEFB 146,34,34,34,34,42,144,37,32,0,94,40,0,30,32,34
 55920 DEFB 36,36,32,42,16,2,56,56,8,5,50,129,0,24,8,170

; UDG references for animatory states #b0-#b127 at row 3, column 0
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w56021 }
; { #AS93    | #w56029 }
; { #AS100   | #w56036 }
; { #AS101   | #w56037 }
; { #AS109   | #w56045 }
; { #AS117   | #w56053 }
; { #AS125   | #w56061 }
; TABLE#
b55936 DEFB 0,105,0,110,113,117,122,0,133,133,0,0,235,235,0,227
 55952 DEFB 0,105,0,110,113,117,122,0,231,235,0,0,0,0,0,0
 55968 DEFB 0,105,0,110,113,117,122,253,133,133,0,0,0,0,0,0
 55984 DEFB 0,105,0,110,113,117,122,0,0,194,0,199,203,206,208,0
 56000 DEFB 0,105,0,110,174,179,182,0,0,194,0,199,203,206,208,0
 56016 DEFB 133,145,133,153,0,0,124,133,0,206,0,215,0,0,124,0
 56032 DEFB 0,173,0,182,0,0,124,0,0,107,0,107,0,0,124,0
 56048 DEFB 0,234,0,244,0,0,248,0,0,206,0,215,0,0,252,0

; UDG reference table for the drinks cabinet door when shut
;
; Used by the routine at #R27672. The UDG reference table for the drinks
; cabinet door when open is at #R56320.
; .
; #UDGTABLE
; { #CALL:mutable(56064) }
; TABLE#
@label=URTDCDSHUT
b56064 DEFB 2,190,136,198,2,191,150,204
 56072 DEFB 3,190,137,206,3,191,151,204
 56080 DEFB 255                         ; End marker

; UDG reference table for the three cups (empty) on the shelf in the boys'
; skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(56081) }
; TABLE#
@label=URTBSCUPSE
b56081 DEFB 14,25,186,7 ; Leftmost cup
 56085 DEFB 14,27,191,7 ; Middle cup
 56089 DEFB 14,30,186,7 ; Rightmost cup
 56093 DEFB 255         ; End marker

; Unused
s56094 DEFS 2

; Font graphic data for CHR$(32-127) (pixel column 4)
;
@ignoreua
; Used by the routine at #R27110. The following addresses are unused, because
; the corresponding font character bitmaps are less than 4 pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s)  | =h Address(es) }
; { #b32-#b34 [ !"]   | #w56096-#w56098 }
; { #b37 [%]          | #w56101 }
; { #b39-#b41 ['()]   | #w56103-#w56105 }
; { #b44 [,]          | #w56108 }
; { #b46-#b47 [./]    | #w56110-#w56111 }
; { #b49 [1]          | #w56113 }
; { #b58-#b59 [:;]    | #w56122-#w56123 }
; { #b73 [I]          | #w56137 }
; { #b91-#b93 [[\]]   | #w56155-#w56157 }
; { #b105-#b106 [ij]  | #w56169-#w56170 }
; { #b108 [l]         | #w56172 }
; { #b116 [t]         | #w56180 }
; { #b118 [v]         | #w56182 }
; { #b123-#b125 [{|}] | #w56187-#w56189 }
; TABLE#
b56096 DEFB 0,0,0,254,42,0,109,0,0,0,124,8,0,8,0,0
 56112 DEFB 124,0,98,204,8,140,140,224,108,124,0,0,34,20,8,96
 56128 DEFB 66,126,108,130,124,130,128,78,254,0,252,198,2,64,254,124
 56144 DEFB 96,124,102,140,128,252,28,2,40,32,162,0,0,0,64,1
 56160 DEFB 130,62,28,34,254,24,64,62,30,0,0,6,0,32,30,28
 56176 DEFB 24,63,16,36,0,62,0,6,20,62,34,0,0,0,16,130

; UDG references for animatory states #b0-#b127 at row 0, column 1
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w56277 }
; { #AS93    | #w56285 }
; { #AS100   | #w56292 }
; { #AS101   | #w56293 }
; { #AS109   | #w56301 }
; { #AS117   | #w56309 }
; { #AS125   | #w56317 }
; TABLE#
b56192 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 56208 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 56224 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 56240 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 56256 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 56272 DEFB 134,146,134,146,0,0,0,134,195,207,195,207,78,0,0,195
 56288 DEFB 162,174,162,174,76,0,0,162,96,108,96,108,75,0,0,96
 56304 DEFB 224,235,224,235,0,0,0,224,95,86,95,86,0,0,0,95

; UDG reference table for the drinks cabinet door when open
;
; Used by the routine at #R27672. The UDG reference table for the drinks
; cabinet door when shut is at #R56064.
; .
; #UDGTABLE
; { #CALL:mutable(56320) }
; TABLE#
@label=URTDCDOPEN
b56320 DEFB 2,190,162,198,2,191,163,198
 56328 DEFB 3,190,164,206,3,191,165,198
 56336 DEFB 255                         ; End marker

; UDG reference table for the cup (empty) on the shelf in the girls' kitchen
;
; Used by the routine at #R27860.
; .
; #UDGTABLE
; { #CALL:mutable(56337) }
; TABLE#
@label=URTCUP4E
b56337 DEFB 14,186,102,199
 56341 DEFB 255            ; End marker

; Unused
s56342 DEFS 10

; Font graphic data for CHR$(32-43) (pixel column 5)
;
@ignoreua
; Used by the routine at #R27110. The following addresses are unused, because
; the corresponding font character bitmaps are less than 5 pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s) | =h Address(es) }
; { #b32-#b34 [ !"]  | #w56352-#w56354 }
; { #b37 [%]         | #w56357 }
; { #b39-#b41 ['()]  | #w56359-#w56361 }
; TABLE#
b56352 DEFB 0,0,0,40,36,0,2,0,0,0,16,8

; Up-a-year tune data (segment 1/3)
;
; Used by the routine at #R24477.
@label=UAYTUNE1
b56364 DEFB 55,55,55,119,59,127,59,119
 56372 DEFB 55,121,57,121,55,117,51,177
 56380 DEFB 55
 56381 DEFB 255                         ; Segment end marker
 56382 DEFW 56416                       ; Pointer to the next segment

; Font graphic data for CHR$(64) (pixel column 5)
;
; Used by the routine at #R27110.
b56384 DEFB 60

; Theme tune data (segment 1/6)
;
; Used by the routine at #R24477.
@label=OTSEG1
b56385 DEFB 59,113,51,183,57,27,91,123,251
 56394 DEFB 255                            ; Segment end marker
 56395 DEFW 56430                          ; Pointer to the next segment

; Font graphic data for CHR$(77-95) (pixel column 5)
;
@ignoreua
; Used by the routine at #R27110. The following addresses are unused, because
; the corresponding font character bitmaps are less than 5 pixels wide:
; .
; #TABLE(default,centre,centre)
; { =h ASCII code(s) | =h Address(es) }
; { #b78-#b80 [NOP]  | #w56398-#w56400 }
; { #b82-#b83 [RS]   | #w56402-#w56403 }
; { #b85 [U]         | #w56405 }
; { #b91-#b93 [[\]]  | #w56411-#w56413 }
; TABLE#
b56397 DEFB 254,0,0
 56400 DEFB 0,2,0,0,128,0,224,252,198,192,194,0,0,0,32,1

; Up-a-year tune data (segment 2/3)
;
; Used by the routine at #R24477. Segment 1 can be found at #R56364.
@label=UAYTUNE2
b56416 DEFB 55,55,119,59,127,59,119,55,121,57
 56426 DEFB 255                               ; Segment end marker
 56427 DEFW 56441                             ; Pointer to the next segment

; Font graphic data for CHR$(109) (pixel column 5)
;
; Used by the routine at #R27110.
b56429 DEFB 30

; Theme tune data (segment 2/6)
;
; Used by the routine at #R24477. Segment 1 can be found at #R56385.
@label=OTSEG2
b56430 DEFB 49,113,51,119,119,115
 56436 DEFB 255                   ; Segment end marker
 56437 DEFW 50492                 ; Pointer to the next segment

; Font graphic data for CHR$(119-120) (pixel column 5)
;
; Used by the routine at #R27110.
b56439 DEFB 56,34

; Up-a-year tune data (segment 3/3)
;
; Used by the routine at #R24477. Segment 2 can be found at #R56416.
@label=UAYTUNE3
b56441 DEFB 49,66,53,183,183
 56446 DEFB 0                ; End marker

; Font graphic data for CHR$(127) (pixel column 5)
;
; Used by the routine at #R27110.
b56447 DEFB 124

; UDG references for animatory states #b0-#b127 at row 1, column 1
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w56533 }
; { #AS93    | #w56541 }
; { #AS100   | #w56548 }
; { #AS101   | #w56549 }
; { #AS109   | #w56557 }
; { #AS117   | #w56565 }
; { #AS125   | #w56573 }
; TABLE#
b56448 DEFB 98,106,98,106,98,0,0,98,98,138,98,127,242,242,98,228
 56464 DEFB 158,160,158,160,158,0,0,158,0,0,158,164,0,0,90,0
 56480 DEFB 151,153,151,153,151,0,0,0,151,157,0,249,86,86,86,0
 56496 DEFB 142,146,142,146,142,0,0,0,210,216,210,216,210,0,0,210
 56512 DEFB 166,171,166,171,175,0,0,80,187,195,187,195,204,0,0,185
 56528 DEFB 135,147,135,147,78,0,158,135,196,208,196,208,77,0,220,218
 56544 DEFB 163,175,163,175,0,0,189,187,97,109,97,109,0,0,125,120
 56560 DEFB 225,236,225,236,74,0,224,246,94,85,94,85,73,0,253,81

; UDG reference table for the Science Lab storeroom door when shut
;
; Used by the routine at #R27672. The UDG reference table for the Science Lab
; storeroom door when open is at #R56832.
; .
; #UDGTABLE
; { #CALL:mutable(56576) }
; TABLE#
@label=URTSLSSHUT
b56576 DEFB 9,54,50,71,9,55,55,69,9,56,61,69
 56588 DEFB 10,54,51,71,10,55,56,69,10,56,62,69
 56600 DEFB 11,54,52,71,11,55,57,69,11,56,63,78
 56612 DEFB 12,54,53,71,12,55,58,69,12,56,64,78
 56624 DEFB 13,54,54,71,13,55,59,69,13,56,208,14
 56636 DEFB 255                                  ; End marker

; UDG reference table for the left study door when shut
;
; Used by the routine at #R27672. The UDG reference table for the left study
; door when open is at #R56893.
; .
; #UDGTABLE
; { #CALL:mutable(56637) }
; TABLE#
@label=URTLSDSHUT
b56637 DEFB 2,72,128,71,2,73,135,71
 56645 DEFB 3,71,243,6,3,72,129,70,3,73,136,71
 56657 DEFB 4,71,238,6,4,72,130,70,4,73,137,71
 56669 DEFB 5,71,225,14,5,72,131,78,5,73,138,71
 56681 DEFB 6,71,84,14,6,72,132,78,6,73,139,71
 56693 DEFB 255                                 ; End marker

; UDG reference table for the leftmost cup (containing water) on the shelf in
; the boys' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(56694) }
; TABLE#
@label=URTCUP1W
b56694 DEFB 14,25,186,5
 56698 DEFB 255         ; End marker

; UDG reference table for the leftmost cup (containing sherry) on the shelf in
; the boys' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(56699) }
; TABLE#
@label=URTCUP1S
b56699 DEFB 14,25,186,11
 56703 DEFB 255          ; End marker

; UDG references for animatory states #b0-#b127 at row 2, column 1
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w56789 }
; { #AS93    | #w56797 }
; { #AS100   | #w56804 }
; { #AS101   | #w56805 }
; { #AS109   | #w56813 }
; { #AS117   | #w56821 }
; { #AS125   | #w56829 }
; TABLE#
b56704 DEFB 99,107,99,107,114,118,0,99,134,139,128,128,243,246,99,229
 56720 DEFB 99,107,99,107,114,161,0,99,0,236,128,128,0,93,0,0
@bfix=DEFB 99,107,99,107,114,154,0,254,134,139,248,250,85,83,84,0
 56736 DEFB 99,107,99,107,114,154,0,254,134,139,248,250,85,84,83,0
 56752 DEFB 143,147,143,147,114,148,0,0,211,217,211,217,218,210,0,223
 56768 DEFB 167,172,167,172,176,180,0,79,188,196,188,196,205,187,0,0
 56784 DEFB 136,148,136,148,79,0,159,136,197,209,197,209,0,0,221,219
 56800 DEFB 164,176,164,176,0,0,190,188,98,110,98,110,0,0,126,121
 56816 DEFB 226,237,226,237,73,0,225,247,93,84,93,84,73,0,0,93

; UDG reference table for the Science Lab storeroom door when open
;
; Used by the routine at #R27672. The UDG reference table for the Science Lab
; storeroom door when shut is at #R56576.
; .
; #UDGTABLE
; { #CALL:mutable(56832) }
; TABLE#
@label=URTSLSOPEN
b56832 DEFB 9,54,166,199,9,55,167,199,9,56,168,199
 56844 DEFB 10,54,51,71,10,55,85,5,10,56,169,197
 56856 DEFB 11,54,170,207,11,55,81,15,11,56,171,207
 56868 DEFB 12,54,172,207,12,55,81,15,12,56,87,15
 56880 DEFB 13,54,173,207,13,55,83,207,13,56,174,207
 56892 DEFB 255                                      ; End marker

; UDG reference table for the left study door when open
;
; Used by the routine at #R27672. The UDG reference table for the left study
; door when shut is at #R56637.
; .
; #UDGTABLE
; { #CALL:mutable(56893) }
; TABLE#
@label=URTLSDOPEN
b56893 DEFB 2,72,128,71,2,73,175,192
 56901 DEFB 3,71,176,207,3,72,177,207,3,73,178,196
 56913 DEFB 4,71,179,207,4,72,180,207,4,73,181,199
 56925 DEFB 5,71,182,207,5,72,81,15,5,73,183,199
 56937 DEFB 6,71,103,15,6,72,81,15,6,73,184,199
 56949 DEFB 255                                    ; End marker

; UDG reference table for the middle cup (containing water) on the shelf in the
; boys' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(56950) }
; TABLE#
@label=URTCUP2W
b56950 DEFB 14,27,191,5
 56954 DEFB 255         ; End marker

; UDG reference table for the middle cup (containing sherry) on the shelf in
; the boys' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(56955) }
; TABLE#
@label=URTCUP2S
b56955 DEFB 14,27,191,11
 56959 DEFB 255          ; End marker

; UDG references for animatory states #b0-#b127 at row 3, column 1
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w57045 }
; { #AS93    | #w57053 }
; { #AS100   | #w57060 }
; { #AS101   | #w57061 }
; { #AS109   | #w57069 }
; { #AS117   | #w57077 }
; { #AS125   | #w57085 }
; TABLE#
b56960 DEFB 100,108,109,111,115,119,123,100,135,135,100,100,244,247,100,230
 56976 DEFB 100,108,109,111,115,119,123,100,232,237,100,100,94,0,0,89
 56992 DEFB 100,108,109,111,115,119,123,255,135,135,0,0,0,0,0,251
 57008 DEFB 100,108,109,111,115,119,123,88,189,197,198,200,0,207,219,189
 57024 DEFB 100,108,109,111,177,181,183,78,189,197,198,200,0,207,219,0
 57040 DEFB 137,149,152,154,0,0,127,137,198,210,214,216,0,0,127,198
 57056 DEFB 165,177,180,183,0,0,127,165,99,111,116,111,0,0,127,99
 57072 DEFB 227,238,242,245,73,0,249,227,198,210,214,216,73,0,254,198

; UDG reference table for the right study door when shut
;
; Used by the routine at #R27672. The UDG reference table for the right study
; door when open is at #R57344.
; .
; #UDGTABLE
; { #CALL:mutable(57088) }
; TABLE#
@label=URTRSDSHUT
b57088 DEFB 2,84,211,68,2,85,103,6,2,86,81,6
 57100 DEFB 3,84,212,70,3,85,103,6,3,86,81,6
 57112 DEFB 4,84,213,70,4,85,218,70,4,86,225,70
 57124 DEFB 5,84,214,70,5,85,219,78,5,86,226,78
 57136 DEFB 6,84,214,70,6,85,220,78,6,86,227,78
 57148 DEFB 255                                 ; End marker

; UDG reference table for the boys' skool door when shut
;
; Used by the routine at #R27672. The UDG reference table for the boys' skool
; door when open is at #R57405.
; .
; #UDGTABLE
; { #CALL:mutable(57149) }
; TABLE#
@label=URTBSDSHUT
b57149 DEFB 16,93,57,134,16,94,152,78,16,95,86,140
 57161 DEFB 17,93,57,134,17,94,152,78,17,95,87,140
 57173 DEFB 18,93,57,134,18,94,152,78,18,95,88,140
 57185 DEFB 19,93,58,134,19,94,73,142,19,95,80,12
 57197 DEFB 20,94,80,6,20,95,80,12
 57205 DEFB 255                                    ; End marker

; UDG reference table for the rightmost cup (containing water) on the shelf in
; the boys' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(57206) }
; TABLE#
@label=URTCUP3W
b57206 DEFB 14,30,186,5
 57210 DEFB 255         ; End marker

; UDG reference table for the rightmost cup (containing sherry) on the shelf in
; the boys' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(57211) }
; TABLE#
@label=URTCUP3S
b57211 DEFB 14,30,186,11
 57215 DEFB 255          ; End marker

; UDG references for animatory states #b0-#b127 at row 0, column 2
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w57301 }
; { #AS93    | #w57309 }
; { #AS100   | #w57316 }
; { #AS101   | #w57317 }
; { #AS109   | #w57325 }
; { #AS117   | #w57333 }
; { #AS125   | #w57341 }
; TABLE#
b57216 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 57232 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 57248 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 57264 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 57280 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 57296 DEFB 138,0,138,0,0,0,0,138,199,138,199,138,0,0,0,199
 57312 DEFB 166,0,166,0,78,0,0,166,100,112,100,112,76,0,0,100
 57328 DEFB 228,0,228,0,0,0,0,228,92,0,92,0,0,0,0,92

; UDG reference table for the right study door when open
;
; Used by the routine at #R27672. The UDG reference table for the right study
; door when shut is at #R57088.
; .
; #UDGTABLE
; { #CALL:mutable(57344) }
; TABLE#
@label=URTRSDOPEN
b57344 DEFB 2,84,185,196,2,85,186,198,2,86,187,198
 57356 DEFB 3,84,188,198,3,85,189,198,3,86,118,70
 57368 DEFB 4,84,190,198,4,85,191,198,4,86,192,198
 57380 DEFB 5,84,58,198,5,85,193,206,5,86,194,206
 57392 DEFB 6,84,58,198,6,85,81,14,6,86,195,206
 57404 DEFB 255                                    ; End marker

; UDG reference table for the boys' skool door when open
;
; Used by the routine at #R27672. The UDG reference table for the boys' skool
; door when shut is at #R57149.
; .
; #UDGTABLE
; { #CALL:mutable(57405) }
; TABLE#
@label=URTBSDOPEN
b57405 DEFB 16,93,196,198,16,94,197,206,16,95,198,196
 57417 DEFB 17,93,199,198,17,94,200,206,17,95,81,4
 57429 DEFB 18,93,173,70,18,94,182,78,18,95,81,4
 57441 DEFB 19,93,80,6,19,94,182,78,19,95,81,4
 57453 DEFB 20,94,208,6,20,95,201,196
 57461 DEFB 255                                       ; End marker

; UDG reference table for the cup (containing water) on the shelf in the girls'
; skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(57462) }
; TABLE#
@label=URTCUP4W
b57462 DEFB 14,186,102,197
 57466 DEFB 255            ; End marker

; UDG reference table for the cup (containing sherry) on the shelf in the
; girls' skool
;
; Used by the routine at #R27672.
; .
; #UDGTABLE
; { #CALL:mutable(57467) }
; TABLE#
@label=URTCUP4S
b57467 DEFB 14,186,102,203
 57471 DEFB 255            ; End marker

; UDG references for animatory states #b0-#b127 at row 1, column 2
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w57557 }
; { #AS93    | #w57565 }
; { #AS100   | #w57572 }
; { #AS101   | #w57573 }
; { #AS109   | #w57581 }
; { #AS117   | #w57589 }
; { #AS125   | #w57597 }
; TABLE#
b57472 DEFB 101,0,101,0,101,0,0,101,101,101,101,101,0,0,101,0
 57488 DEFB 101,0,101,0,101,0,0,101,0,0,101,101,0,0,0,0
 57504 DEFB 101,0,101,0,101,0,0,0,101,101,0,0,0,0,0,0
 57520 DEFB 144,0,144,0,144,0,0,0,212,0,212,0,212,0,0,212
 57536 DEFB 0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0
 57552 DEFB 139,138,139,138,0,0,160,139,200,211,200,211,78,0,222,200
 57568 DEFB 167,151,167,151,77,0,191,167,101,113,101,113,0,0,128,101
 57584 DEFB 229,239,229,239,0,0,228,229,91,138,91,138,0,0,0,91

; UDG reference table for the tree with no bike attached
;
; Used by the routine at #R27672. The UDG reference table for the tree with the
; bike attached is at #R57856.
; .
; #UDGTABLE
; { #CALL:mutable(57600) }
; TABLE#
@label=URTTREE
b57600 DEFB 18,100,153,132,18,101,171,132,18,102,189,132
 57612 DEFB 19,100,154,132,19,101,172,132,19,102,190,132
 57624 DEFB 20,100,81,4,20,101,81,4,20,102,81,4
 57636 DEFB 255                                          ; End marker

; 'C' pressed - catch a mouse or the frog
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'C' is
; pressed.
@label=CATCH
c57637 LD A,39       ; #AS39=ERIC bending over, facing left
@nowarn
 57639 LD HL,31573   ; The routine at #R31573 deals with ERIC after 'C' has
                     ; been pressed
; This entry point is used by the routines at #R23863, #R24348, #R28992,
; #R57893 and #R63898 with ERIC's new animatory state in #REGa (bit 7 reset)
; and an appropriate routine address in #REGhl.
*57642 LD (32727),HL ; Place into #R32727 the address of the routine that will
                     ; deal with ERIC after we've finished here
 57645 LD HL,32763   ; {Set bit 3 at #R32763: ERIC is bending over, firing the
 57648 LD (HL),8     ; water pistol, moving forward as if to kiss, or dropping
                     ; a stinkbomb}
; This entry point is used by the routine at #R24247 with ERIC's new animatory
; state in #REGa (bit 7 reset).
*57650 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 57653 LD BC,3       ;
 57656 BIT 7,(HL)    ; Is ERIC facing left?
 57658 JR Z,57662    ; Jump if so
 57660 ADD A,128     ; Set bit 7 of ERIC's new animatory state so he's still
                     ; facing right
*57662 LD D,H        ; {Point #REGde at byte #b3 of ERIC's buffer
 57663 LD E,C        ; }
 57664 LDIR          ; Copy bytes #b0-#b2 of ERIC's buffer (which hold ERIC's
                     ; current animatory state and location) into bytes #b3-#b5
                     ; for retrieval when ERIC has completed this action
 57666 JP 62452      ; Update ERIC's animatory state and update the SRB

; Deal with ERIC when he's bending over, dropping a stinkbomb etc.
;
; This routine is called by the routine at #R63405 when bit 3 at #R32763 is set
; by the routine at #R57637, indicating that ERIC is bending over (to throw
; away the water pistol, release a mouse, or catch a mouse or the frog),
; dropping a stinkbomb, firing the water pistol, or moving forward as if to
; kiss.
@label=BENDING
c57669 XOR A         ; {Reset all flags at #R32763, indicating that ERIC has
 57670 LD (32763),A  ; finished bending over, dropping a stinkbomb etc.}
 57673 LD HL,5126    ; {Set ERIC's main action timer at #R32755 to #b20 (the
 57676 LD (32754),HL ; delay before ERIC completes this action), and the
                     ; mid-action timer at #R32754 to #b6 (the delay after ERIC
                     ; completes this action)}
; This entry point is used by the routine at #R24237 (when bit 5 at #R32763 is
; set).
*57679 LD HL,(32727) ; {Collect in #REGhl the routine address stored in
 57682 PUSH HL       ; #R32727, and push it onto the stack ready for an
                     ; indirect jump}
 57683 LD H,210      ; #b210=ERIC
 57685 RET           ; Jump to the routine whose address is stored in #R32727

; Addresses of closed door/window UDG reference tables
;
; Used by the routines at #R27860 and #R28736. The door/gate/cups/bike
; initialisation table follows at #R57702.
@label=DWURTINIT
b57686 DEFW 56637    ; Left study door (closed)
 57688 DEFW 57088    ; Right study door (closed)
 57690 DEFW 56576    ; Science Lab storeroom door (closed)
 57692 DEFW 57149    ; Boys' skool door (closed)
 57694 DEFW 63744    ; Skool gate (closed)
 57696 DEFW 56064    ; Drinks cabinet door (closed)
 57698 DEFW 55040    ; Top-floor window (closed)
 57700 DEFW 55552    ; Middle-floor window (closed)

; Door/gate/cups/bike initialisation table
;
; Used by the routine at #R27860. Follows on from the table at #R57686 (which
; is used to close all the doors and windows first).
@label=URTINIT
b57702 DEFW 57856    ; Tree with bike attached
 57704 DEFW 64000    ; Skool gate (open)
 57706 DEFW 57405    ; Boys' skool door (open)
 57708 DEFW 56081    ; Cups on the shelf in the boys' skool (empty)
 57710 DEFW 56337    ; Cup on the shelf in the girls' skool (empty)

; UDG back buffer
;
; Used by the routines at #R24576 and #R24684.
@label=BACKBUF
b57712 DEFS 8

; SRB bit translation table
;
; Used by the routines at #R24880 and #R26958. Given an integer N between 0 and
; 7, this table is used to obtain a byte with bit 7-N set and all other bits
; reset.
@label=SRBBITS
b57720 DEFB 128      ; 10000000
 57721 DEFB 64       ; 01000000
 57722 DEFB 32       ; 00100000
 57723 DEFB 16       ; 00010000
 57724 DEFB 8        ; 00001000
 57725 DEFB 4        ; 00000100
 57726 DEFB 2        ; 00000010
 57727 DEFB 1        ; 00000001

; UDG references for animatory states #b0-#b127 at row 2, column 2
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w57813 }
; { #AS93    | #w57821 }
; { #AS100   | #w57828 }
; { #AS101   | #w57829 }
; { #AS109   | #w57837 }
; { #AS117   | #w57845 }
; { #AS125   | #w57853 }
; TABLE#
b57728 DEFB 102,0,102,0,116,120,0,102,102,102,131,129,245,245,102,0
 57744 DEFB 102,0,102,0,116,162,0,102,0,238,131,129,0,92,0,0
 57760 DEFB 102,0,102,0,116,155,0,95,102,102,0,0,0,0,0,0
 57776 DEFB 102,0,102,0,116,149,0,0,213,0,213,0,213,212,0,213
 57792 DEFB 168,0,168,0,0,0,0,76,190,0,190,0,0,0,0,0
 57808 DEFB 140,150,140,150,0,0,161,140,201,212,201,212,77,0,223,201
 57824 DEFB 168,178,168,178,0,0,192,168,102,114,102,114,0,0,129,102
 57840 DEFB 230,240,230,240,0,0,229,230,90,83,90,83,0,0,0,90

; UDG reference table for the tree with the bike attached
;
; Used by the routine at #R27672. The UDG reference table for the tree with no
; bike attached is at #R57600.
; .
; #UDGTABLE
; { #CALL:mutable(57856) }
; TABLE#
@label=URTBIKE
b57856 DEFB 18,100,214,196,18,101,215,196,18,102,216,196
 57868 DEFB 19,100,217,196,19,101,218,196,19,102,219,196
 57880 DEFB 20,100,220,196,20,101,221,196,20,102,222,196
 57892 DEFB 255                                          ; End marker

; 'R' pressed - release mice
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'R' is
; pressed.
;
; H #b210 (ERIC)
@label=RELEASE
c57893 CALL 30543    ; Is ERIC on a staircase or the assembly hall stage?
 57896 RET NZ        ; Return if so
 57897 DEC L         ; #REGl=#b1
 57898 LD A,(HL)     ; #REGa=ERIC's x-coordinate
 57899 CP 160        ; Is ERIC in the girls' skool?
 57901 RET C         ; Return if not
 57902 LD A,39       ; #AS39: animatory state of ERIC bending over
@nowarn
 57904 LD HL,31462   ; Routine at #R31462: release some mice
 57907 JP 57642      ; Set ERIC's new animatory state

; Prepare buffer #b213 for use by a stinkbomb cloud
;
; Used by the routines at #R28992 and #R63586. Prepares buffer #b213 (normally
; used by BOY WANDER's catapult pellet) for use by a stinkbomb cloud. Returns
; to the main loop if the buffer is already in use by a stinkbomb cloud;
; otherwise returns to the caller with buffer #b213 ready to go.
@label=PREPSBBUF
@ssub=LD HL,54528+1
c57910 LD HL,54529   ; Point #REGhl at byte #b1 of buffer #b213
 57913 LD A,(HL)     ; #REGa=x-coordinate of the object that last used or is
                     ; now using this buffer
 57914 CP 192        ; Is this buffer being used now?
 57916 JR NC,57930   ; Jump if not
 57918 DEC L         ; #REGl=#b0
 57919 LD A,(HL)     ; #REGa=animatory state of the object that is using this
                     ; buffer
 57920 POP BC        ; Pop the return address from the stack into #REGbc
 57921 AND 127       ; Drop the 'direction' bit (bit 7) of the object's
                     ; animatory state
 57923 CP 79         ; #AS79: Is this buffer being used by BOY WANDER's
                     ; catapult pellet?
 57925 RET NZ        ; Return to the main loop if not
 57926 PUSH BC       ; Restore the return address (to the caller of this
                     ; routine) to the stack
 57927 CALL 29903    ; Terminate BOY WANDER's catapult pellet
*57930 LD H,210      ; #b210=ERIC
 57932 RET           ;

; Unused
s57933 DEFS 2

; Check whether buffer #b214 is being used
;
; Used by the routines at #R24296 and #R63898. Returns to the main loop if
; buffer #b214 is already in use (by ERIC's catapult pellet, water or sherry
; fired from the pistol or falling from a cup, a plant, the conker, or a desk
; lid); otherwise returns to the caller.
@label=CHECK214
@ssub=LD A,(54784+18)
c57935 LD A,(54802)  ; {Is there an uninterruptible subcommand routine address
 57938 AND A         ; in bytes #b17 and #b18 of the buffer in page #b214?}
 57939 RET Z         ; Return if not (the buffer is free)
 57940 POP BC        ; {Otherwise drop the return address from the stack and
 57941 RET           ; return to the main loop}

; Command list #b20: Assembly - EINSTEIN/little boy
;
; Used by little boys 1-4 and 10 and also by EINSTEIN in lesson #LESSON52.
@label=CLIST20
b57942 DEFW 25700    ; Go to...
 57944 DEFB 71,17    ; ...the assembly hall
 57946 DEFW 31952    ; Move about until...
 57948 DEFB 7        ; ...it's time to start assembly
 57949 DEFW 27904    ; Sit down in the assembly hall until assembly is finished
 57951 DEFW 25815    ; Go to a random location
 57953 DEFW 31952    ; Move about until...
 57955 DEFB 0        ; ...the bell rings

; Command list #b28: Girls' skool walkabout - MISS TAKE
;
; Used by MISS TAKE in lessons #LESSON56 and #LESSON58.
@label=CLIST28
b57956 DEFW 25700    ; Go to...
 57958 DEFB 188,3    ; ...the drinks cabinet
 57960 DEFW 29052    ; Move the...
 57962 DEFB 32,0     ; ...drinks cabinet door (close it)
 57964 DEFW 62560    ; Make the next command be the start of the command list
 57966 DEFW 25815    ; Go to a random location
 57968 DEFW 61624    ; Restart the command list

; Command list #b30: Dinner duty
;
; Used by MR WACKER in lesson #LESSON50, and by MR WITHIT in lesson #LESSON51.
@label=CLIST30
b57970 DEFW 25700    ; Go to...
 57972 DEFB 61,17    ; ...the far right end of the dinner hall in the boys'
                     ; skool
 57974 DEFW 61631    ; Go after ERIC if necessary
 57976 DEFW 25700    ; Go to...
 57978 DEFB 40,17    ; ...the far left end of the dinner hall in the boys'
                     ; skool
 57980 DEFW 61631    ; Go after ERIC if necessary
 57982 DEFW 61624    ; Restart the command list

; UDG references for animatory states #b0-#b127 at row 3, column 2
;
@ignoreua
; Used by the routine at #R24576. The following animatory states and
; corresponding addresses are unused:
; .
; #TABLE(default,centre,centre)
; { =h State | =h Address }
; { #AS85    | #w58069 }
; { #AS93    | #w58077 }
; { #AS100   | #w58084 }
; { #AS101   | #w58085 }
; { #AS109   | #w58093 }
; { #AS117   | #w58101 }
; { #AS125   | #w58109 }
; TABLE#
b57984 DEFB 0,0,0,0,0,121,124,0,102,102,0,0,239,239,0,0
 58000 DEFB 0,0,0,0,0,121,163,0,233,239,0,0,0,0,0,0
 58016 DEFB 0,0,0,0,0,121,156,0,102,102,0,0,0,0,0,0
 58032 DEFB 0,0,0,0,0,121,150,0,191,0,191,0,0,0,220,191
 58048 DEFB 0,0,0,0,0,0,184,0,191,0,191,0,0,0,209,0
 58064 DEFB 141,151,141,155,80,0,130,141,202,213,202,151,0,0,130,202
 58080 DEFB 169,179,181,184,0,0,130,169,103,115,117,115,0,0,130,103
 58096 DEFB 231,241,231,241,0,0,250,231,202,213,202,151,0,0,255,202

@defs=58112:11
; Message #b12: score/lines total/hi-score/number of lines being given
;
; Used by the routines at #R27497 and #R27572. The character codes of the
; digits of the number are stored here; the corresponding graphic data is
; generated and stored in the buffer at #R58123.
@label=MSG012
t58112 DEFS 11

@defs=58123:21
; Number graphic buffer
;
; Used by the routine at #R27497. Holds the graphic data for the number stored
; in the buffer at #R58112.
@label=NBUFG
b58123 DEFS 21

; Unused
;
; The 8 bytes here are skool graphic data that is copied into page #b128 by the
; #R33204@start(startup routine) after the game has loaded; however, this slice
; of RAM remains unused thereafter.
u58144 DEFB 255,255,255,255,255,255,255,255

@defs=58152:216
; Temporary store for the part of the screen overwritten by a message box
;
; Used by the routines at #R27276 and #R29716.
@label=OVERBUF
b58152 DEFS 24       ; The attributes go here
 58176 DEFS 192      ; The graphic data goes here

; Command list #b22: Top-floor classroom - MISS TAKE
;
; Used by MISS TAKE in lessons #LESSON37, #LESSON39, #LESSON41, #LESSON44,
; #LESSON46, #LESSON49, #LESSON53 and #LESSON54.
@label=CLIST22
b58368 DEFW 25700    ; Go to...
 58370 DEFB 183,3    ; ...the doorway of MISS TAKE's study
 58372 DEFW 25700    ; Go to...
 58374 DEFB 188,3    ; ...the drinks cabinet
 58376 DEFW 62572    ; Close the drinks cabinet door if it's open, and then
                     ; restart the command list unless the boys' skool door is
                     ; closed
 58378 DEFW 29052    ; Move the...
 58380 DEFB 32,1     ; ...drinks cabinet door (open it)
 58382 DEFW 62560    ; Make the next command be the start of the command list
 58384 DEFW 25700    ; Go to...
 58386 DEFB 184,3    ; ...the doorway of MISS TAKE's study
 58388 DEFW 25700    ; Go to...
 58390 DEFB 180,3    ; ...the doorway of the top-floor classroom in the girls'
                     ; skool
 58392 DEFW 61555    ; Restart the command list, or tell the kids to sit down
                     ; and signal that...
 58394 DEFB 8        ; ...the teacher has arrived at the top-floor classroom in
                     ; the girls' skool
 58395 DEFW 25700    ; Go to...
 58397 DEFB 169,3    ; ...the blackboard in the top-floor classroom in the
                     ; girls' skool
 58399 DEFW 61696    ; Wipe the board, conduct the class

; Unused
;
; Remnants of the message 'Culloden' in Skool Daze.
u58401 DEFM "den"
 58404 DEFB 0        ; End marker
 58405 DEFS 3

; Buffer holding attributes and graphic data for a message box
;
; Used by the routine at #R27462.
@label=MSGBOX
b58408 DEFS 24       ; The attributes go here
@label=MSGBOXG
 58432 DEFS 192      ; The graphic data goes here

; Keypress offset table
;
; Used by the routine at #R29178. Each non-zero entry in this table corresponds
; to a game key, and points to an entry in the table of keypress-handling
; routine addresses at #R58704. For more details, see the #LINK:Keys(keypress
; table).
@label=KEYTABLE
@ssub=DEFB 58728%256
b58624 DEFB 104      ; '0': Fire catapult
 58625 DEFB 0        ; '1': unused
 58626 DEFB 0        ; '2': unused
 58627 DEFB 0        ; '3': unused
 58628 DEFB 0        ; '4': unused
@ssub=DEFB 58704%256
 58629 DEFB 80       ; '5': Left
@ssub=DEFB 58710%256
 58630 DEFB 86       ; '6': Down
@ssub=DEFB 58708%256
 58631 DEFB 84       ; '7': Up
@ssub=DEFB 58706%256
 58632 DEFB 82       ; '8': Right
 58633 DEFB 0        ; '9': unused
 58634 DEFB 0        ; ':': unused
 58635 DEFB 0        ; ';': unused
 58636 DEFB 0        ; '<': unused
 58637 DEFB 0        ; '=': unused
 58638 DEFB 0        ; '>': unused
 58639 DEFB 0        ; '?': unused
 58640 DEFB 0        ; '@': unused
@ssub=DEFB 58710%256
 58641 DEFB 86       ; 'A': Down
@ssub=DEFB 58730%256
 58642 DEFB 106      ; 'B': Mount bike
@ssub=DEFB 58724%256
 58643 DEFB 100      ; 'C': Catch mouse/frog
@ssub=DEFB 58732%256
 58644 DEFB 108      ; 'D': Drop stinkbomb
 58645 DEFB 0        ; 'E': unused
@ssub=DEFB 58728%256
 58646 DEFB 104      ; 'F': Fire catapult
@ssub=DEFB 58734%256
 58647 DEFB 110      ; 'G': Fire water pistol
@ssub=DEFB 58736%256
 58648 DEFB 112      ; 'H': Hit
 58649 DEFB 0        ; 'I': unused
@ssub=DEFB 58738%256
 58650 DEFB 114      ; 'J': Jump
@ssub=DEFB 58740%256
 58651 DEFB 116      ; 'K': Kiss
@ssub=DEFB 58738%256
 58652 DEFB 114      ; 'L': Jump
@ssub=DEFB 58730%256
 58653 DEFB 106      ; 'M': Mount bike
 58654 DEFB 0        ; 'N': unused
@ssub=DEFB 58704%256
 58655 DEFB 80       ; 'O': Left
@ssub=DEFB 58706%256
 58656 DEFB 82       ; 'P': Right
@ssub=DEFB 58708%256
 58657 DEFB 84       ; 'Q': Up
@ssub=DEFB 58726%256
 58658 DEFB 102      ; 'R': Release mice
@ssub=DEFB 58722%256
 58659 DEFB 98       ; 'S': Sit
@ssub=DEFB 58742%256
 58660 DEFB 118      ; 'T': Throw away water pistol
@ssub=DEFB 58732%256
 58661 DEFB 108      ; 'U': Drop stinkbomb
 58662 DEFB 0        ; 'V': unused
@ssub=DEFB 58744%256
 58663 DEFB 120      ; 'W': Write
 58664 DEFB 0        ; 'X': unused
 58665 DEFB 0        ; 'Y': unused
 58666 DEFB 0        ; 'Z': unused
 58667 DEFB 0        ; '[': unused
 58668 DEFB 0        ; '\': unused
 58669 DEFB 0        ; ']': unused
 58670 DEFB 0        ; '#CHR8593': unused
 58671 DEFB 0        ; '_': unused
 58672 DEFB 0        ; '#CHR163': unused
@ssub=DEFB 58718%256
 58673 DEFB 94       ; 'a': Down
@ssub=DEFB 58730%256
 58674 DEFB 106      ; 'b': Mount bike
@ssub=DEFB 58724%256
 58675 DEFB 100      ; 'c': Catch mouse/frog
@ssub=DEFB 58732%256
 58676 DEFB 108      ; 'd': Drop stinkbomb
 58677 DEFB 0        ; 'e': unused
@ssub=DEFB 58728%256
 58678 DEFB 104      ; 'f': Fire catapult
@ssub=DEFB 58734%256
 58679 DEFB 110      ; 'g': Fire water pistol
@ssub=DEFB 58736%256
 58680 DEFB 112      ; 'h': Hit
 58681 DEFB 0        ; 'i': unused
@ssub=DEFB 58738%256
 58682 DEFB 114      ; 'j': Jump
@ssub=DEFB 58740%256
 58683 DEFB 116      ; 'k': Kiss
@ssub=DEFB 58738%256
 58684 DEFB 114      ; 'l': Jump
@ssub=DEFB 58730%256
 58685 DEFB 106      ; 'm': Mount bike
 58686 DEFB 0        ; 'n': unused
@ssub=DEFB 58712%256
 58687 DEFB 88       ; 'o': Left
@ssub=DEFB 58714%256
 58688 DEFB 90       ; 'p': Right
@ssub=DEFB 58716%256
 58689 DEFB 92       ; 'q': Up
@ssub=DEFB 58726%256
 58690 DEFB 102      ; 'r': Release mice
@ssub=DEFB 58722%256
 58691 DEFB 98       ; 's': Sit
@ssub=DEFB 58742%256
 58692 DEFB 118      ; 't': Throw away water pistol
@ssub=DEFB 58732%256
 58693 DEFB 108      ; 'u': Drop stinkbomb
 58694 DEFB 0        ; 'v': unused
@ssub=DEFB 58744%256
 58695 DEFB 120      ; 'w': Write
 58696 DEFB 0        ; 'x': unused
 58697 DEFB 0        ; 'y': unused
 58698 DEFB 0        ; 'z': unused
 58699 DEFB 0        ; '{': unused
 58700 DEFB 0        ; '|': unused
 58701 DEFB 0        ; '}': unused
 58702 DEFB 0        ; '~': unused
 58703 DEFB 0        ; '#CHR169': unused

; Addresses of keypress handling routines
;
; Used by the main loop at #R63210, and by the routine at #R29178. Each
; non-zero entry in the keypress offset table at #R58624 points to a routine
; address in this table. For more details, see the #LINK:Keys(keypress table).
@label=K_LEFTF
w58704 DEFW 28460    ; #b80: Left (fast)
@label=K_RIGHTF
 58706 DEFW 28436    ; #b82: Right (fast)
@label=K_UPF
 58708 DEFW 28484    ; #b84: Up (fast)
@label=K_DOWNF
 58710 DEFW 28576    ; #b86: Down (fast)
@label=K_LEFT
 58712 DEFW 28460    ; #b88: Left (slow)
@label=K_RIGHT
 58714 DEFW 28436    ; #b90: Right (slow)
@label=K_UP
 58716 DEFW 28484    ; #b92: Up (slow)
@label=K_DOWN
 58718 DEFW 28576    ; #b94: Down (slow)
 58720 DEFW 0        ; #b96: Unused
@label=K_SIT
 58722 DEFW 62423    ; #b98: Sit
@label=K_CATCH
 58724 DEFW 57637    ; #b100: Catch mouse/frog
@label=K_RELEASE
 58726 DEFW 57893    ; #b102: Release mice
@label=K_FIRE
 58728 DEFW 24296    ; #b104: Fire catapult
@label=K_MOUNT
 58730 DEFW 29574    ; #b106: Mount bike
@label=K_SBOMB
 58732 DEFW 28992    ; #b108: Drop stinkbomb
@label=K_WPISTOL
 58734 DEFW 63898    ; #b110: Fire water pistol
@label=K_HIT
 58736 DEFW 24263    ; #b112: Hit
@label=K_JUMP
 58738 DEFW 23887    ; #b114: Jump
@label=K_KISS
 58740 DEFW 24348    ; #b116: Kiss
@label=K_THROWWP
 58742 DEFW 23863    ; #b118: Throw away water pistol
@label=K_WRITE
 58744 DEFW 24133    ; #b120: Write

; Unused
s58746 DEFS 22

; Command list #b32: Science Lab - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON38, #LESSON45, #LESSON47 and #LESSON49.
@label=CLIST32
b58768 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 58770 DEFW 30555    ; ...fire the catapult now and then
 58772 DEFW 25700    ; Go to...
 58774 DEFB 35,10    ; ...the Science Lab blackboard
 58776 DEFW 32497    ; Write on the board unless...
 58778 DEFB 12       ; ...the teacher has arrived at the Science Lab
; This command list continues at #R58779.

; Command list #b34: Science Lab - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON40, #LESSON45, #LESSON47 and #LESSON48.
; Command list #R58768(#b32) also continues here.
@label=CLIST34
b58779 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58781 DEFW 63492    ; ...fire the catapult or hit now and then
 58783 DEFW 25700    ; Go to...
 58785 DEFB 48,10    ; ...the Science Lab
 58787 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58789 DEFW 63492    ; ...fire the catapult or hit now and then
 58791 DEFW 31952    ; Move about until...
 58793 DEFB 12       ; ...the teacher arrives at the Science Lab
 58794 DEFW 26304    ; Find a seat and sit down
 58796 DEFW 53796    ; Sit still

; Command list #b36: Revision Library - ANGELFACE/BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON42, #LESSON46 and #LESSON53, and by
; ANGELFACE in lessons #LESSON44, #LESSON49, #LESSON53 and #LESSON54.
@label=CLIST36
b58798 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58800 DEFW 63492    ; ...fire the catapult or hit now and then
 58802 DEFW 25700    ; Go to...
 58804 DEFB 36,3     ; ...the Revision Library
 58806 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58808 DEFW 63492    ; ...fire the catapult or hit now and then
 58810 DEFW 31952    ; Move about until...
 58812 DEFB 0        ; ...the end of the lesson

; Command list #b38: Dinner - ANGELFACE/BOY WANDER
;
; Used by BOY WANDER and ANGELFACE in lessons #LESSON50 and #LESSON51.
@label=CLIST38
b58813 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58815 DEFW 63492    ; ...fire the catapult or hit now and then
 58817 DEFW 25700    ; Go to...
 58819 DEFB 53,17    ; ...the dinner hall in the boys' skool
 58821 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58823 DEFW 63492    ; ...fire the catapult or hit now and then
 58825 DEFW 31952    ; Move about until...
 58827 DEFB 0        ; ...the bell rings

; Command list #b42: Walkabout - ANGELFACE/BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON58 and #LESSON59, and by ANGELFACE in
; lessons #LESSON56 and #LESSON58.
@label=CLIST42
b58828 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58830 DEFW 63492    ; ...fire the catapult or hit now and then
 58832 DEFW 25815    ; Go to a random location
 58834 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 58836 DEFW 63492    ; ...fire the catapult or hit now and then
 58838 DEFW 31969    ; Walk up and down...
 58840 DEFB 0,9      ; ...9 times
 58842 DEFW 61624    ; Restart the command list

; Command list #b44: Stalk HAYLEY - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON55, #LESSON57 and #LESSON59.
@label=CLIST44
b58844 DEFW 63447    ; Put the next address in ANGELFACE's buffer, making
                     ; him...
 58846 DEFW 63455    ; ...stalk HAYLEY
 58848 DEFW 25700    ; Go to...
 58850 DEFB 120,17   ; ...wherever HAYLEY's going (HAYLEY's coordinates are
                     ; placed here by the routine at #R63455)
 58852 DEFW 63447    ; Put the next address in ANGELFACE's buffer, making
                     ; him...
 58854 DEFW 63455    ; ...stalk HAYLEY
 58856 DEFW 31969    ; Walk up and down...
 58858 DEFB 0,9      ; ...9 times
 58860 DEFW 61624    ; Restart the command list

; Command list #b88: Assembly - little boy
;
; Used by little boys 5-9 in lesson #LESSON52.
@label=CLIST88
b58862 DEFW 25700    ; Go to...
 58864 DEFB 75,17    ; ...the assembly hall
 58866 DEFW 31952    ; Move about until...
 58868 DEFB 7        ; ...it's time to start assembly
 58869 DEFW 27904    ; Sit down in the assembly hall until assembly is finished
 58871 DEFW 25815    ; Go to a random location
 58873 DEFW 31952    ; Move about until...
 58875 DEFB 0        ; ...the bell rings

; Unused
s58876 DEFS 4

; Command list #b24: Middle-floor classroom - MISS TAKE
;
; Used by MISS TAKE in lessons #LESSON38, #LESSON40, #LESSON42, #LESSON43,
; #LESSON45, #LESSON47 and #LESSON48.
@label=CLIST24
b58880 DEFW 25700    ; Go to...
 58882 DEFB 183,3    ; ...the doorway of MISS TAKE's study
 58884 DEFW 25700    ; Go to...
 58886 DEFB 188,3    ; ...the drinks cabinet
 58888 DEFW 62572    ; Close the drinks cabinet door (if it's open), and then
                     ; restart the command list unless the boys' skool door is
                     ; closed
 58890 DEFW 29052    ; Move the...
 58892 DEFB 32,1     ; ...drinks cabinet door (open it)
 58894 DEFW 62560    ; Make the next command be the start of the command list
 58896 DEFW 25700    ; Go to...
 58898 DEFB 188,10   ; ...the window on the middle floor in the girls' skool
 58900 DEFW 25700    ; Go to...
 58902 DEFB 179,10   ; ...the doorway of the middle-floor classroom in the
                     ; girls' skool
 58904 DEFW 61555    ; Restart the command list, or tell the kids to sit down
                     ; and signal that...
 58906 DEFB 9        ; ...the teacher has arrived at the middle-floor classroom
                     ; in the girls' skool
 58907 DEFW 25700    ; Go to...
 58909 DEFB 169,10   ; ...the blackboard in the middle-floor classroom in the
                     ; girls' skool
 58911 DEFW 61696    ; Wipe the board, conduct the class

; Unused
;
; Remnants of the message 'QUADRATIC EQUATIONS' in Skool Daze.
u58913 DEFM "UADRATI"

; 'Score - 0 Lines - 0 Hi-Sc - 0' box graphic
;
; Used by the routine at #R62910.
; .
; #UDGTABLE
; { #UDGARRAY8,31,,8;58944-58951;59008-59015;59072-59079(score_box) }
; TABLE#
@label=SCOREBOX
b58920 DEFB 31,31,31,31,31,31,31,31 ; {Attributes (PAPER 3: INK 7)
 58928 DEFB 31,31,31,31,31,31,31,31 ;
 58936 DEFB 31,31,31,31,31,31,31,31 ; }
 58944 DEFB 0,0,0,0,0,0,0,0         ; {Graphic data
 58952 DEFB 56,0,0,0,0,0,0,96       ;
 58960 DEFB 64,0,0,0,0,0,0,144      ;
 58968 DEFB 65,204,163,0,0,0,0,144  ;
 58976 DEFB 50,18,212,128,0,0,0,176 ;
 58984 DEFB 10,18,135,158,0,0,0,208 ;
 58992 DEFB 10,18,132,0,0,0,0,144   ;
@bfix=DEFB 113,204,131,0,0,0,0,96
 59000 DEFB 113,216,131,0,0,0,0,96  ;
 59008 DEFB 0,0,0,0,0,0,0,0         ;
 59016 DEFB 64,0,0,0,0,0,0,96       ;
 59024 DEFB 66,0,0,0,0,0,0,144      ;
 59032 DEFB 64,163,28,0,0,0,0,144   ;
 59040 DEFB 66,212,160,0,0,0,0,176  ;
 59048 DEFB 66,151,152,30,0,0,0,208 ;
 59056 DEFB 66,148,4,0,0,0,0,144    ;
 59064 DEFB 122,147,56,0,0,0,0,96   ;
 59072 DEFB 0,0,0,0,0,0,0,0         ;
 59080 DEFB 72,7,0,0,0,0,0,96       ;
 59088 DEFB 74,8,0,0,0,0,0,144      ;
 59096 DEFB 72,8,56,0,0,0,0,144     ;
 59104 DEFB 122,6,64,0,0,0,0,176    ;
 59112 DEFB 74,225,64,30,0,0,0,208  ;
 59120 DEFB 74,1,64,0,0,0,0,144     ;
 59128 DEFB 74,14,56,0,0,0,0,96     ; }

; Command list #b26: Kitchen walkabout - MISS TAKE
;
; Used by MISS TAKE in lessons #LESSON50, #LESSON51, #LESSON52, #LESSON55,
; #LESSON57 and #LESSON59.
@label=CLIST26
b59136 DEFW 25700    ; Go to...
 59138 DEFB 188,3    ; ...the drinks cabinet
 59140 DEFW 29052    ; Move the...
 59142 DEFB 32,0     ; ...drinks cabinet door (close it)
 59144 DEFW 25700    ; Go to...
 59146 DEFB 189,17   ; ...the kitchen
 59148 DEFW 31952    ; Move about until...
 59150 DEFB 0        ; ...the bell rings

; Command list #b40: Assembly - ANGELFACE/BOY WANDER
;
; Used by BOY WANDER and ANGELFACE in lesson #LESSON52.
@label=CLIST40
b59151 DEFW 25700    ; Go to...
 59153 DEFB 73,17    ; ...the assembly hall
 59155 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 59157 DEFW 63492    ; ...fire the catapult or hit now and then
 59159 DEFW 31952    ; Move about until...
 59161 DEFB 7        ; ...it's time to start assembly
 59162 DEFW 27904    ; Sit down in the assembly hall until assembly is finished
 59164 DEFW 25815    ; Go to a random location
 59166 DEFW 31952    ; Move about until...
 59168 DEFB 0        ; ...the bell rings

; Unused
;
; Remnants of the message 'Splitting The Atom' in Skool Daze.
u59169 DEFM "plittin"

; Back to Skool logo
;
; Used by the routine at #R62910.
@label=LOGO
b59176 DEFB 31,31,31,31,31,31,31,31 ; {Attributes (PAPER 3: INK 7)
 59184 DEFB 31,31,31,31,31,31,31,31 ;
 59192 DEFB 31,31,31,31,31,31,31,31 ; }
 59200 DEFB 0,0,0,0,0,0,64,0        ; {Graphic data
 59208 DEFB 0,0,57,0,0,0,32,0       ;
 59216 DEFB 0,0,64,136,0,0,16,0     ;
 59224 DEFB 0,0,64,72,0,0,8,0       ;
 59232 DEFB 0,0,64,40,0,0,4,0       ;
 59240 DEFB 0,0,66,31,0,0,242,0     ;
 59248 DEFB 0,0,60,8,0,1,9,0        ;
 59256 DEFB 0,0,0,36,60,1,68,0      ;
 59264 DEFB 0,0,28,48,66,0,132,0    ;
 59272 DEFB 0,0,34,40,65,0,136,0    ;
 59280 DEFB 0,0,33,0,33,30,112,0    ;
 59288 DEFB 0,0,33,160,34,33,0,0    ;
 59296 DEFB 0,128,33,20,28,40,128,0 ;
 59304 DEFB 0,79,146,8,0,16,128,0   ;
 59312 DEFB 0,40,76,20,40,17,0,0    ;
 59320 DEFB 0,24,64,2,68,78,0,0     ;
 59328 DEFB 0,8,64,1,130,64,0,0     ;
 59336 DEFB 0,5,128,0,1,64,0,0      ;
 59344 DEFB 0,2,0,0,56,248,0,0      ;
 59352 DEFB 0,0,0,0,64,64,0,0       ;
 59360 DEFB 0,0,0,0,78,32,0,0       ;
 59368 DEFB 0,0,0,0,82,0,0,0        ;
 59376 DEFB 0,0,0,0,34,0,0,0        ;
 59384 DEFB 0,0,0,0,12,0,0,0        ; }

@org
; Addresses of command lists
;
; Used by the routine at #R63309.
@label=CLISTADDR
w59392 DEFW 51516    ; #b0: Top-floor classroom - girl
 59394 DEFW 51772    ; #b2: Middle-floor classroom - girl
 59396 DEFW 52028    ; #b4: Blue Room - little boy
 59398 DEFW 52284    ; #b6: Yellow Room - little boy
 59400 DEFW 52540    ; #b8: Science Lab - little boy
 59402 DEFW 52796    ; #b10: Kitchen - girl
 59404 DEFW 53052    ; #b12: Dinner hall - girl
 59406 DEFW 53308    ; #b14: Revision Library - little boy
 59408 DEFW 53564    ; #b16: Dinner - EINSTEIN/little boy
 59410 DEFW 53820    ; #b18: Walkabout - EINSTEIN/little boy/girl
 59412 DEFW 57942    ; #b20: Assembly - EINSTEIN/little boy
 59414 DEFW 58368    ; #b22: Top-floor classroom - MISS TAKE
 59416 DEFW 58880    ; #b24: Middle-floor classroom - MISS TAKE
 59418 DEFW 59136    ; #b26: Kitchen walkabout - MISS TAKE
 59420 DEFW 57956    ; #b28: Girls' skool walkabout - MISS TAKE
 59422 DEFW 57970    ; #b30: Dinner duty
 59424 DEFW 58768    ; #b32: Science Lab - BOY WANDER
 59426 DEFW 58779    ; #b34: Science Lab - ANGELFACE
 59428 DEFW 58798    ; #b36: Revision Library - ANGELFACE/BOY WANDER
 59430 DEFW 58813    ; #b38: Dinner - ANGELFACE/BOY WANDER
 59432 DEFW 59151    ; #b40: Assembly - ANGELFACE/BOY WANDER
 59434 DEFW 58828    ; #b42: Walkabout - ANGELFACE/BOY WANDER
 59436 DEFW 58844    ; #b44: Stalk HAYLEY - ANGELFACE
 59438 DEFW 59488    ; #b46: Blue Room - BOY WANDER
 59440 DEFW 59499    ; #b48: Blue Room - ANGELFACE
 59442 DEFW 59519    ; #b50: Yellow Room - BOY WANDER
 59444 DEFW 59530    ; #b52: Yellow Room - ANGELFACE
 59446 DEFW 59550    ; #b54: Write on the blackboards in the boys' skool - BOY
                     ; WANDER
 59448 DEFW 59584    ; #b56: Write on the blackboards in the girls' skool - BOY
                     ; WANDER
 59450 DEFW 59612    ; #b58: Blue Room - teacher
 59452 DEFW 59629    ; #b60: Yellow Room - teacher
 59454 DEFW 59646    ; #b62: Science Lab - teacher
 59456 DEFW 59663    ; #b64: Walkabout - WITHIT
 59458 DEFW 59673    ; #b66: Walkabout - WACKER
 59460 DEFW 59677    ; #b68: Walkabout - teacher
 59462 DEFW 59681    ; #b70: Walkabout - WACKER
 59464 DEFW 59699    ; #b72: Assembly - WACKER
 59466 DEFW 59715    ; #b74: Head's study - WACKER
 59468 DEFW 59724    ; #b76: Close the gate and the door - ALBERT
 59470 DEFW 59765    ; #b78: Open the door and the gate - ALBERT
 59472 DEFW 59788    ; #b80: Assembly - teacher
 59474 DEFW 59801    ; #b82: Blue Room - EINSTEIN
 59476 DEFW 59812    ; #b84: Yellow Room - EINSTEIN
 59478 DEFW 59823    ; #b86: Science Lab - EINSTEIN
 59480 DEFW 58862    ; #b88: Assembly - little boy

; Unused
s59482 DEFS 6

; Command list #b46: Blue Room - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON37, #LESSON41, #LESSON48 and #LESSON54.
@label=CLIST46
b59488 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 59490 DEFW 30555    ; ...fire the catapult now and then
 59492 DEFW 25700    ; Go to...
 59494 DEFB 6,3      ; ...the Blue Room blackboard
 59496 DEFW 32497    ; Write on the board unless...
 59498 DEFB 10       ; ...the teacher has arrived at the Blue Room
; This command list continues at #R59499.

; Command list #b48: Blue Room - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON37, #LESSON38, #LESSON42 and #LESSON43.
; Command list #R59488(#b46) also continues here.
@label=CLIST48
b59499 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 59501 DEFW 63492    ; ...fire the catapult or hit now and then
 59503 DEFW 25700    ; Go to...
 59505 DEFB 21,3     ; ...the Blue Room
 59507 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 59509 DEFW 63492    ; ...fire the catapult or hit now and then
 59511 DEFW 31952    ; Move about until...
 59513 DEFB 10       ; ...the teacher arrives at the Blue Room
 59514 DEFW 26304    ; Find a seat and sit down
 59516 DEFW 53796    ; Sit still

; Unused
s59518 DEFB 0

; Command list #b50: Yellow Room - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON39, #LESSON40, #LESSON43 and #LESSON44.
@label=CLIST50
b59519 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 59521 DEFW 30555    ; ...fire the catapult now and then
 59523 DEFW 25700    ; Go to...
 59525 DEFB 44,3     ; ...the Yellow Room blackboard
 59527 DEFW 32497    ; Write on the board unless...
 59529 DEFB 11       ; ...the teacher has arrived at the Yellow Room
; This command list continues at #R59530.

; Command list #b52: Yellow Room - ANGELFACE
;
; Used by ANGELFACE in lessons #LESSON39, #LESSON41 and #LESSON46. Command list
; #R59519(#b50) also continues here.
@label=CLIST52
b59530 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 59532 DEFW 63492    ; ...fire the catapult or hit now and then
 59534 DEFW 25700    ; Go to...
 59536 DEFB 55,3     ; ...the Yellow Room
 59538 DEFW 63447    ; Put the next address in the character's buffer, making
                     ; him...
 59540 DEFW 63492    ; ...fire the catapult or hit now and then
 59542 DEFW 31952    ; Move about until...
 59544 DEFB 11       ; ...the teacher arrives at the Yellow Room
 59545 DEFW 26304    ; Find a seat and sit down
 59547 DEFW 53796    ; Sit still

; Unused
s59549 DEFB 0

; Command list #b54: Write on the blackboards in the boys' skool - BOY WANDER
;
; Used by BOY WANDER in lessons #LESSON55 and #LESSON56.
@label=CLIST54
b59550 DEFW 25700    ; Go to...
 59552 DEFB 6,3      ; ...the Blue Room blackboard
 59554 DEFW 32497    ; Write on the board unless...
 59556 DEFB 0        ; ...playtime is over
 59557 DEFW 25700    ; Go to...
 59559 DEFB 44,3     ; ...the Yellow Room blackboard
 59561 DEFW 32497    ; Write on the board unless...
 59563 DEFB 0        ; ...playtime is over
 59564 DEFW 25700    ; Go to...
 59566 DEFB 35,10    ; ...the Science Lab blackboard
 59568 DEFW 32497    ; Write on the board unless...
 59570 DEFB 0        ; ...playtime is over
 59571 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 59573 DEFW 63492    ; ...fire the catapult now and then
 59575 DEFW 25815    ; Go to a random location
 59577 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 59579 DEFW 63492    ; ...fire the catapult now and then
 59581 DEFW 31952    ; Move about until...
 59583 DEFB 0        ; ...playtime is over

; Command list #b56: Write on the blackboards in the girls' skool - BOY WANDER
;
; Used by BOY WANDER in lesson #LESSON57.
@label=CLIST56
b59584 DEFW 25700    ; Go to...
 59586 DEFB 164,3    ; ...the top-floor classroom blackboard
 59588 DEFW 32497    ; Write on the board unless...
 59590 DEFB 0        ; ...playtime is over
 59591 DEFW 25700    ; Go to...
 59593 DEFB 164,10   ; ...the middle-floor classroom blackboard
 59595 DEFW 32497    ; Write on the board unless...
 59597 DEFB 0        ; ...playtime is over
 59598 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 59600 DEFW 63492    ; ...fire the catapult now and then
 59602 DEFW 25815    ; Go to a random location
 59604 DEFW 63447    ; Put the next address in BOY WANDER's buffer, making
                     ; him...
 59606 DEFW 63492    ; ...fire the catapult now and then
 59608 DEFW 31952    ; Move about until...
 59610 DEFB 0        ; ...playtime is over

; Unused
s59611 DEFB 0

; Command list #b58: Blue Room - teacher
;
; Used by MR WITHIT in lessons #LESSON39, #LESSON40, #LESSON41, #LESSON42,
; #LESSON49 and #LESSON54, and by MR CREAK in lessons #LESSON37, #LESSON38,
; #LESSON43, #LESSON44, #LESSON46, #LESSON47 and #LESSON48.
@label=CLIST58
b59612 DEFW 25700    ; Go to...
 59614 DEFB 32,3     ; ...the Revision Library
 59616 DEFW 25700    ; Go to...
 59618 DEFB 23,3     ; ...the Blue Room doorway
 59620 DEFW 61555    ; Restart the command list, or tell the kids to sit down
                     ; and signal that...
 59622 DEFB 10       ; ...the teacher has arrived at the Blue Room
 59623 DEFW 25700    ; Go to...
 59625 DEFB 11,3     ; ...the Blue Room blackboard
 59627 DEFW 61696    ; Wipe the board, conduct the class

; Command list #b60: Yellow Room - teacher
;
; Used by MR WITHIT in lessons #LESSON37, #LESSON43, #LESSON44 and #LESSON47,
; by MR ROCKITT in lessons #LESSON42 and #LESSON46, and by MR CREAK in lessons
; #LESSON39, #LESSON40, #LESSON41, #LESSON45, #LESSON49, #LESSON53 and
; #LESSON54.
@label=CLIST60
b59629 DEFW 25700    ; Go to...
 59631 DEFB 31,3     ; ...the Revision Library
 59633 DEFW 25700    ; Go to...
 59635 DEFB 38,3     ; ...the Yellow Room doorway
 59637 DEFW 61555    ; Restart the command list, or tell the kids to sit down
                     ; and signal that...
 59639 DEFB 11       ; ...the teacher has arrived at the Yellow Room
 59640 DEFW 25700    ; Go to...
 59642 DEFB 49,3     ; ...the Yellow Room blackboard
 59644 DEFW 61696    ; Wipe the board, conduct the class

; Command list #b62: Science Lab - teacher
;
; Used by MR WITHIT in lessons #LESSON45 and #LESSON46, and by MR ROCKITT in
; lessons #LESSON38, #LESSON39, #LESSON40, #LESSON43, #LESSON44, #LESSON47,
; #LESSON48, #LESSON49, #LESSON53 and #LESSON54.
@label=CLIST62
b59646 DEFW 25700    ; Go to...
 59648 DEFB 18,10    ; ...the trophy cabinet on the middle floor
 59650 DEFW 25700    ; Go to...
 59652 DEFB 28,10    ; ...the Science Lab doorway
 59654 DEFW 61555    ; Restart the command list, or tell the kids to sit down
                     ; and signal that...
 59656 DEFB 12       ; ...the teacher has arrived at the Science Lab
 59657 DEFW 25700    ; Go to...
 59659 DEFB 40,10    ; ...the Science Lab blackboard
 59661 DEFW 61696    ; Wipe the board, conduct the class

; Command list #b64: Walkabout - WITHIT
;
; Used by MR WITHIT in lessons #LESSON38, #LESSON48, #LESSON50 and #LESSON53.
@label=CLIST64
b59663 DEFW 25700    ; Go to...
 59665 DEFB 77,14    ; ...the assembly hall stage
 59667 DEFW 25700    ; Go to...
 59669 DEFB 32,3     ; ...the Revision Library
 59671 DEFW 61624    ; Restart the command list

; Command list #b66: Walkabout - WACKER
;
; Used by MR WACKER when it's PLAYTIME.
@label=CLIST66
b59673 DEFW 25700    ; Go to...
 59675 DEFB 76,3     ; ...the head's study
; This command list continues at #R59677.

; Command list #b68: Walkabout - teacher
;
; Used by MR WITHIT when it's PLAYTIME, by MR ROCKITT in lessons #LESSON37,
; #LESSON41 and #LESSON45 (and when it's DINNER or PLAYTIME), and by MR CREAK
; in lesson #LESSON42 (and when it's DINNER or PLAYTIME). Command list
; #R59673(#b66) also continues here.
@label=CLIST68
b59677 DEFW 25815    ; Go to a random location
 59679 DEFW 61624    ; Restart the command list

; Command list #b70: Walkabout - WACKER
;
; Used by MR WACKER in lessons #LESSON38, #LESSON40, #LESSON42, #LESSON44,
; #LESSON46, #LESSON48, #LESSON51 and #LESSON54.
@label=CLIST70
b59681 DEFW 25700    ; Go to...
 59683 DEFB 76,3     ; ...the head's study
 59685 DEFW 25700    ; Go to...
 59687 DEFB 79,14    ; ...the assembly hall stage
 59689 DEFW 25700    ; Go to...
 59691 DEFB 3,17     ; ...the cloak room
 59693 DEFW 25700    ; Go to...
 59695 DEFB 79,14    ; ...the assembly hall stage
 59697 DEFW 61624    ; Restart the command list

; Command list #b72: Assembly - WACKER
;
; Used by MR WACKER in lesson #LESSON52.
@label=CLIST72
b59699 DEFW 25700    ; Go to...
 59701 DEFB 76,3     ; ...the head's study
 59703 DEFW 25700    ; Go to...
 59705 DEFB 85,10    ; ...the top of the stairs leading down to the stage
 59707 DEFW 63501    ; Restart the command list unless it's time for assembly
 59709 DEFW 25700    ; Go to...
 59711 DEFB 77,14    ; ...the assembly hall stage
 59713 DEFW 62032    ; Tell the kids they're in detention
; This command list continues at #R59715.

; Command list #b74: Head's study - WACKER
;
; Used by MR WACKER in lessons #LESSON37, #LESSON39, #LESSON41, #LESSON43,
; #LESSON45, #LESSON47, #LESSON49 and #LESSON53. Command list #R59699(#b72)
; also continues here.
@label=CLIST74
b59715 DEFW 25700    ; Go to...
 59717 DEFB 81,3     ; ...the head's study
 59719 DEFW 31952    ; Move about until...
 59721 DEFB 0        ; ...the bell rings

; Unused
s59722 DEFS 2

; Command list #b76: Close the gate and the door - ALBERT
;
; Used by ALBERT when it's not PLAYTIME.
@label=CLIST76
b59724 DEFW 25700    ; Go to...
 59726 DEFB 112,17   ; ...the middle of the boys' playground
 59728 DEFW 62599    ; Move forward 10 places in the command list (to #R59741)
                     ; unless...
 59730 DEFB 16       ; ...the skool gate is open
 59731 DEFW 25700    ; Go to...
 59733 DEFB 130,17   ; ...the skool gate
 59735 DEFW 62620    ; Wait till everybody has gone past the skool gate
 59737 DEFW 29052    ; Move the...
 59739 DEFB 16,0     ; ...skool gate (close it)
@label=GATESHUT
 59741 DEFW 62599    ; Move forward 10 places in the command list (to #R59754)
                     ; unless...
 59743 DEFB 8        ; ...the boys' skool door is open
 59744 DEFW 25700    ; Go to...
 59746 DEFB 95,17    ; ...the boys' skool door
 59748 DEFW 62620    ; Wait till everybody has gone past the skool door
 59750 DEFW 29052    ; Move the...
 59752 DEFB 8,0      ; ...boys' skool door (close it)
@label=DOORSHUT
 59754 DEFW 25700    ; Go to...
 59756 DEFB 104,17   ; ...the position just right of the tree
 59758 DEFW 63447    ; Put the next address in ALBERT's buffer, making him...
 59760 DEFW 62668    ; ...keep an eye out for an escaping ERIC
 59762 DEFW 31952    ; Move about until...
 59764 DEFB 0        ; ...the bell rings

; Command list #b78: Open the door and the gate - ALBERT
;
; Used by ALBERT when it's PLAYTIME.
@label=CLIST78
b59765 DEFW 25700    ; Go to...
 59767 DEFB 95,17    ; ...the boys' skool door
 59769 DEFW 29052    ; Move the...
 59771 DEFB 8,1      ; ...boys' skool door (open it)
 59773 DEFW 25700    ; Go to...
 59775 DEFB 132,17   ; ...the skool gate
 59777 DEFW 29052    ; Move the...
 59779 DEFB 16,1     ; ...skool gate (open it)
 59781 DEFW 62560    ; Make the next command be the start of the command list
 59783 DEFW 25815    ; Go to a random location
 59785 DEFW 61624    ; Restart the command list

; Unused
s59787 DEFB 0

; Command list #b80: Assembly - teacher
;
; Used by MR WITHIT, MR ROCKITT and MR CREAK in lesson #LESSON52.
@label=CLIST80
b59788 DEFW 25700    ; Go to...
 59790 DEFB 62,17    ; ...the position just left of where the teachers stand
                     ; during assembly
 59792 DEFW 25700    ; Go to...
 59794 DEFB 65,17    ; ...the position where the teachers stand during assembly
 59796 DEFW 61658    ; Stand still or perform assembly duty
 59798 DEFW 31952    ; Move about until...
 59800 DEFB 0        ; ...the bell rings

; Command list #b82: Blue Room - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON37, #LESSON38, #LESSON41 and #LESSON42.
@label=CLIST82
b59801 DEFW 25700    ; Go to...
 59803 DEFB 21,3     ; ...the Blue Room
 59805 DEFW 31952    ; Move about until...
 59807 DEFB 10       ; ...the teacher arrives at the Blue Room
 59808 DEFW 26304    ; Find a seat and sit down
 59810 DEFW 61440    ; Grass and answer questions

; Command list #b84: Yellow Room - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON39, #LESSON40, #LESSON43 and #LESSON44.
@label=CLIST84
b59812 DEFW 25700    ; Go to...
 59814 DEFB 56,3     ; ...the Yellow Room
 59816 DEFW 31952    ; Move about until...
 59818 DEFB 11       ; ...the teacher arrives at the Yellow Room
 59819 DEFW 26304    ; Find a seat and sit down
 59821 DEFW 61440    ; Grass and answer questions

; Command list #b86: Science Lab - EINSTEIN
;
; Used by EINSTEIN in lessons #LESSON45, #LESSON46, #LESSON47, #LESSON48 and
; #LESSON49.
@label=CLIST86
b59823 DEFW 25700    ; Go to...
 59825 DEFB 51,10    ; ...the Science Lab
 59827 DEFW 31952    ; Move about until...
 59829 DEFB 12       ; ...the teacher arrives at the Science Lab
 59830 DEFW 26304    ; Find a seat and sit down
 59832 DEFW 61440    ; Grass and answer questions

; Unused
s59834 DEFS 6

; Message #b3: 'Please Sir I cannot tell a lie . . '
;
; Used as a submessage of messages #R59944(#b18), #R61425(#b81), #R65392(#b83),
; #R60657(#b87), #R60668(#b88) and #R61410(#b137).
@label=MSG003
t59840 DEFM "Please Sir I cannot tell a lie . . "
 59875 DEFB 0                                     ; End marker

; Message #b4: '#SPACE9' (9 spaces)
;
; Used as a submessage of messages #R59944(#b18), #R65268(#b73), #R65136(#b74),
; #R61418(#b75), #R65232(#b76), #R65275(#b77), #R64633(#b78), #R65531(#b79),
; #R65512(#b80), #R61425(#b81), #R64608(#b82), #R65392(#b83), #R65488(#b84),
; #R60657(#b87), #R60668(#b88), #R60691(#b89), #R60722(#b90), #R60771(#b91),
; #R60814(#b92), #R60822(#b93), #R60835(#b94), #R60861(#b96) and
; #R60995(#b138).
@label=MSG004
t59876 DEFM "         " ; 9 spaces
 59885 DEFB 0           ; End marker

; Message #b13: '[12]0 LINES^[5]'
;
; Used by the routine at #R29716.
@label=MSG013
t59886 DEFB 12        ; #R58112(#b12): number of lines being given (divided by
                      ; 10)
 59887 DEFM "0 LINES"
 59894 DEFB 2         ; Newline
 59895 DEFB 5         ; #R32650(#b5): '{lines recipient}'
 59896 DEFB 0         ; End marker

; Message #b14: '[5]^ '
;
; Used by the routine at #R29896.
@label=MSG014
t59897 DEFB 5        ; #R32650(#b5): combination number or letter
 59898 DEFB 2        ; Newline
 59899 DEFM " "
 59900 DEFB 0        ; End marker

; Message #b145: 'ATE'
;
; Used by the routine at #R62032.
@label=MSG145
t59901 DEFM "ATE"
 59904 DEFB 0        ; End marker

; Message #b15: 'NOW {DON'T }^DO IT AGAIN'
;
; Used by the routine at #R30102.
@label=MSG015
t59905 DEFM "NOW "
 59909 DEFB 9             ; #R59975(#b9): 'DON'T '
 59910 DEFB 2             ; Newline
 59911 DEFM "DO IT AGAIN"
 59922 DEFB 0             ; End marker

; Message #b8: 'THE '
;
; Used as a submessage of messages #R60036(#b33), #R60062(#b35), #R60262(#b49),
; #R60369(#b55), #R60493(#b64), #R60526(#b66), #R60565(#b69), #R22260(#b101),
; #R22432(#b102), #R22445(#b103), #R22456(#b104), #R22467(#b105),
; #R22482(#b106), #R22493(#b107), #R22216(#b108), #R22503(#b109),
; #R22509(#b110) and #R22223(#b248), and the unused message at #R60480.
@label=MSG008
t59923 DEFM "THE "
 59927 DEFB 0        ; End marker

; Message #b16: '{{teacher}}^{{room}}'
;
; Used by the routine at #R32433.
@label=MSG016
t59928 DEFB 6        ; #R32648(#b6): '{teacher}'
 59929 DEFB 2        ; Newline
 59930 DEFB 5        ; #R32650(#b5): '{room}'
 59931 DEFB 0        ; End marker

; Message #b63: 'DEMO.MODE^ '
;
; Used by the routine at #R32433.
@label=MSG063
t59932 DEFM "DEMO.MODE"
 59941 DEFB 2           ; Newline
 59942 DEFM " "
 59943 DEFB 0           ; End marker

; Message #b18: '{Please Sir I cannot tell a lie . . }{ERIC} is not here{9sp}'
;
; Used by the routine at #R61696.
@label=MSG018
t59944 DEFB 3         ; #R59840(#b3): 'Please Sir I cannot tell a lie . . '
 59945 DEFB 31        ; #R61397(#b31): 'ERIC'
 59946 DEFM " is not"
 59953 DEFM " here"
 59958 DEFB 4         ; #R59876(#b4): '#SPACE9' (9 spaces)
 59959 DEFB 0         ; End marker

; Message #b19: '{DON'T }BE^LATE AGAIN'
;
; Used by the routine at #R61696.
@label=MSG019
t59960 DEFB 9            ; #R59975(#b9): 'DON'T '
 59961 DEFM "BE"
 59963 DEFB 2            ; Newline
 59964 DEFM "LATE AGAIN"
 59974 DEFB 0            ; End marker

; Message #b9: 'DON'T '
;
; Used as a submessage of messages #R59905(#b15), #R59960(#b19), #R60506(#b65),
; #R60609(#b72), #R60626(#b85), #R60638(#b86) and #R60921(#b97), and the unused
; message at #R60480.
@label=MSG009
t59975 DEFM "DON'T "
 59981 DEFB 0        ; End marker

; Message #b20: 'STAY TILL I^DISMISS YOU'
;
; Used by the routine at #R61696.
@label=MSG020
t59982 DEFM "STAY TILL I"
 59993 DEFB 2             ; Newline
 59994 DEFM "DISMISS YOU"
 60005 DEFB 0             ; End marker

; Message #b142: ' THE '
;
; Used as a submessage of messages #R65007(#b0), #R60194(#b44), #R60206(#b45),
; #R60217(#b46), #R60229(#b47), #R60244(#b48) and #R60861(#b96).
@label=MSG142
t60006 DEFM " THE "
 60011 DEFB 0        ; End marker

; Message #b143: 'i hate ^'
;
; Used as a submessage of messages #R60383(#b56), #R60390(#b57), #R60397(#b58),
; #R60403(#b59) and #R60406(#b60).
@label=MSG143
t60012 DEFM "i hate "
 60019 DEFB 2         ; Newline
 60020 DEFB 0         ; End marker

; Message #b32: 'ARTESIAN^WELLS'
;
; Used by the routine at #R26752.
@label=MSG032
t60021 DEFM "ARTESIAN"
 60029 DEFB 2          ; Newline
 60030 DEFM "WELLS"
 60035 DEFB 0          ; End marker

; Message #b33: '{THE }DOLDRUMS^ '
;
; Used by the routine at #R26752.
@label=MSG033
t60036 DEFB 8          ; #R59923(#b8): 'THE '
 60037 DEFM "DOLDRUMS"
 60045 DEFB 2          ; Newline
 60046 DEFM " "
 60047 DEFB 0          ; End marker

; Message #b34: 'TASTY^GEYSERS'
;
; Used by the routine at #R26752.
@label=MSG034
t60048 DEFM "TASTY"
 60053 DEFB 2         ; Newline
 60054 DEFM "GEYSERS"
 60061 DEFB 0         ; End marker

; Message #b35: '{THE }GREEN^REVOLUTION'
;
; Used by the routine at #R26752.
@label=MSG035
t60062 DEFB 8            ; #R59923(#b8): 'THE '
 60063 DEFM "GREEN"
 60068 DEFB 2            ; Newline
 60069 DEFM "REVOLUTION"
 60079 DEFB 0            ; End marker

; Message #b36: 'TREACLE^MINING'
;
; Used by the routine at #R26752.
@label=MSG036
t60080 DEFM "TREACLE"
 60087 DEFB 2         ; Newline
 60088 DEFM "MINING"
 60094 DEFB 0         ; End marker

; Message #b37: 'FROG FARMING^ '
;
; Used by the routine at #R26752.
@label=MSG037
t60095 DEFM "FROG FARMING"
 60107 DEFB 2              ; Newline
 60108 DEFM " "
 60109 DEFB 0              ; End marker

; Message #b38: 'HEAVY WATER^ '
;
; Used by the routine at #R26752.
@label=MSG038
t60110 DEFM "HEAVY WATER"
 60121 DEFB 2             ; Newline
 60122 DEFM " "
 60123 DEFB 0             ; End marker

; Message #b39: 'HOLOGRAMS &^LASERS'
;
; Used by the routine at #R26752.
@label=MSG039
t60124 DEFM "HOLOGRAMS &"
 60135 DEFB 2             ; Newline
 60136 DEFM "LASERS"
 60142 DEFB 0             ; End marker

; Message #b40: 'DNA^ '
;
; Used by the routine at #R26752.
@label=MSG040
t60143 DEFM "DNA"
 60146 DEFB 2        ; Newline
 60147 DEFM " "
 60148 DEFB 0        ; End marker

; Message #b41: 'VAMPIRE^BATS'
;
; Used by the routine at #R26752.
@label=MSG041
t60149 DEFM "VAMPIRE"
 60156 DEFB 2         ; Newline
 60157 DEFM "BATS"
 60161 DEFB 0         ; End marker

; Message #b42: 'NUCLEAR^FUSION'
;
; Used by the routine at #R26752.
@label=MSG042
t60162 DEFM "NUCLEAR"
 60169 DEFB 2         ; Newline
 60170 DEFM "FUSION"
 60176 DEFB 0         ; End marker

; Message #b43: 'BACTERIA^AS PETS'
;
; Used by the routine at #R26752.
@label=MSG043
t60177 DEFM "BACTERIA"
 60185 DEFB 2          ; Newline
 60186 DEFM "AS PETS"
 60193 DEFB 0          ; End marker

; Message #b44: 'ATTILA{ THE }^HUN'
;
; Used by the routine at #R26752.
@label=MSG044
t60194 DEFM "ATTILA"
 60200 DEFB 142      ; #R60006(#b142): ' THE '
 60201 DEFB 2        ; Newline
 60202 DEFM "HUN"
 60205 DEFB 0        ; End marker

; Message #b45: 'ERIC{ THE }RED^ '
;
; Used by the routine at #R26752.
@label=MSG045
t60206 DEFM "ERIC"
 60210 DEFB 142      ; #R60006(#b142): ' THE '
 60211 DEFM "RED"
 60214 DEFB 2        ; Newline
 60215 DEFM " "
 60216 DEFB 0        ; End marker

; Message #b46: 'NOGGIN{ THE }^NOG'
;
; Used by the routine at #R26752.
@label=MSG046
t60217 DEFM "NOGGIN"
 60223 DEFB 142      ; #R60006(#b142): ' THE '
 60224 DEFB 2        ; Newline
 60225 DEFM "NOG"
 60228 DEFB 0        ; End marker

; Message #b47: 'IVAN{ THE }^TERRIBLE'
;
; Used by the routine at #R26752.
@label=MSG047
t60229 DEFM "IVAN"
 60233 DEFB 142        ; #R60006(#b142): ' THE '
 60234 DEFB 2          ; Newline
 60235 DEFM "TERRIBLE"
 60243 DEFB 0          ; End marker

; Message #b48: 'ETHELRED{ THE }^UNREADY'
;
; Used by the routine at #R26752.
@label=MSG048
t60244 DEFM "ETHELRED"
 60252 DEFB 142        ; #R60006(#b142): ' THE '
 60253 DEFB 2          ; Newline
 60254 DEFM "UNREADY"
 60261 DEFB 0          ; End marker

; Message #b49: '{THE }LUDDITES^ '
;
; Used by the routine at #R26752.
@label=MSG049
t60262 DEFB 8          ; #R59923(#b8): 'THE '
 60263 DEFM "LUDDITES"
 60271 DEFB 2          ; Newline
 60272 DEFM " "
 60273 DEFB 0          ; End marker

; Message #b50: 'IAMBIC^PENTAMETERS'
;
; Used by the routine at #R26752.
@label=MSG050
t60274 DEFM "IAMBIC"
 60280 DEFB 2             ; Newline
 60281 DEFM "PENTAMETERS"
 60292 DEFB 0             ; End marker

; Message #b51: 'ELOCUTION^AINT ARF FUN'
;
; Used by the routine at #R26752.
@label=MSG051
t60293 DEFM "ELOCUTION"
 60302 DEFB 2              ; Newline
 60303 DEFM "AINT ARF FUN"
 60315 DEFB 0              ; End marker

; Message #b52: 'SUGAR AND^SPICE'
;
; Used by the routine at #R26752.
@label=MSG052
t60316 DEFM "SUGAR AND"
 60325 DEFB 2           ; Newline
 60326 DEFM "SPICE"
 60331 DEFB 0           ; End marker

; Message #b53: 'TONE POEMS^ '
;
; Used by the routine at #R26752.
@label=MSG053
t60332 DEFM "TONE POEMS"
 60342 DEFB 2            ; Newline
 60343 DEFM " "
 60344 DEFB 0            ; End marker

; Message #b54: 'ELEMENTARY^ASTROPHYSICS'
;
; Used by the routine at #R26752.
@label=MSG054
t60345 DEFM "ELEMENTARY"
 60355 DEFB 2              ; Newline
 60356 DEFM "ASTROPHYSICS"
 60368 DEFB 0              ; End marker

; Message #b55: '{THE }BARD OF^AVON'
;
; Used by the routine at #R26752.
@label=MSG055
t60369 DEFB 8         ; #R59923(#b8): 'THE '
 60370 DEFM "BARD OF"
 60377 DEFB 2         ; Newline
 60378 DEFM "AVON"
 60382 DEFB 0         ; End marker

; Message #b56: '{i hate ^}girls'
;
; Used by the routine at #R26752.
@label=MSG056
t60383 DEFB 143      ; #R60012(#b143): 'i hate ^'
 60384 DEFM "girls"
 60389 DEFB 0        ; End marker

; Message #b57: '{i hate ^}skool'
;
; Used by the routine at #R26752.
@label=MSG057
t60390 DEFB 143      ; #R60012(#b143): 'i hate ^'
 60391 DEFM "skool"
 60396 DEFB 0        ; End marker

; Message #b58: '{i hate ^}mafs'
;
; Used by the routine at #R26752.
@label=MSG058
t60397 DEFB 143      ; #R60012(#b143): 'i hate ^'
 60398 DEFM "mafs"
 60402 DEFB 0        ; End marker

; Message #b59: '{i hate ^}{MR WACKER}'
;
; Used by the routine at #R26752.
@label=MSG059
t60403 DEFB 143      ; #R60012(#b143): 'i hate ^'
 60404 DEFB 21       ; #R61267(#b21): 'MR WACKER'
 60405 DEFB 0        ; End marker

; Message #b60: '{i hate ^}groan-ups'
;
; Used by the routine at #R26752.
@label=MSG060
t60406 DEFB 143         ; #R60012(#b143): 'i hate ^'
 60407 DEFM "groan-ups"
 60416 DEFB 0           ; End marker

; Message #b61: 'who's Sam^Cruise?'
;
; Used by the routine at #R26752.
@label=MSG061
t60417 DEFM "who's Sam"
 60426 DEFB 2           ; Newline
 60427 DEFM "Cruise?"
 60434 DEFB 0           ; End marker

; Message #b139: 'SIT DOWN '
;
; Used as a submessage of messages #R60580(#b70), #R60814(#b92), #R60822(#b93),
; #R60835(#b94) and #R60859(#b95).
@label=MSG139
t60435 DEFM "SIT DOWN "
 60444 DEFB 0           ; End marker

; Message #b140: 'SIT '
;
; Used as a submessage of message #R60565(#b69) and the unused message at
; #R60480.
@label=MSG140
t60445 DEFM "SIT "
 60449 DEFB 0        ; End marker

; Message #b141: 'GET '
;
; Used as a submessage of messages #R60493(#b64), #R60526(#b66), #R60538(#b67)
; and #R60554(#b68).
@label=MSG141
t60450 DEFM "GET "
 60454 DEFB 0        ; End marker

; Message #b62: 'YOU ARE NOT^ALLOWED HERE'
;
; Used by the routine at #R32062.
@label=MSG062
t60455 DEFM "YOU ARE NOT"
 60466 DEFB 2              ; Newline
 60467 DEFM "ALLOWED HERE"
 60479 DEFB 0

; '{DON'T }{SIT }ON^{THE }STAIRS' (unused)
;
; ERIC can't sit on the stairs in Back to Skool.
@label=XM_LINES0
t60480 DEFB 9        ; #R59975(#b9): 'DON'T '
 60481 DEFB 140      ; #R60445(#b140): 'SIT '
 60482 DEFM "ON"
 60484 DEFB 2        ; Newline
 60485 DEFB 8        ; #R59923(#b8): 'THE '
 60486 DEFM "STAIRS"
 60492 DEFB 0        ; End marker

; Message #b64: '{GET }OFF^{THE }PLANTS'
;
; Used by the routine at #R32062.
@label=MSG064
t60493 DEFB 141      ; #R60450(#b141): 'GET '
 60494 DEFM "OFF"
 60497 DEFB 2        ; Newline
 60498 DEFB 8        ; #R59923(#b8): 'THE '
 60499 DEFM "PLANTS"
 60505 DEFB 0        ; End marker

; Message #b65: '{DON'T }RIDE^BIKES IN HERE'
;
; Used by the routine at #R32062.
@label=MSG065
t60506 DEFB 9               ; #R59975(#b9): 'DON'T '
 60507 DEFM "RIDE"
 60511 DEFB 2               ; Newline
 60512 DEFM "BIKES IN HERE"
 60525 DEFB 0               ; End marker

; Message #b66: '{GET }OFF^{THE }FLOOR'
;
; Used by the routine at #R32062.
@label=MSG066
t60526 DEFB 141      ; #R60450(#b141): 'GET '
 60527 DEFM "OFF"
 60530 DEFB 2        ; Newline
 60531 DEFB 8        ; #R59923(#b8): 'THE '
 60532 DEFM "FLOOR"
 60537 DEFB 0        ; End marker

; Message #b67: '{GET }BACK^TO SCHOOL'
;
; Used by the routine at #R32062.
@label=MSG067
t60538 DEFB 141         ; #R60450(#b141): 'GET '
 60539 DEFM "BACK"
 60543 DEFB 2           ; Newline
 60544 DEFM "TO SCHOOL"
 60553 DEFB 0           ; End marker

; Message #b68: '{GET }ALONG^NOW'
;
; Used by the routine at #R32062.
@label=MSG068
t60554 DEFB 141      ; #R60450(#b141): 'GET '
 60555 DEFM "ALONG"
 60560 DEFB 2        ; Newline
 60561 DEFM "NOW"
 60564 DEFB 0        ; End marker

; Message #b69: '{SIT }FACING^{THE }STAGE'
;
; Used by the routine at #R32062.
@label=MSG069
t60565 DEFB 140      ; #R60445(#b140): 'SIT '
 60566 DEFM "FACING"
 60572 DEFB 2        ; Newline
 60573 DEFB 8        ; #R59923(#b8): 'THE '
 60574 DEFM "STAGE"
 60579 DEFB 0        ; End marker

; Message #b70: 'NOW^{SIT DOWN }'
;
; Used by the routine at #R32062.
@label=MSG070
t60580 DEFM "NOW"
 60583 DEFB 2        ; Newline
 60584 DEFB 139      ; #R60435(#b139): 'SIT DOWN '
 60585 DEFB 0        ; End marker

; Message #b71: 'COME ALONG^YOU MONSTER'
;
; Used by the routine at #R32062.
@label=MSG071
t60586 DEFM "COME ALONG"
 60596 DEFB 2             ; Newline
 60597 DEFM "YOU MONSTER"
 60608 DEFB 0             ; End marker

; Message #b72: '{DON'T }KEEP^ME WAITING'
;
; Used by the routine at #R32062.
@label=MSG072
t60609 DEFB 9            ; #R59975(#b9): 'DON'T '
 60610 DEFM "KEEP"
 60614 DEFB 2            ; Newline
 60615 DEFM "ME WAITING"
 60625 DEFB 0            ; End marker

; Message #b85: '{DON'T }TELL^TALES'
;
; Used by the routine at #R61487.
@label=MSG085
t60626 DEFB 9        ; #R59975(#b9): 'DON'T '
 60627 DEFM "TELL"
 60631 DEFB 2        ; Newline
 60632 DEFM "TALES"
 60637 DEFB 0        ; End marker

; Message #b86: '{DON'T }TOUCH^BLACKBOARDS'
;
; Used by the routines at #R24175 and #R61696.
@label=MSG086
t60638 DEFB 9             ; #R59975(#b9): 'DON'T '
 60639 DEFM "TOUCH"
 60644 DEFB 2             ; Newline
 60645 DEFM "BLACKBOARDS"
 60656 DEFB 0             ; End marker

; Message #b87: '{Please Sir I cannot tell a lie . . }{ERIC} hit me{9sp}'
;
; Used by the routine at #R61696.
@label=MSG087
t60657 DEFB 3         ; #R59840(#b3): 'Please Sir I cannot tell a lie . . '
 60658 DEFB 31        ; #R61397(#b31): 'ERIC'
 60659 DEFM " hit me"
 60666 DEFB 4         ; #R59876(#b4): '#SPACE9' (9 spaces)
 60667 DEFB 0         ; End marker

; Message #b88: '{Please Sir I cannot tell a lie . . }[7] wrote on the
; board{9sp}'
;
; Used by the routine at #R61696. #IF({fix}<3)//This message is never actually
; used in the game, because of a #BUG#noBlackboardTales(bug) in the section of
; code at #R61852.//
@label=MSG088
t60668 DEFB 3            ; #R59840(#b3): 'Please Sir I cannot tell a lie . . '
 60669 DEFB 7            ; #R32656(#b7): '{grassee}'
 60670 DEFM " wrote on"
 60679 DEFM " the board"
 60689 DEFB 4            ; #R59876(#b4): '#SPACE9' (9 spaces)
 60690 DEFB 0            ; End marker

; Message #b89: 'START REVISING FOR YOUR EXAMS{9sp}'
;
; Used by the routine at #R61533.
@label=MSG089
t60691 DEFM "START REVISING "
 60706 DEFM "FOR YOUR EXAMS"
 60720 DEFB 4                 ; #R59876(#b4): '#SPACE9' (9 spaces)
 60721 DEFB 0                 ; End marker

; Message #b90: 'START READING AT THE NEXT CHAPTER IN YOUR BOOKS{9sp}'
;
; Used by the routine at #R61533.
@label=MSG090
t60722 DEFM "START READING AT THE "
 60743 DEFM "NEXT CHAPTER IN YOUR BOOKS"
 60769 DEFB 4                            ; #R59876(#b4): '#SPACE9' (9 spaces)
 60770 DEFB 0                            ; End marker

; Message #b91: 'WRITE AN ESSAY TITLED 'WHY I LOVE SCHOOL'{9sp}'
;
; Used by the routine at #R61533.
@label=MSG091
t60771 DEFM "WRITE AN ESSAY TITLED "
 60793 DEFM "'WHY I LOVE SCHOOL'"
 60812 DEFB 4                        ; #R59876(#b4): '#SPACE9' (9 spaces)
 60813 DEFB 0                        ; End marker

; Message #b92: '{SIT DOWN }CHAPS{9sp}'
;
; Used by the routine at #R61555.
@label=MSG092
t60814 DEFB 139      ; #R60435(#b139): 'SIT DOWN '
 60815 DEFM "CHAPS"
 60820 DEFB 4        ; #R59876(#b4): '#SPACE9' (9 spaces)
 60821 DEFB 0        ; End marker

; Message #b93: '{SIT DOWN }MY CHERUBS{9sp}'
;
; Used by the routine at #R61555.
@label=MSG093
t60822 DEFB 139          ; #R60435(#b139): 'SIT DOWN '
 60823 DEFM "MY CHERUBS"
 60833 DEFB 4            ; #R59876(#b4): '#SPACE9' (9 spaces)
 60834 DEFB 0            ; End marker

; Message #b94: '{SIT DOWN }YOU LITTLE ANARCHISTS{9sp}'
;
; Used by the routine at #R61555.
@label=MSG094
t60835 DEFB 139                     ; #R60435(#b139): 'SIT DOWN '
 60836 DEFM "YOU LITTLE ANARCHISTS"
 60857 DEFB 4                       ; #R59876(#b4): '#SPACE9' (9 spaces)
 60858 DEFB 0                       ; End marker

; Message #b95: '{SIT DOWN }'
;
; Used by the routine at #R61555.
@label=MSG095
t60859 DEFB 139      ; #R60435(#b139): 'SIT DOWN '
 60860 DEFB 0        ; End marker

; Message #b96: 'YOU'RE ALL IN DETENTION UNTIL I FIND OUT WHO
; [10]{#SPACE()THE#SPACE}[11]{9sp}'
;
; Used by the routine at #R62032.
@label=MSG096
t60861 DEFM "YOU'RE ALL IN DETENTION"
 60884 DEFM " UNTIL I FIND OUT WHO "
 60906 DEFB 10                        ; #R32652(#b10): '{verb}'
 60907 DEFB 142                       ; #R60006(#b142): ' THE '
 60908 DEFB 11                        ; #R32654(#b11): '{noun}'
 60909 DEFB 4                         ; #R59876(#b4): '#SPACE9' (9 spaces)
 60910 DEFB 0                         ; End marker

; Message #b144: 'KIDNAPPED'
;
; Used by the routine at #R62032.
@label=MSG144
t60911 DEFM "KIDNAPPED"
 60920 DEFB 0           ; End marker

; Message #b97: '{DON'T }HIT^YOUR MATES'
;
; Used by the routines at #R24263 and #R61696.
@label=MSG097
t60921 DEFB 9            ; #R59975(#b9): 'DON'T '
 60922 DEFM "HIT"
 60925 DEFB 2            ; Newline
 60926 DEFM "YOUR MATES"
 60936 DEFB 0            ; End marker

; Message #b98: '{MR WACKER}^HE'S ESCAPING'
;
; Used by the routine at #R62668.
@label=MSG098
t60937 DEFB 21              ; #R61267(#b21): 'MR WACKER'
 60938 DEFB 2               ; Newline
 60939 DEFM "HE'S ESCAPING"
 60952 DEFB 0               ; End marker

; Message #b99: 'YOU HAVE 10000 LINES{ {ERIC}{9sp}YOU'RE EXPELLED{9sp}}'
;
; Used by the routine at #R62815.
@label=MSG099
t60953 DEFM "YOU HAVE 10000 LINES"
 60973 DEFB 138                    ; #R60995(#b138): ' {ERIC}{9sp}YOU'RE
                                   ; EXPELLED{9sp}'
 60974 DEFB 0                      ; End marker

; Message #b100: 'YOU ARE NOT A BIRD{ {ERIC}{9sp}YOU'RE EXPELLED{9sp}}'
;
; Used by the routine at #R62815.
@label=MSG100
t60975 DEFM "YOU ARE NOT A BIRD"
 60993 DEFB 138                  ; #R60995(#b138): ' {ERIC}{9sp}YOU'RE
                                 ; EXPELLED{9sp}'
 60994 DEFB 0                    ; End marker

; Message #b138: ' {ERIC}{9sp}YOU'RE EXPELLED{9sp}'
;
; Used as a submessage of messages #R60953(#b99) and #R60975(#b100).
@label=MSG138
t60995 DEFM " "
 60996 DEFB 31                ; #R61397(#b31): 'ERIC'
 60997 DEFB 4                 ; #R59876(#b4): '#SPACE9' (9 spaces)
 60998 DEFM "YOU'RE EXPELLED"
 61013 DEFB 4                 ; #R59876(#b4): '#SPACE9' (9 spaces)
 61014 DEFB 0                 ; End marker

; Message #b128: 'PLAYTIME'
;
; Used by the routine at #R32433.
@label=MSG128
t61015 DEFM "PLAYTIME"
 61023 DEFB 0          ; End marker

; Message #b129: 'ASSEMBLY'
;
; Used by the routine at #R32433.
@label=MSG129
t61024 DEFM "ASSEMBLY"
 61032 DEFB 0          ; End marker

; Message #b130: 'DINNER'
;
; Used by the routine at #R32433.
@label=MSG130
t61033 DEFM "DINNER"
 61039 DEFB 0        ; End marker

; Message #b131: 'LIBRARY'
;
; Used by the routine at #R32433.
@label=MSG131
t61040 DEFM "LIBRARY"
 61047 DEFB 0         ; End marker

; Message #b132: 'SCIENCE LAB'
;
; Used by the routine at #R32433.
@label=MSG132
t61048 DEFM "SCIENCE LAB"
 61059 DEFB 0             ; End marker

; Message #b133: 'BLUE ROOM'
;
; Used by the routine at #R32433.
@label=MSG133
t61060 DEFM "BLUE ROOM"
 61069 DEFB 0           ; End marker

; Message #b134: 'YELLOW ROOM'
;
; Used by the routine at #R32433.
@label=MSG134
t61070 DEFM "YELLOW ROOM"
 61081 DEFB 0             ; End marker

; Message #b135: 'REVISION'
;
; Used by the routine at #R32433.
@label=MSG135
t61082 DEFM "REVISION"
 61090 DEFB 0          ; End marker

; Message #b146: 'SET FIRE TO'
;
; Used by the routine at #R62032.
@label=MSG146
t61091 DEFM "SET FIRE TO"
 61102 DEFB 0             ; End marker

; Message #b147: 'BLEW UP'
;
; Used by the routine at #R62032.
@label=MSG147
t61103 DEFM "BLEW UP"
 61110 DEFB 0         ; End marker

; Message #b148: 'IS MAKING RUDE PHONE CALLS TO'
;
; Used by the routine at #R62032.
@label=MSG148
t61111 DEFM "IS MAKING RUDE PHONE CALLS TO"
 61140 DEFB 0                               ; End marker

; Message #b149: 'IS BLACKMAILING'
;
; Used by the routine at #R62032.
@label=MSG149
t61141 DEFM "IS BLACKMAILING"
 61156 DEFB 0                 ; End marker

; Message #b150: 'SQUASHED'
;
; Used by the routine at #R62032.
@label=MSG150
t61157 DEFM "SQUASHED"
 61165 DEFB 0          ; End marker

; Message #b151: 'POISONED'
;
; Used by the routine at #R62032.
@label=MSG151
t61166 DEFM "POISONED"
 61174 DEFB 0          ; End marker

; Message #b152: 'GOLDFISH'
;
; Used by the routine at #R62032.
@label=MSG152
t61175 DEFM "GOLDFISH"
 61183 DEFB 0          ; End marker

; Message #b153: 'SCHOOL CAT'
;
; Used by the routine at #R62032.
@label=MSG153
t61184 DEFM "SCHOOL CAT"
 61194 DEFB 0            ; End marker

; Message #b154: 'LATIN MASTER'
;
; Used by the routine at #R62032.
@label=MSG154
t61195 DEFM "LATIN MASTER"
 61207 DEFB 0              ; End marker

; Message #b155: 'LOLLIPOP LADY'
;
; Used by the routine at #R62032.
@label=MSG155
t61208 DEFM "LOLLIPOP LADY"
 61221 DEFB 0               ; End marker

; Message #b156: 'PTA'
;
; Used by the routine at #R62032.
@label=MSG156
t61222 DEFM "PTA"
 61225 DEFB 0        ; End marker

; Message #b157: 'CARETAKER'S BUDGIE'
;
; Used by the routine at #R62032.
@label=MSG157
t61226 DEFM "CARETAKER'S BUDGIE"
 61244 DEFB 0                    ; End marker

; Message #b158: 'MILK MONITOR'
;
; Used by the routine at #R62032.
@label=MSG158
t61245 DEFM "MILK MONITOR"
 61257 DEFB 0              ; End marker

; Message #b159: 'HEAD BOY'
;
; Used by the routine at #R62032.
@label=MSG159
t61258 DEFM "HEAD BOY"
 61266 DEFB 0          ; End marker

; Message #b21: 'MR WACKER'
;
; Used by the routine at #R21152. Also used as a submessage of messages
; #R60403(#b59) and #R60937(#b98).
@label=MSG021
t61267 DEFM "MR WACKER"
 61276 DEFB 0           ; End marker
 61277 DEFS 3

; Message #b22: 'MR WITHIT'
;
; Used by the routines at #R21152 and #R32433.
@label=MSG022
t61280 DEFM "MR WITHIT"
 61289 DEFB 0           ; End marker
 61290 DEFS 3

; Message #b23: 'MR ROCKITT'
;
; Used by the routines at #R21152 and #R32433.
@label=MSG023
t61293 DEFM "MR ROCKITT"
 61303 DEFB 0            ; End marker
 61304 DEFS 2

; Message #b24: 'MR CREAK'
;
; Used by the routines at #R21152 and #R32433.
@label=MSG024
t61306 DEFM "MR CREAK"
 61314 DEFB 0          ; End marker
 61315 DEFS 4

; Message #b25: 'MISS TAKE'
;
; Used by the routine at #R21152.
@label=MSG025
t61319 DEFM "MISS TAKE"
 61328 DEFB 0           ; End marker
 61329 DEFS 3

; Message #b26: 'ALBERT'
;
; Used by the routine at #R21152.
@label=MSG026
t61332 DEFM "ALBERT"
 61338 DEFB 0        ; End marker
 61339 DEFS 6

; Message #b27: 'BOY WANDER'
;
; Used by the routines at #R21152 and #R29716.
@label=MSG027
t61345 DEFM "BOY WANDER"
 61355 DEFB 0            ; End marker
 61356 DEFS 2

; Message #b28: 'ANGELFACE'
;
; Used by the routines at #R21152 and #R29716.
@label=MSG028
t61358 DEFM "ANGELFACE"
 61367 DEFB 0           ; End marker
 61368 DEFS 3

; Message #b29: 'EINSTEIN'
;
; Used by the routines at #R21152 and #R29716.
@label=MSG029
t61371 DEFM "EINSTEIN"
 61379 DEFB 0          ; End marker
 61380 DEFS 4

; Message #b30: 'HAYLEY'
;
; Used by the routines at #R21152 and #R29716.
@label=MSG030
t61384 DEFM "HAYLEY"
 61390 DEFB 0        ; End marker
 61391 DEFS 6

; Message #b31: 'ERIC'
;
; Used by the routines at #R21152 and #R29716. Also used as a submessage of
; messages #R59944(#b18), #R60657(#b87) and #R60995(#b138).
@label=MSG031
t61397 DEFM "ERIC"
 61401 DEFB 0        ; End marker
 61402 DEFS 8

; Message #b137: '{Please Sir I cannot tell a lie . . }it is '
;
; Used as a submessage of messages #R65268(#b73), #R61418(#b75), #R65275(#b77)
; and #R65531(#b79).
@label=MSG137
t61410 DEFB 3        ; #R59840(#b3): 'Please Sir I cannot tell a lie . . '
 61411 DEFM "it is "
 61417 DEFB 0        ; End marker

; Message #b75: '{{Please Sir I cannot tell a lie . . }it is }MT.[10]{9sp}'
;
; Used by the routine at #R61696.
@label=MSG075
t61418 DEFB 137      ; #R61410(#b137): '{Please Sir I cannot tell a lie . . }it
                     ; is '
 61419 DEFM "MT."
 61422 DEFB 10       ; #R32652(#b10): '{mountain}'
 61423 DEFB 4        ; #R59876(#b4): '#SPACE9' (9 spaces)
 61424 DEFB 0        ; End marker

; Message #b81: '{Please Sir I cannot tell a lie . . }it was in 1[11]{9sp}'
;
; Used by the routine at #R61696.
@label=MSG081
t61425 DEFB 3             ; #R59840(#b3): 'Please Sir I cannot tell a lie . . '
 61426 DEFM "it was in 1"
 61437 DEFB 11            ; #R32654(#b11): '{year}'
 61438 DEFB 4             ; #R59876(#b4): '#SPACE9' (9 spaces)
 61439 DEFB 0             ; End marker

; Control EINSTEIN during class
;
; Used by command lists #R59801(#b82), #R59812(#b84) and #R59823(#b86).
; Controls EINSTEIN from the moment after he sits down until the lesson ends.
;
; H #b208 (EINSTEIN)
@label=GRASSETC
c61440 LD A,(32640)  ; {Bit 3 of #R32640 is set by the routine at #R61463 when
 61443 BIT 3,A       ; it's EINSTEIN's turn to speak in class; is it his turn
                     ; now?}
 61445 RET Z         ; Return if not
@nowarn
 61446 LD BC,27147   ; {Direct control of EINSTEIN to the routine at #R27147
 61449 CALL 25503    ; (make character speak) and then return to #R61452
                     ; (below)}
@label=*
@rsub=LD HL,61440
*61452 LD L,3        ; {Reset the address of the primary command routine in
@ssub=LD (HL),61440%256
@rsub=LD (53248+3),HL
 61454 LD (HL),0     ; bytes #b3 and #b4 of EINSTEIN's buffer from #R61452 to
                     ; #R61440}
 61456 LD HL,32640   ; {Signal: EINSTEIN has finished speaking
 61459 RES 3,(HL)    ; }
 61461 RET           ;

; Unused
@rsub=!61462
s61462 DEFB 0

; Make EINSTEIN speak
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of the buffer of the teacher who is taking ERIC's class by the
; routine at #R61696. It is used to make EINSTEIN tell a tale.
;
; E Message number
; H Teacher's character number (#b201-#b203)
@label=SWOTSPK
c61463 LD A,E        ; #REGa=message number for EINSTEIN
@ssub=LD (53248+11),A
 61464 LD (53259),A  ; Place this in byte #b11 of EINSTEIN's buffer
; The address of this entry point is placed into bytes #b9 and #b10 of the
; buffer of the teacher who is taking ERIC's class by the routine at #R61696.
; It is used to make EINSTEIN answer the teacher's question.
@label=*
*61467 EX DE,HL      ;
 61468 LD HL,32640   ; {Set bit 3 at #R32640 to indicate that it's EINSTEIN's
 61471 SET 3,(HL)    ; turn to speak}
 61473 EX DE,HL      ;
 61474 LD L,9        ; {Replace the address of this routine in bytes #b9 and
@ssub=LD (HL),61478%256
@rsub=LD (HL),61478%256 ; #b10 of the teacher's buffer with #R61478 (below)
@rsub=INC L
@rsub=LD (HL),61478/256 ; }
 61476 LD (HL),38    ; #b10 of the teacher's buffer with #R61478 (below)}
; This entry point is used while the teacher is waiting for EINSTEIN to finish
; speaking.
@label=SWOTSPK0
 61478 LD A,(32640)  ; {Has EINSTEIN finished speaking yet?
 61481 BIT 3,A       ; }
 61483 RET NZ        ; Return if not
 61484 JP 25488      ; Otherwise terminate this interruptible subcommand, thus
                     ; restoring control to the main routine at #R61696

; Make a teacher give lines to EINSTEIN or the kid he grassed up
;
; Used by the routine at #R61696. Makes a teacher give lines to EINSTEIN (for
; telling tales) 84 times out of 256, or give lines to the kid EINSTEIN grassed
; up (if any) the rest of the time.
;
; B Reprimand message number
; C Character number of the kid to give lines to (#b206, #b208 or #b210)
; H Teacher's character number (#b201-#b203)
@label=SWOTLINES
c61487 CALL 25233    ; #REGa=random number
 61490 CP 84         ; Shall we give lines to EINSTEIN for telling tales?
 61492 JR C,61500    ; Jump if so
 61494 LD A,C        ; #REGa=character number of the kid to give lines to
 61495 CP 208        ; Was EINSTEIN telling the teacher that ERIC is not in
                     ; class?
 61497 RET Z         ; Return if so (there is no scapegoat to give lines to)
 61498 JR 61504      ;
*61500 LD A,208      ; #b208=EINSTEIN
 61502 LD B,85       ; Message #R60626(#b85): DON'T TELL TALES
; This entry point also is used by the routine at #R61696.
*61504 PUSH HL       ;
 61505 CALL 29716    ; Give lines to EINSTEIN or the kid he grassed up
 61508 POP HL        ;
 61509 RET           ;

; Unused
@rsub=!61510
s61510 DEFS 2

; Check whether ERIC and EINSTEIN are in class
;
; Used by the routine at #R61696. If EINSTEIN is in class, this routine returns
; to the caller with the zero flag set if and only if ERIC is present too. If
; EINSTEIN is not yet sitting down in class, it makes the teacher wait until he
; shows up.
;
; H Teacher's character number (#b201-#b203)
@label=INCLASS
c61512 LD A,(53248)  ; Pick up EINSTEIN's current animatory state in #REGa
 61515 CP 52         ; #AS52: Is EINSTEIN sitting down (i.e. in class)?
 61517 JP Z,32021    ; Check on ERIC if so
@keep
 61520 LD DE,65533   ; #REGde=-3
 61523 POP BC        ; Drop the return address from the stack into #REGbc
 61524 EX DE,HL      ; {Set #REGde to the address of the #S/CALL/ #R61512
 61525 ADD HL,BC     ; instruction in the calling routine
 61526 EX DE,HL      ; }
 61527 LD L,3        ; {Place this address into bytes #b3 and #b4 of the
 61529 LD (HL),E     ; teacher's buffer, so that we keep returning here (and
 61530 INC L         ; the teacher stands still) until EINSTEIN arrives in
 61531 LD (HL),D     ; class}
 61532 RET           ; Return to the character-moving routine at #R25296

; Make a teacher tell the class what to do
;
; Used by the routine at #R61696. Makes the teacher choose between messages
; #R60691(#b89), #R60722(#b90) and #R60771(#b91) (in a lesson without ERIC and
; EINSTEIN, or a lesson with no question-and-answer session).
;
; H Teacher's character number (#b201-#b204)
@label=TELLCLASS
c61533 CALL 25233    ; #REGa=random number
 61536 CP 240        ; {Set the carry flag if #REGa<#b240, and set the zero
 61538 BIT 7,A       ; flag if #REGa<#b128}
 61540 LD E,91       ;
 61542 JR NC,61548   ; Jump if it's essay time (#REGa>=#b240)
 61544 JR Z,61547    ; Jump if it's book-reading time (#REGa<#b128)
 61546 DEC E         ; It's revision time (#b128<=#REGa<#b240)
*61547 DEC E         ;
; Now #REGe holds the appropriate message number:
; .
; #TABLE(default)
; { =h #REGe      | =h Message }
; { #R60691(#b89) | START REVISING FOR YOUR EXAMS }
; { #R60722(#b90) | START READING AT THE NEXT CHAPTER IN YOUR BOOKS }
; { #R60771(#b91) | WRITE AN ESSAY TITLED 'WHY I LOVE SCHOOL' }
; TABLE#
@nowarn
*61548 LD BC,27144   ; {Redirect control to the routine at #R27144 (make
 61551 JP 25503      ; character speak), then return control to the calling
                     ; routine}

; Unused
@rsub=!61554
s61554 DEFB 0

; Restart the command list or make a teacher tell the kids to sit down
;
; Used by the teachers' command lists #R58368(#b22), #R58880(#b24),
; #R59612(#b58), #R59629(#b60) and #R59646(#b62). Restarts the teacher's
; command list if it's not time to start the class yet; otherwise makes the
; teacher tell the kids to sit down.
;
; H Teacher's character number (#b201-#b204)
@label=RSTTELLSIT
@ssub=LD A,(32739+1)
c61555 LD A,(32740)  ; Collect the MSB of the lesson clock (which starts at
                     ; #b16)
 61558 CP 12         ; Is it time to tell the kids to sit down yet?
 61560 JR C,61568    ; Jump if so
 61562 LD L,29       ; {Otherwise signal that the command list is to be
 61564 SET 0,(HL)    ; restarted}
 61566 JR 61591      ;
*61568 CALL 25213    ; Collect the event indicator for the start of the lesson
                     ; (#b8, #b9, #b10, #b11 or #b12) from the command list
 61571 LD C,A        ; Save the event indicator in #REGc briefly
 61572 CALL 31887    ; Has the lesson already started?
 61575 JR NZ,61591   ; Jump if so (the teacher must have just returned to the
                     ; classroom doorway after hunting down the truant ERIC)
 61577 LD A,C        ; {Restore the event indicator to #REGa, and signal that
 61578 CALL 31896    ; the lesson has started}
 61581 LD A,H        ; #REGa=teacher's character number
 61582 SUB 109       ; {#REGe=#R60814(#b92), #R60822(#b93), #R60835(#b94) or
 61584 LD E,A        ; #R60859(#b95) (appropriate SIT DOWN message for this
                     ; teacher)}
@nowarn
 61585 LD BC,27144   ; {Redirect control to the routine at #R27144 (make
 61588 CALL 25503    ; character speak) and then return to #R61591 (below)}
*61591 JP 25484      ; Move to the next command in the command list

; Unused
@rsub=!61594
s61594 DEFB 0

; Make a teacher find the truant ERIC
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of a teacher's buffer by the routine at #R61631. It makes the
; teacher run after and stalk ERIC until he goes to wherever he should be (the
; dinner hall, the assembly hall, or the classroom).
;
; H Teacher's character number (#b201-#b203)
@label=SEEKERIC
c61595 LD L,29       ; {Set bit 7 of byte #b29 of the teacher's buffer, making
 61597 SET 7,(HL)    ; him run}
 61599 LD L,0        ; Byte #b0 of the teacher's buffer holds his animatory
                     ; state
 61601 BIT 0,(HL)    ; Is the teacher midstride?
 61603 JP NZ,25950   ; Finish the stride if so
 61606 LD L,29       ;
; Now check whether a command list restart has been requested. This request
; will have been made for one of two reasons: the lesson in which the teacher
; started chasing ERIC has ended, and the next lesson has just begun (see
; #R63309); or ERIC is now where he should be (see below). In either case, the
; chase is over.
*61608 BIT 0,(HL)    ; Has the teacher's command list been marked for a
                     ; restart?
 61610 JP NZ,32399   ; If so, do some post-chase cleanup, remove the address of
                     ; this routine from bytes #b9 and #b10 of the teacher's
                     ; buffer, and restart the command list
 61613 CALL 32021    ; Is ERIC where he should be?
 61616 JP NZ,25944   ; Continue the chase if not
 61619 SET 0,(HL)    ; Otherwise set bit 0 of byte #b29 of the teacher's
                     ; buffer, indicating that the command list should be
                     ; restarted
 61621 JR 61608      ; Restart the command list now that the chase is over

; Unused
@rsub=!61623
s61623 DEFB 0

; Restart the command list
;
; Used by the routines at #R62572 and #R63501, and by command lists
; #R53820(#b18), #R57956(#b28), #R57970(#b30), #R58828(#b42), #R58844(#b44),
; #R59663(#b64), #R59673(#b66), #R59677(#b68), #R59681(#b70) and #R59765(#b78).
;
; H Character number (#b183-#b209)
@label=RESTART
c61624 LD L,29       ; {Set bit 0 of byte #b29 of the character's buffer,
 61626 SET 0,(HL)    ; indicating to the routine at #R25296 that the command
                     ; list should be restarted}
 61628 JP 25484      ; Move to the next command in the command list (which will
                     ; be the first command)

; Make a teacher find ERIC if he's absent during dinner
;
; Used by command list #R57970(#b30). Makes the teacher run after and stalk
; ERIC until he goes to the dinner hall.
;
; H #b200 (MR WACKER) or #b201 (MR WITHIT)
@label=DINDUTY
@ssub=LD DE,32739+1
c61631 LD DE,32740   ; Point #REGde at the MSB of the lesson clock (which
                     ; starts off at #b16)
 61634 LD A,(DE)     ; Pick this up in #REGa
 61635 CP 12         ; Is ERIC supposed to be in the dinner hall by now?
 61637 JR NC,61654   ; Jump if not
@ssub=LD E,32640%256
 61639 LD E,128      ; {Set bit 6 at #R32640, indicating that ERIC should be in
 61641 EX DE,HL      ; the dinner hall now
 61642 SET 6,(HL)    ;
 61644 EX DE,HL      ; }
 61645 CALL 32021    ; Reset the zero flag if ERIC is not in the dinner hall
; This entry point is used by the routines at #R61696 and #R61658.
@nowarn
*61648 LD BC,61595   ; {Redirect control to the routine at #R61595 (find ERIC)
 61651 CALL NZ,25503 ; if ERIC is not where he should be, then return to
                     ; #R61654 (below)}
*61654 JP 25484      ; Move to the next command in the command list

; Unused
@rsub=!61657
s61657 DEFB 0

; Control a teacher during assembly
;
; Used by command list #R59788(#b80). Makes the teacher stand still until the
; period is nearly over, and also perform assembly duty (if the teacher is MR
; WITHIT).
;
; H Teacher's character number (#b201-#b203)
@label=ASSEMDUTY
@ssub=LD A,(32739+1)
c61658 LD A,(32740)  ; Collect the MSB of the lesson clock (which starts off at
                     ; #b16)
 61661 CP 2          ; Has the teacher been standing still long enough (the
                     ; routine at #R62032 sets the MSB of the lesson clock to 1
                     ; after MR WACKER has finished his detention speech)?
 61663 JP C,25484    ; Move to the next command in the command list if so
 61666 CP 11         ; Is it time for the kids to sit down for assembly yet?
 61668 RET NC        ; Return if not
 61669 LD A,H        ; #REGa=teacher's character number
 61670 CP 201        ; Is this MR WITHIT (who does assembly duty)?
 61672 RET NZ        ; Return if not
 61673 LD DE,32640   ; {Set bits 6 (ERIC should be here now) and 7 (time to sit
 61676 LD A,(DE)     ; down: this is checked by command lists #R57942(#b20),
 61677 OR 192        ; #R59151(#b40) and #R58862(#b88)) at #R32640
 61679 LD (DE),A     ; }
@ssub=LD A,(32739+1)
 61680 LD A,(32740)  ; #REGa=MSB of the lesson clock
 61683 CP 10         ; Is it time to find ERIC if he's absent?
 61685 RET NC        ; Return if not
 61686 CALL 32021    ; Is ERIC in the assembly hall?
 61689 RET Z         ; Return if so
 61690 JP 61648      ; Go and find him otherwise

; Unused
@rsub=!61693
s61693 DEFS 3

; Make a teacher conduct a class
;
; Used by command lists #R58368(#b22), #R58880(#b24), #R59612(#b58),
; #R59629(#b60) and #R59646(#b62) to make a teacher conduct a class (after
; having walked to the edge of the blackboard).
;
; H Teacher's character number (#b201-#b204)
@label=DOCLASS
c61696 LD A,(32736)  ; #R32736 holds the current lesson descriptor
 61699 AND 240       ; {Keep only the teacher-identifying bits and shift them
 61701 RLCA          ; into bits 0-3
 61702 RLCA          ;
 61703 RLCA          ;
 61704 RLCA          ; }
 61705 ADD A,199     ; Now #REGa=character number of the teacher taking ERIC's
                     ; class (#b201-#b203)
 61707 CP H          ; Is this teacher conducting ERIC's class?
 61708 JR Z,61760    ; Jump if so
; This teacher is not conducting ERIC's class, so he has it easy: wipe the
; board, write on the board (maybe), tell the class what to do, and pace up and
; down.
@nowarn
 61710 LD BC,26639   ; {Redirect control to the routine at #R26639 (wipe board)
 61713 CALL 25503    ; and return to #R61716 (below) when done}
@label=*
*61716 LD L,1        ; Point #REGhl at byte #b1 of the teacher's buffer
 61718 LD A,(HL)     ; #REGa=teacher's x-coordinate
 61719 ADD A,3       ; #REGa=x-coordinate of the middle of the blackboard
 61721 LD L,11       ; {Place this in byte #b11 ready for the routine at
 61723 LD (HL),A     ; #R25581}
@nowarn
 61724 LD BC,25581   ; {Redirect control to the routine at #R25581 (walk to a
 61727 CALL 25503    ; location) and return to #R61730 (below) when done}
@label=*
*61730 CALL 25233    ; #REGa=random number
@nowarn
 61733 LD BC,26752   ; Routine at #R26752: write on board
 61736 CP 160        ; Should the teacher write on the board?
 61738 CALL NC,25503 ; If so, redirect control to the routine at #R26752 and
                     ; return to #R61741 (below) when done
@label=*
*61741 CALL 61533    ; Tell the class what to do
*61744 LD L,1        ; Point #REGhl at byte #b1 of the teacher's buffer
 61746 LD A,(HL)     ; #REGa=teacher's x-coordinate
 61747 XOR 3         ; Now #REGa=x-coordinate of the location 3 paces behind
                     ; the teacher
 61749 LD L,11       ; {Place this in byte #b11 of the teacher's buffer, ready
 61751 LD (HL),A     ; for the routine at #R25581}
@nowarn
 61752 LD BC,25581   ; {Redirect control to the routine at #R25581 (walk to a
 61755 CALL 25503    ; location) and return to #R61758 (below) when done}
@label=*
*61758 JR 61744      ; Make the teacher pace up (or down) again
; The teacher is taking ERIC's class. This is a far more difficult task.
*61760 LD A,(32640)  ; {Set bit 6 at #R32640, indicating that ERIC should be in
 61763 SET 6,A       ; class now
 61765 LD (32640),A  ; }
 61768 CALL 61512    ; Are ERIC and EINSTEIN both in class?
 61771 JR Z,61813    ; Jump if so
; ERIC is not in class, but EINSTEIN is. EINSTEIN must therefore grass.
@nowarn
*61773 LD BC,61463   ; Routine at #R61463: make EINSTEIN talk
 61776 LD E,18       ; #R59944(#b18): Please Sir...ERIC is not here
 61778 CALL 25503    ; Make EINSTEIN grass on ERIC, and return to #R61781
                     ; (below) when done
@label=*
*61781 LD C,208      ; #b208=EINSTEIN
 61783 CALL 61487    ; Give lines to EINSTEIN (maybe)
 61786 CALL 32021    ; Set the zero flag if ERIC is in class
 61789 LD A,(32640)  ; #R32640 holds various game status flags
 61792 JR Z,61802    ; Jump if ERIC is in class
 61794 SET 7,A       ; {Set bit 7 at #R32640: the teacher's next absence
 61796 LD (32640),A  ; reprimand should be 'STAY TILL I DISMISS YOU'}
 61799 JP 61648      ; Go and find ERIC
; ERIC is in class now, having shown up while EINSTEIN was grassing on him for
; being absent.
*61802 RLCA          ; Push bit 7 of #R32640 into the carry flag
 61803 LD B,20       ; #R59982(#b20): STAY TILL I DISMISS YOU
 61805 LD A,210      ; #b210=ERIC
 61807 JR C,61810    ; Jump if the teacher's already had to chase or give lines
                     ; to ERIC for being late or leaving early
 61809 DEC B         ; #REGb=#R59960(#b19): DON'T BE LATE AGAIN
*61810 CALL 61504    ; Give ERIC lines
*61813 LD A,(32640)  ; {Set bits 6 (ERIC should be in class) and 7 (the
 61816 OR 192        ; teacher's next absence reprimand should be 'STAY TILL I
 61818 LD (32640),A  ; DISMISS YOU') at #R32640}
 61821 CALL 61512    ; Is ERIC in class?
 61824 JR NZ,61773   ; Jump if not
; Now is EINSTEIN's chance to grass on ERIC for hitting him.
 61826 CALL 25233    ; #REGa=random number
 61829 CP 220        ; Should EINSTEIN tell tales?
 61831 JR C,61852    ; Jump if not
 61833 LD E,87       ; #R60657(#b87): Please Sir...ERIC hit me
@nowarn
 61835 LD BC,61463   ; {Redirect control to the routine at #R61463 (make
 61838 CALL 25503    ; EINSTEIN talk) and return to #R61841 (below) when done}
@keep
@label=*
*61841 LD BC,25042   ; #REGb=#R60921(#b97): DON'T HIT YOUR MATES; #REGc=#b210
                     ; (ERIC)
 61844 CALL 61487    ; Give EINSTEIN or ERIC lines
 61847 CALL 61512    ; Is ERIC in class?
 61850 JR NZ,61773   ; Jump if not
; Now is EINSTEIN's opportunity to grass on someone for writing on the
; blackboard. #IF({fix}<3)||However, the opportunity is wasted, because the
; #S/CALL/ to #R26453 (at #R61852 below) returns a valid blackboard ID only if
; the character is standing within four spaces of the left edge of the
; blackboard, which is not the case when the teacher is waiting for EINSTEIN to
; grass (teachers stand at the right edge of the blackboard for that, more than
; four spaces away). This is a #BUG#noBlackboardTales(bug).||
@rfix=CALL 28658
*61852 CALL 26453    ; Collect information about the blackboard
@rfix=               ; {Point #REGbc at the second byte of the blackboard's
@ignoreua
 61855 INC B         ; {The intent here is to point #REGbc at the second byte
@rfix=               ; buffer, which holds the character number of the person
 61856 LD C,B        ; of the blackboard's buffer, which holds the character
@rfix=/              ; who last wrote on it}
 61857 LD B,127      ; number of the person who last wrote on it; instead,
                     ; #REGbc points at #w32516 if the teacher is on the top
                     ; floor, or #w32515 if he's on the middle floor}
@rfix=               ; #REGa=character number of the person who last wrote on
@rfix=/              ; the board
@ignoreua
 61859 LD A,(BC)     ; Now #REGa is supposed to hold the character number of
                     ; the person who last wrote on the board; instead it holds
                     ; the contents of #w32515 or #w32516 (bytes #b3 and #b4 of
                     ; the #R32512(SRB)), which will never be #b206 or #b210
 61860 CP 210        ; Did ERIC write on the board?
@rfix=JR Z,61877     ; Jump if so
 61862 JR Z,61879    ; Jump if so (this jump is never made)
 61864 CP 206        ; Or did BOY WANDER?
@rfix=               ; Jump if not
 61866 JR NZ,61899   ; Jump if not (this jump is always made)
 61868 CALL 25233    ; #REGa=random number
 61871 CP 195        ; Should EINSTEIN blame BOY WANDER for writing on the
                     ; board?
@rfix=LD A,27        ; #R61345(#b27): 'BOY WANDER'
 61873 LD A,206      ; #b206=BOY WANDER
 61875 JR C,61879    ; Jump if so
@rfix=*:LD A,31      ; #R61397(#b31): 'ERIC'
 61877 LD A,210      ; Blame ERIC instead
@rfix=               ; Place the message number of the scapegoat's name into
@rfix=               ; #R32656
*61879 LD (32656),A  ; Place the character number of the scapegoat into #R32656
@nowarn
 61882 LD BC,61463   ; Routine at #R61463: make EINSTEIN talk
 61885 LD E,88       ; #R60668(#b88): Please Sir...[#R32656(#b7)] wrote on the
                     ; board
 61887 CALL 25503    ; Redirect control to the routine at #R61463 and return to
                     ; #R61890 (below) when done
@label=*
@rfix=               ; #REGa=#b27 (BOY WANDER) or #b31 (ERIC)
@rfix=ADD A,179      ; #REGa=#b206 (BOY WANDER) or #b210 (ERIC)
*61890 LD A,(32656)  ; #REGa=#b206 (BOY WANDER) or #b210 (ERIC)
 61893 LD C,A        ; Copy the scapegoat's character number to #REGc
 61894 LD B,86       ; #R60638(#b86): DON'T TOUCH BLACKBOARDS
 61896 CALL 61487    ; Give lines to EINSTEIN, ERIC or BOY WANDER
; The next section of code makes the teacher wipe the board. Note that the
; teacher may already have wiped the board at this point, and therefore will
; not be standing at the right edge of the board (the correct location to begin
; wiping); this is a #BUG#doubleWipe(bug).
@nowarn
*61899 LD BC,26639   ; {Redirect control to the routine at #R26639 (wipe board)
 61902 CALL 25503    ; and return to #R61905 (below) when done}
@label=*
*61905 LD L,1        ; Point #REGhl at byte #b1 of the teacher's buffer
 61907 LD A,(HL)     ; #REGa=teacher's x-coordinate
 61908 ADD A,3       ; #REGa=x-coordinate of the middle of the blackboard
 61910 LD L,11       ; {Place this in byte #b11 of the teacher's buffer, ready
 61912 LD (HL),A     ; for the routine at #R25581}
@nowarn
 61913 LD BC,25581   ; {Redirect control to the routine at #R25581 (walk to
 61916 CALL 25503    ; location) and return to #R61919 (below) when done}
; The teacher has wiped the board, and is ready to start the class.
@label=*
*61919 CALL 61512    ; Is ERIC in class?
*61922 JP NZ,61773   ; Jump if not
 61925 CALL 25233    ; #REGa=random number
@nowarn
 61928 LD BC,26752   ; Routine at #R26752: write on board
 61931 CP 184        ; Should the teacher write on the board?
 61933 CALL NC,25503 ; Redirect control to #R26752 if so, and return to #R61936
                     ; (below) when done
@label=*
*61936 CALL 61512    ; Is ERIC in class?
 61939 JR NZ,61922   ; Jump if not
 61941 CALL 25233    ; #REGa=random number
 61944 CP 232        ; Should this be a questions-and-answers lesson?
 61946 JR C,61972    ; Jump if so
; This is not going to be a questions-and-answers lesson.
 61948 CALL 61533    ; Tell the class what to do
*61951 CALL 61512    ; Is ERIC in class?
 61954 JR NZ,61922   ; Jump if not
 61956 LD L,1        ; Point #REGhl at byte #b1 of the teacher's buffer
 61958 LD A,(HL)     ; #REGa=teacher's x-coordinate
 61959 XOR 3         ; Now #REGa=x-coordinate of location three paces behind
                     ; the teacher
 61961 LD L,11       ; {Place this in byte #b11 of the teacher's buffer ready
 61963 LD (HL),A     ; for the routine at #R25581}
@nowarn
 61964 LD BC,25581   ; {Redirect control to the routine at #R25581 (walk to
 61967 CALL 25503    ; location) and return to #R61970 (below) when done}
@label=*
*61970 JR 61951      ; Check whether ERIC's in class, then pace up (or down)
                     ; again
; This is going to be a questions-and-answers lesson. Pick a question-answer
; word pair, and decide which word will be in the question, and which in the
; answer.
*61972 CALL 25233    ; #REGa=random number
 61975 AND 135       ; Keep only bits 0-2 (the word pair identifier) and bit 7
                     ; (indicates which word will be in the question)
 61977 PUSH AF       ; Save bit 7 for now
 61978 LD C,A        ;
 61979 LD DE,32652   ; Point #REGde at the first byte of message #R32652(#b10)
 61982 LD A,H        ; {Set #REGa=#R64654(#b160) (if the teacher is MR WITHIT),
 61983 SUB D         ; #R64892(#b176) (MR ROCKITT), or #R64792(#b192) (MR
 61984 ADD A,A       ; CREAK)
 61985 ADD A,A       ;
 61986 ADD A,A       ;
 61987 ADD A,A       ; }
 61988 OR C          ; Now #REGa holds the message number of a random mountain,
                     ; animal or king
 61989 LD (DE),A     ; Place this into #R32652 (message #R32652(#b10))
 61990 ADD A,8       ; Set #REGa to the message number of the corresponding
                     ; country, habitat or date
@ssub=LD E,32654%256
 61992 LD E,142      ; {Place this into #R32654 (the first byte of message
 61994 LD (DE),A     ; #R32654(#b11))}
 61995 POP AF        ; Restore the random bit 7 to #REGa
 61996 RLCA          ; Push it into the carry flag
 61997 SBC A,A       ; {Set #REGa to #R65268(#b73) or #R61418(#b75) (MR
 61998 ADD A,H       ; WITHIT), #R65275(#b77) or #R65531(#b79) (MR ROCKITT),
 61999 ADD A,H       ; #R61425(#b81) or #R65392(#b83) (MR CREAK); this is the
 62000 ADD A,A       ; message number for EINSTEIN's reply
 62001 ADD A,39      ; }
@ssub=LD (53248+11),A
 62003 LD (53259),A  ; Store it in byte #b11 of EINSTEIN's buffer, ready for
                     ; the routine at #R61467
 62006 INC A         ; {Set #REGe to #R65136(#b74) or #R65232(#b76) (MR
 62007 LD E,A        ; WITHIT), #R64633(#b78) or #R65512(#b80) (MR ROCKITT),
                     ; #R64608(#b82) or #R65488(#b84) (MR CREAK); this is the
                     ; message number for the teacher's question}
@nowarn
 62008 LD BC,27144   ; {Redirect control to the routine at #R27144 (make
 62011 CALL 25503    ; character speak) and return to #R62014 (below) when done
                     ; }
@nowarn
@label=*
*62014 LD BC,61467   ; {Redirect control to the routine at #R61467 (make
 62017 CALL 25503    ; EINSTEIN answer) and return to #R62020 (below) when done
                     ; }
@label=*
*62020 CALL 61512    ; Is ERIC in class?
 62023 JR Z,61972    ; Jump if so
 62025 JP 61773      ; Otherwise make EINSTEIN grass on the absent ERIC

; Unused
@rsub=!62028
s62028 DEFS 4

; Make MR WACKER put the kids in detention
;
; Used by command list #R59699(#b72). Builds a detention message (using a
; random noun and verb) and makes MR WACKER deliver it.
;
; H #b200 (MR WACKER)
@label=DETENTION
c62032 LD A,(32767)  ; #REGa=leftmost column of the play area on screen
 62035 CP 48         ; Is the stage off-screen to the right?
 62037 RET C         ; Return if so
 62038 CP 88         ; Is the stage off-screen to the left?
 62040 RET NC        ; Return if so
 62041 CALL 25233    ; #REGa=random number
 62044 LD DE,32652   ; Point #REGde at the first byte of message #R32652(#b10),
                     ; which will be the verb
 62047 LD L,A        ; Save the random number in #REGl briefly
 62048 AND 7         ; {Store the verb message number (#R60911(#b144),
 62050 ADD A,144     ; #R59901(#b145), #R61091(#b146), #R61103(#b147),
 62052 LD (DE),A     ; #R61111(#b148), #R61141(#b149), #R61157(#b150) or
                     ; #R61166(#b151)) at #R32652}
 62053 LD A,L        ; Restore the random number to #REGa
 62054 RRCA          ; {Set #REGa to another random number from 0 to 7
 62055 RRCA          ;
 62056 RRCA          ;
 62057 AND 7         ; }
@ssub=LD E,32654%256
 62059 LD E,142      ; Point #REGde at the first byte of message #R32654(#b11),
                     ; which will be the noun
 62061 ADD A,152     ; {Store the noun message number (#R61175(#b152),
 62063 LD (DE),A     ; #R61184(#b153), #R61195(#b154), #R61208(#b155),
                     ; #R61222(#b156), #R61226(#b157), #R61245(#b158) or
                     ; #R61258(#b159)) at #R32654}
 62064 LD E,96       ; Message #R60861(#b96): YOU'RE ALL IN DETENTION...
@nowarn
 62066 LD BC,27144   ; {Redirect control to the routine at #R27144 (make
 62069 CALL 25503    ; character speak) and then return to #R62072 (below)}
; Control of MR WACKER resumes here when he has finished delivering the
; detention message.
@label=*
*62072 EX DE,HL      ; Save MR WACKER's character number in #REGd briefly
 62073 LD HL,32640   ; {Reset bit 6 (ERIC no longer has to be in the assembly
 62076 RES 7,(HL)    ; hall) and bit 7 (the kids can stand up now) at #R32640
 62078 RES 6,(HL)    ; }
@rsub=!62080-62083
 62080 NOP           ; {
 62081 NOP           ;
 62082 NOP           ;
 62083 NOP           ; }
@ssub=LD L,32739%256+1
 62084 LD L,228      ; {Set the MSB of the lesson clock to 1 so that the bell
 62086 LD (HL),1     ; will ring soon}
 62088 EX DE,HL      ; Restore MR WACKER's character number (#b200) to #REGh
 62089 JP 25484      ; Move to the next command in the command list

; Unused
@rsub=!62092
s62092 DEFS 2

; Deal with ERIC when he's been knocked over
;
; Used by the routine at #R63405 when bit 7 at #R32763 is set (by the routine
; at #R29896). Note that the routine at #R26175 also sets bit 7 at #R32763 when
; someone sits in the seat occupied by ERIC, but in that case this routine is
; not called because bit 2 at #R32763 is still set (indicating that ERIC is
; sitting) and takes precedence; this is a #BUG#seat(bug).
@label=ERICHIT
c62094 LD HL,32733   ; #R32733 holds ERIC's knockout delay counter
 62097 LD A,(HL)     ; {Is this the first time this routine's been called since
 62098 AND A         ; ERIC was downed?}
 62099 JR Z,62112    ; Jump if so
 62101 DEC (HL)      ; {Otherwise wait a while before enabling ERIC to stand up
 62102 RET NZ        ; again}
@ssub=LD L,32755%256
 62103 LD L,243      ; #REGhl=#R32755 (ERIC's main action timer)
 62105 LD (HL),1     ; Set this to 1 so that the keyboard is checked on the
                     ; next pass through the main loop
@ssub=LD L,32763%256
 62107 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 62109 LD (HL),4     ; Set bit 2: ERIC is sitting or lying down; the routine at
                     ; #R62178 handles ERIC from this point
 62111 RET           ;
; ERIC has just been hit. Determine the manner of his descent to the floor.
*62112 LD (HL),40    ; Initialise ERIC's knockout delay counter at #R32733 to
                     ; 40
 62114 LD H,210      ; #b210=ERIC
 62116 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 62119 PUSH DE       ; Save ERIC's coordinates briefly
 62120 PUSH AF       ; Save ERIC's current animatory state briefly
 62121 CP 4          ; #AS4: Was ERIC sitting on a chair?
 62123 JR NZ,62134   ; Jump if not
 62125 CALL 32000    ; Get the identifier of ERIC's location
 62128 LD B,5        ; #AS5: ERIC sitting on the floor
 62130 CP 6          ; Is ERIC in a classroom in the boys' skool (#REGa=6, 7 or
                     ; 8)?
 62132 JR NC,62136   ; Jump if so
*62134 LD B,6        ; #AS6: ERIC lying on his back
*62136 POP AF        ; Restore ERIC's current animatory state to #REGa
 62137 POP DE        ; Restore ERIC's coordinates to #REGde
 62138 AND 128       ; Keep only the 'direction' bit (bit 7) of ERIC's current
                     ; animatory state
 62140 ADD A,B       ; #REGa=ERIC's new animatory state (sitting on the floor
                     ; or lying on his back)
 62141 CALL 24880    ; Update ERIC's animatory state and update the SRB
 62144 CALL 25248    ; Update the display
; Now to initialise the sound effect parameters.
*62147 LD HL,275     ; #REGh=#b1 (pitch adjustment), #REGl=#b19 (border colour
                     ; #S/XOR/ mask)
; This entry point is used by the routine at #R23907 with #REGh=#b2 and
; #REGl=#b22.
*62150 LD DE,0       ; #REGd=#b0 (duration), #REGe=#b0 (initial pitch)
 62153 LD A,2        ; #REGa=#b2 (initial border colour)
; This entry point is used by the routines at #R62178 (with #REGh=#b255,
; #REGl=#b23, #REGd=#b255, #REGe=#b255) and #R63861 (with #REGh=#b248,
; #REGl=#b18, #REGd=#b128, #REGe=#b0, #REGa=#b4).
*62155 XOR L         ; {Make a sound effect
 62156 OUT (254),A   ;
 62158 LD B,E        ;
*62159 DJNZ 62159    ;
 62161 LD B,A        ;
 62162 LD A,E        ;
 62163 ADD A,H       ;
 62164 LD E,A        ;
 62165 LD A,B        ;
 62166 DEC D         ;
 62167 JR NZ,62155   ; }
; This entry point is used by the routine at #R24477.
*62169 EI            ; Re-enable interrupts
 62170 LD A,1        ; {Reset the border colour to blue
 62172 OUT (254),A   ; }
 62174 RET           ;

; Unused
@rsub=!62175
s62175 DEFS 3

; Deal with ERIC when he's sitting or lying down
;
; Used by the routine at #R63405 when bit 2 at #R32763 is set (by the routine
; at #R62094, #R62423 or #R64460). Makes ERIC stand up if 'S' is pressed, or
; open a desk (and collect any contents) if 'O' is pressed.
@label=ERICSITLIE
c62178 LD HL,32755   ; #R32755 holds ERIC's main action timer
 62181 DEC (HL)      ; Is it time to deal with ERIC yet?
 62182 RET NZ        ; Return if not
 62183 LD A,(32734)  ; #R32734 holds #b255 if we're in demo mode, #b0 otherwise
 62186 INC A         ; Are we in demo mode?
 62187 JR NZ,62240   ; Jump if not
; We're in demo mode. Figure out ERIC's next move depending on what little boy
; no. 10 is doing.
 62189 CALL 63166    ; Exit demo mode and start a new game if a key was
                     ; pressed; otherwise return here with ERIC's animatory
                     ; state in #REGa
 62192 LD HL,50944   ; Point #REGhl at byte #b0 of little boy no. 10's buffer
 62195 CP 4          ; #AS4: Is ERIC sitting in a chair?
 62197 JR Z,62203    ; Jump if so
 62199 CP 133        ; #AS133: Is ERIC sitting on the floor facing right?
 62201 JR NZ,62216   ; Jump if not
*62203 ADD A,64      ; #REGa=#AS68 (little boy sitting on a chair) or #AS197
                     ; (little boy sitting on the floor facing right)
 62205 CP (HL)       ; Compare ERIC's animatory state with that of little boy
                     ; no. 10
 62206 LD HL,32732   ; #R32732 holds the counter that determines the delay
                     ; between little boy no. 10 standing up and ERIC standing
                     ; up
 62209 JR NZ,62214   ; Jump if ERIC's not doing what little boy no. 10 is doing
 62211 LD (HL),45    ; Initialise the stand-up delay counter at #R32732 to 45
 62213 RET           ;
*62214 DEC (HL)      ; Decrement the stand-up delay counter at #R32732
 62215 RET NZ        ; Return if it's not time for ERIC to stand up
*62216 LD HL,32763   ; #R32763 holds ERIC's status flags
 62219 LD (HL),0     ; Clear all of them (ERIC is no longer sitting or lying
                     ; down)
; This entry point is used by the routine at #R24175.
*62221 CALL 29012    ; Make a sound effect
 62224 LD H,210      ; #b210=ERIC
 62226 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 62229 AND 128       ; #REGa=#AS0(#b0/#b128): ERIC standing up
; This entry point is used by the routines at #R23907, #R24133, #R64242 and
; #R64416.
*62231 CALL 24880    ; Update ERIC's animatory state and location and update
                     ; the SRB
 62234 LD A,6        ; {Set ERIC's main action timer (at #R32755) to 6
 62236 LD (32755),A  ; }
 62239 RET           ;
; We're not in demo mode.
*62240 CALL 29118    ; Collect the code of the last key pressed in #REGa
 62243 RET Z         ; Return if no keys were pressed
 62244 RES 5,A       ; Normalise the code to upper case
 62246 CP 83         ; Was 'S' pressed?
 62248 JR Z,62216    ; Make ERIC stand up if so
 62250 CP 79         ; Was 'O' pressed?
 62252 RET NZ        ; Return if not
 62253 LD A,(53760)  ; #REGa=ERIC's animatory state
 62256 CP 4          ; #AS4: Is ERIC sitting in a chair?
 62258 RET NZ        ; Return if not
; ERIC is sitting in a chair and 'O' (open desk) was pressed. Compute the ID of
; the desk ERIC is sitting at so we can determine whether he's found the water
; pistol or the stinkbombs.
@ssub=LD A,(54784+1)
 62259 LD A,(54785)  ; Pick up the x-coordinate of whatever object is using
                     ; buffer #b214
 62262 CP 192        ; Is this buffer being used at the moment?
 62264 RET C         ; Return if so
@ssub=LD DE,(53760+1)
 62265 LD DE,(53761) ; Pick up ERIC's coordinates in #REGde
 62269 LD A,D        ; #REGa=ERIC's y-coordinate
 62270 CP 10         ; Is ERIC on the middle floor?
 62272 JR Z,62294    ; Jump if so
 62274 CP 3          ; Is ERIC on the top floor?
 62276 RET NZ        ; Return if not
 62277 LD A,E        ; #REGa=ERIC's x-coordinate
 62278 CP 22         ; Is ERIC in the Blue Room?
 62280 JR C,62290    ; Jump if so
 62282 SUB 27        ;
 62284 CP 34         ; Is ERIC in the Yellow Room?
 62286 JR C,62290    ; Jump if so
 62288 SUB 106       ;
*62290 SUB 9         ;
 62292 JR 62303      ;
*62294 LD A,E        ; #REGa=ERIC's x-coordinate
 62295 CP 53         ; Is ERIC in the Science lab?
 62297 JR C,62301    ; Jump if so
 62299 SUB 113       ;
*62301 SUB 2         ;
*62303 RRA           ;
 62304 LD B,A        ;
; At this point #REGb holds the identifier of the desk that ERIC's sitting at.
; .
; #TABLE(default,centre)
; { =h Desk IDs | =h Room }
; { #b1-#b6     | Blue Room }
; { #b7-#b12    | Yellow Room }
; { #b13-#b18   | Top-floor room in the girls' skool }
; { #b19-#b25   | Science Lab }
; { #b26-#b31   | Middle-floor room in the girls' skool }
; TABLE#
; .
; Now we check whether the water pistol has been placed in a desk yet.
 62305 LD HL,32730   ; #R32730 holds the ID of the desk containing the water
                     ; pistol
 62308 LD A,(HL)     ; {Has the water pistol been placed in a desk yet?
 62309 AND A         ; }
 62310 JR NZ,62326   ; Jump if so
; The water pistol hasn't been placed in a desk yet. Pick one at random that
; doesn't match the desk containing the stinkbombs.
*62312 CALL 25233    ; {#REGa=random desk ID from #b1 to #b31
 62315 AND 31        ;
 62317 JR Z,62312    ; }
@ssub=LD L,32731%256
 62319 LD L,219      ; #REGhl=#R32731 (which holds the ID of the desk
                     ; containing the stinkbombs)
 62321 CP (HL)       ; Is this the desk containing the stinkbombs?
 62322 JR Z,62312    ; Get another random desk ID if so
 62324 DEC L         ; {Otherwise place the newly determined ID of the desk
 62325 LD (HL),A     ; containing the water pistol into #R32730}
; Check whether ERIC has found the water pistol.
*62326 CP B          ; Is ERIC sitting at the desk that contains the water
                     ; pistol?
 62327 JR NZ,62345   ; Jump if not
 62329 LD (HL),0     ; Set #R32730 to 0 (the water pistol is not in any desk
                     ; now)
@ssub=LD L,32747%256
 62331 LD L,235      ; #REGhl=#R32747 (inventory flags)
 62333 LD A,(HL)     ; Pick these up in #REGa
 62334 AND 24        ; Keep only bits 3 and 4 (the pistol bits)
 62336 LD A,44       ; #AS44: animatory state of a desk lid
 62338 JR NZ,62377   ; Jump if ERIC already has a water pistol
 62340 SET 3,(HL)    ; Give ERIC a water pistol (full of water)
 62342 INC A         ; #AS45: animatory state of a desk lid with a water pistol
 62343 JR 62377      ;
; There was no water pistol in the desk. Check whether there are stinkbombs.
*62345 INC L         ; #REGhl=#R32731 (which holds the ID of the desk
                     ; containing the stinkbombs)
 62346 LD A,(HL)     ; {Have the stinkbombs been placed in a desk yet?
 62347 AND A         ; }
 62348 JR NZ,62364   ; Jump if so
; The stinkbombs haven't been placed in a desk yet. Pick one at random that
; doesn't match the desk containing the water pistol.
*62350 CALL 25233    ; {#REGa=random desk ID from #b1 to #b31
 62353 AND 31        ;
 62355 JR Z,62350    ; }
@ssub=LD L,32730%256
 62357 LD L,218      ; #REGhl=#R32730 (which holds the ID of the desk
                     ; containing the water pistol)
 62359 CP (HL)       ; Is this the desk containing the water pistol?
 62360 JR Z,62350    ; Get another random desk ID if so
 62362 INC L         ; {Otherwise place the newly determined ID of the desk
 62363 LD (HL),A     ; containing the stinkbombs into #R32731}
; Check whether ERIC has found the stinkbombs.
*62364 CP B          ; Compare the ID of the desk ERIC's sitting at (#REGa)
                     ; with the ID of the desk containing the stinkbombs
                     ; (#REGb)
 62365 LD A,44       ; #AS44: animatory state of a desk lid
 62367 JR NZ,62377   ; Jump if ERIC isn't sitting at the desk that contains the
                     ; stinkbombs
@ssub=LD L,32747%256
 62369 LD L,235      ; #REGhl=#R32747 (inventory flags)
 62371 LD A,(HL)     ; {Set bits 5-7, giving ERIC three stinkbombs
 62372 OR 224        ;
 62374 LD (HL),A     ; }
 62375 LD A,46       ; #AS46: animatory state of a desk lid with stinkbombs
; Now #REGa holds the animatory state of the desk lid: #AS44 (empty desk),
; #AS45 (with pistol), or #AS46 (with stinkbombs).
@ssub=LD HL,54784+19
*62377 LD HL,54803   ; Point #REGhl at byte #b19 of the desk lid's buffer
 62380 LD (HL),8     ; Initialise the counter determining how long the desk lid
                     ; stays up
 62382 DEC E         ; #REGe=x-coordinate of the desk lid in front of ERIC
 62383 CALL 30534    ; Update the SRB for the desk lid's appearance and place
                     ; address #R62386 (below) into bytes #b17 and #b18 of its
                     ; buffer
; The address of this entry point is placed into bytes #b17 and #b18 of the
; desk lid's buffer by the instruction above.
@label=*DESKLID
*62386 LD L,19       ; Byte #b19 of the desk lid's buffer holds the delay
                     ; counter that determines when the desk lid will shut
 62388 DEC (HL)      ; Decrement this counter
 62389 LD A,(HL)     ; Copy its current value to #REGa
 62390 JP Z,29903    ; Jump if it's time for the desk lid to close
 62393 SUB 6         ; Is it time for ERIC to collect the contents of the desk?
 62395 RET NZ        ; Return if not
 62396 LD L,A        ; #REGl=#b0
 62397 LD A,(HL)     ; #REGa=animatory state of a desk lid (with contents, if
                     ; any)
 62398 CP 44         ; #AS44: Is the desk empty?
 62400 RET Z         ; Return if so
; This entry point is used by the routines at #R24028, #R29462 and #R29568.
*62401 CALL 31746    ; Print the inventory
; This entry point is used by the routine at #R24348.
*62404 LD C,5        ; {Make a celebratory sound effect (ERIC has achieved
*62406 LD B,3        ; something rather handy)
@keep
 62408 LD HL,65303   ;
 62411 LD D,H        ;
 62412 LD E,H        ;
 62413 CALL 62155    ;
 62416 DEC C         ;
 62417 JR NZ,62406   ; }
 62419 RET           ;

; Unused
@rsub=!62420
s62420 DEFS 3

; 'S' pressed - sit (1)
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'S' is
; pressed.
@label=SIT
c62423 CALL 28240    ; Is ERIC on a staircase?
 62426 RET C         ; Return if so
 62427 LD A,4        ; {Set bit 2 of ERIC's status flags at #R32763: ERIC is
 62429 LD (32763),A  ; sitting}
 62432 JR 62460      ; Skip over the routine at #R62438

; Unused
@rsub=!62434
s62434 DEFS 4

; Make ERIC sit in a chair or on the floor
;
; Used by the routine at #R62460.
@label=SITDOWN
c62438 LD A,4        ; #AS4: ERIC sitting in a chair
; This entry point is used by the routine at #R62460 (with
; #REGa=#AS5(#b5/#b133)) to make ERIC sit on the floor.
*62440 PUSH AF       ; Save ERIC's new animatory state briefly
 62441 CALL 29012    ; Make a sitting-down sound effect
 62444 POP AF        ; Restore ERIC's new animatory state to #REGa
 62445 LD HL,32755   ; {Initialise ERIC's main action timer at #R32755 to 5
 62448 LD (HL),5     ; }
 62450 LD H,210      ; #b210=ERIC
; This entry point is used by the routines at #R57637 and #R62668.
*62452 PUSH AF       ; Save the character's new animatory state briefly
 62453 CALL 25012    ; Update the SRB for the character's current animatory
                     ; state
 62456 POP AF        ; Restore the character's new animatory state to #REGa
 62457 JP 24880      ; Update the character's animatory state and update the
                     ; SRB

; 'S' pressed - sit (2)
;
; Continues from #R62423. Makes ERIC sit on a chair (if he's standing beside
; one) or on the floor.
;
; H #b210 (ERIC)
@label=SIT2
c62460 CALL 26068    ; Check for chairs next to ERIC
 62463 AND A         ; Is ERIC standing beside one, facing left?
 62464 JR Z,62475    ; Jump if so
 62466 LD A,(53760)  ; #REGa=ERIC's animatory state
 62469 AND 128       ; Keep only the 'direction' bit (bit 7)
 62471 ADD A,5       ; #REGa=#AS5(#b5/#b133): ERIC sitting on the floor
 62473 JR 62440      ; Sit ERIC on the floor
*62475 CALL 26175    ; Knock anybody who's sitting in this chair out of the way
 62478 JR 62438      ; Sit ERIC on the chair

; Unused
@rsub=!62480
s62480 DEFS 3

; Collect a keypress during the game (or simulate one in demo mode)
;
; Called from the main loop at #R63210. Returns with #REGa holding the offset
; from the keypress table corresponding to the last (actual or simulated)
; keypress, or 0 if there was no (actual or simulated) keypress.
@label=GETINPUT
c62483 LD A,(32734)  ; #REGa=#b255 if we're in demo mode, #b0 otherwise
 62486 INC A         ; Are we in demo mode?
 62487 JP NZ,29178   ; Read the keyboard if not
; We're in demo mode.
 62490 LD HL,0       ; {Set the score (held at #R32741) and the number of lines
 62493 LD (32741),HL ; (held at #R32743) to 0
 62496 LD (32743),HL ; }
 62499 CALL 29118    ; Check for keypresses
 62502 JP NZ,63189   ; Start a new game if there was one
; No keys have been pressed, so figure out ERIC's next move by seeing what
; little boy no. 10 is doing.
@ssub=LD DE,(50944+1)
 62505 LD DE,(50945) ; Pick up the coordinates of little boy no. 10 in #REGde
 62509 LD H,210      ; #b210=ERIC
 62511 CALL 25843    ; Compare the coordinates of ERIC and little boy no. 10
 62514 AND A         ; Are they the same?
 62515 JR Z,62533    ; Jump if so
 62517 DEC A         ; Now #REGa=0 (ERIC is on a staircase facing up), 1 (on a
                     ; staircase facing down), 2 (to the right of little boy
                     ; no. 10), or 3 (to his left)
@nowarn
 62518 LD HL,23672   ; Point #REGhl at the LSB of the system variable FRAMES
 62521 XOR 2         ; Flip bit 1 of #REGa
; Now #REGa holds a value that will be translated into a simulated keypress
; depending on ERIC's location:
; .
; #TABLE(default,centre)
; { =h #REGa | =h ERIC's location                | =h Keypress }
; { 0        | To the right of little boy no. 10 | Left }
; { 1        | To the left of little boy no. 10  | Right }
; { 2        | On a staircase, facing up         | Up }
; { 3        | On a staircase, facing down       | Down }
; TABLE#
 62523 BIT 7,(HL)    ; Is the LSB of FRAMES < #b128?
 62525 JR Z,62529    ; Jump if so: this will be an upper case (fast) keypress
 62527 ADD A,4       ; 4<=#REGa<=7: force a lower case (slow) keypress
*62529 ADD A,A       ; {#REGa=#b80+2n where 0<=n<=7 (simulated keypress for
 62530 ADD A,80      ; LEFT, RIGHT, UP, DOWN or left, right, up, down)}
 62532 RET           ;
; ERIC's coordinates match those of little boy no. 10 exactly.
*62533 LD A,(50944)  ; #REGa=animatory state of little boy no. 10
 62536 CP 68         ; #AS68: little boy sitting in a chair
 62538 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 62541 JR Z,62549    ; Jump if little boy no. 10 is sitting in a chair
 62543 CP 197        ; #AS197: Is little boy no. 10 sitting on the floor facing
                     ; right (as in assembly)?
 62545 JR Z,62549    ; Jump if so
 62547 XOR A         ; No simulated keypress (ERIC stays still)
 62548 RET           ;
; Little boy no. 10 is sitting in a chair or sitting on the floor facing right
; (as in assembly), and ERIC is standing. Make ERIC face the same way and sit
; too (in the same spot as little boy no. 10).
*62549 XOR (HL)      ; {Set the carry flag if ERIC and little boy no. 10 are
 62550 RLCA          ; facing in opposite directions}
 62551 LD A,98       ; #b98=keypress code for 'S' (sit)
 62553 RET NC        ; Return if ERIC and little boy no. 10 are facing the same
                     ; way
 62554 LD A,(HL)     ; #REGa=ERIC's animatory state
 62555 RLCA          ; {Set #REGa to 1 if ERIC is facing left (leading to a
 62556 SBC A,A       ; simulated keypress code of #b82, or RIGHT), 0 if he's
 62557 INC A         ; facing right (leading to a simulated keypress code of
 62558 JR 62529      ; #b80, or LEFT); that is, make ERIC turn round}

; Make the next command be the start of the command list
;
; Used by command lists #R58368(#b22), #R58880(#b24), #R57956(#b28) and
; #R59765(#b78). Copies the address of the point reached in the current command
; list (stored in bytes #b25 and #b26 of the character's buffer) into bytes
; #b27 and #b28 (where the start address of the current command list is
; stored). This means that whenever the command list is restarted, it will
; restart from this point instead of the actual beginning.
;
; H #b204 (MISS TAKE) or #b205 (ALBERT)
@label=CLSTART
c62560 LD L,25       ; {Copy the address reached in the current command list
 62562 LD D,H        ; from bytes #b25 and #b26 into bytes #b27 and #b28 (where
 62563 LD E,27       ; the command list's start address is usually stored)
 62565 LDI           ;
 62567 LDI           ; }
 62569 JP 25484      ; Move to the next command in the command list

; Restart the command list unless the boys' skool door is closed
;
; Used by command lists #R58368(#b22) and #R58880(#b24). If the boys' skool
; door is open, makes MISS TAKE close the drinks cabinet door (if it's open)
; and restart the command list; otherwise moves to the next command in the
; command list.
;
; H #b204 (MISS TAKE)
@label=RSTDROPEN
c62572 LD A,(32756)  ; #R32756 holds the door/window status flags
 62575 BIT 3,A       ; Is the boys' skool door closed?
 62577 JP Z,25484    ; Move to the next command in the command list if so
 62580 BIT 5,A       ; Is the drinks cabinet door closed?
 62582 JP Z,61624    ; Restart the command list if so
 62585 LD L,20       ; Point #REGhl at byte #b20 of MISS TAKE's buffer
 62587 LD (HL),0     ; {Place #b0 (close door) in byte #b20, and #b32 (bit 5
 62589 DEC L         ; set: drinks cabinet door) in byte #b19, ready for the
 62590 LD (HL),32    ; routine at #R28855}
 62592 JP 28840      ; Close the drinks cabinet door

; Unused
@rsub=!62595
s62595 DEFS 4

; Jump forward in the command list if the boys' skool door or the gate is
; closed
;
; Used by command list #R59724(#b76). Saves ALBERT a trip to the skool gate or
; the skool door if it's already closed.
;
; H #b205 (ALBERT)
@label=CLISTJR10
c62599 LD DE,32756   ; #R32756 holds the door/window status flags
 62602 CALL 25213    ; Collect the next byte (the door identifier) from the
                     ; command list
 62605 EX DE,HL      ;
 62606 AND (HL)      ; Set the zero flag if this door is closed
 62607 EX DE,HL      ;
 62608 JR NZ,62617   ; Jump if the specified door is open
 62610 LD B,10       ; {Move along 10 places in the command list
*62612 CALL 25213    ;
 62615 DJNZ 62612    ; }
*62617 JP 25484      ; Move to the next command in the command list

; Wait till everyone has gone past the gate or the boys' skool door
;
; Used by command list #R59724(#b76). Makes ALBERT wait at the skool gate or
; the boys' skool door until all the female characters are on the girls' side
; of the gate and all the male characters are to his left.
;
; H #b205 (ALBERT)
@label=WAITDOOR
c62620 LD L,1        ; Point #REGhl at byte #b1 of ALBERT's buffer
 62622 LD E,(HL)     ; #REGe=ALBERT's x-coordinate
 62623 LD H,209      ; #b209=HAYLEY
 62625 LD A,(HL)     ; #REGa=HAYLEY's x-coordinate
 62626 LD H,182      ;
 62628 LD B,4        ; There are 4 little girls (#b183-#b186) who sometimes
                     ; venture past the skool gate
 62630 JR 62633      ;
*62632 LD A,(HL)     ; #REGa=girl's x-coordinate
*62633 CP 136        ; Is this girl on the right side of the gate?
 62635 RET C         ; Return if not
 62636 INC H         ; Next girl
 62637 DJNZ 62632    ; Jump back until HAYLEY and girls 1-4 have been checked
; The female characters are safely on the right side of the gate. Now check the
; male characters.
 62639 LD A,E        ; #REGa=ALBERT's x-coordinate
 62640 SUB 2         ;
 62642 LD H,210      ; #b210=ERIC
 62644 CP (HL)       ; Is ERIC at least 2 spaces to the left of ALBERT?
 62645 RET C         ; Return if not
 62646 LD H,193      ; #b193=little boy no. 4
 62648 LD B,11       ; There are 7 little boys and 4 male teachers who may
                     ; venture out of the boys' skool
*62650 CP (HL)       ; Is this character at least 2 spaces to the left of
                     ; ALBERT?
 62651 RET C         ; Return if not
 62652 INC H         ; Next teacher or little boy
 62653 DJNZ 62650    ; Jump back until little boys 4-10 and the male teachers
                     ; have been checked
; ERIC, the male teachers and all the little boys are safely to ALBERT's left.
; Now check the remaining boys.
 62655 LD H,206      ; #b206=BOY WANDER
 62657 LD B,3        ; 3 main boys: BOY WANDER, ANGELFACE and EINSTEIN
*62659 CP (HL)       ; Is this character at least 2 spaces to the left of
                     ; ALBERT?
 62660 RET C         ; Return if not
 62661 INC H         ; Next main boy
 62662 DJNZ 62659    ; Jump back until the three main boys have been checked
 62664 JP 25484      ; Move to the next command in the command list now it's
                     ; safe to shut the gate or door

; Unused
@rsub=!62667
s62667 DEFB 0

; Make ALBERT keep an eye out for ERIC during lessons
;
; The address of this continual subcommand routine is placed into bytes #b23
; and #b24 of ALBERT's buffer by command list #R59724(#b76). Makes ALBERT raise
; his arm and alert MR WACKER if ERIC enters the 'danger zone' (within 6 spaces
; to the left of ALBERT). Also makes ALBERT lower his arm if ERIC leaves the
; danger zone.
;
; H #b205 (ALBERT)
@label=WATCHERIC
c62668 LD L,0        ; Point #REGhl at byte #b0 of ALBERT's buffer
 62670 LD A,(HL)     ; #REGa=ALBERT's animatory state
 62671 OR 250        ; Is ALBERT midstride or lying on his back?
 62673 RET PO        ; Return if so
@ssub=LD DE,(53760+1)
 62674 LD DE,(53761) ; Collect ERIC's coordinates in #REGde
 62678 LD A,D        ; #REGa=ERIC's y-coordinate
 62679 CP 14         ; Is ERIC above the level of the stage?
 62681 JR C,62698    ; Jump if so
 62683 LD A,E        ; #REGa=ERIC's x-coordinate
 62684 CP 96         ; Is ERIC inside the boys' skool?
 62686 JR C,62698    ; Jump if so
 62688 LD L,1        ; Point #REGhl at byte #b1 of ALBERT's buffer
 62690 CP (HL)       ; Is ERIC to the left of ALBERT?
 62691 JR NC,62698   ; Jump if not
 62693 ADD A,6       ; {Is ERIC within 6 spaces to the left of ALBERT?
 62695 CP (HL)       ; }
 62696 JR NC,62711   ; Jump if so
; ERIC's not in the danger zone. Make ALBERT lower his arm if he has it raised.
*62698 LD L,0        ; Point #REGhl at byte #b0 of ALBERT's buffer
 62700 LD A,(HL)     ; #REGa=ALBERT's animatory state
 62701 CP 127        ; #AS127: Is ALBERT facing left with his arm up?
 62703 RET NZ        ; Return if not
 62704 POP BC        ; Drop the return address (#R25431) from the stack
 62705 POP BC        ; Drop the character buffer reference used by the routine
                     ; at #R25296
 62706 LD A,120      ; #AS120: ALBERT facing left, standing, with his arm down
 62708 JP 62452      ; Update ALBERT's animatory state and SRB
; ERIC is in the danger zone near ALBERT.
*62711 DEC L         ; #REGl=#b0
 62712 POP BC        ; Drop the return address (#R25431) from the stack
 62713 POP BC        ; Drop the character buffer reference used by the routine
                     ; at #R25296
 62714 BIT 7,(HL)    ; Is ALBERT facing right?
 62716 JP NZ,25648   ; Turn ALBERT round if so
 62719 LD A,127      ; #AS127: ALBERT facing left with his arm up
 62721 CP (HL)       ; Is ALBERT already holding ERIC back?
 62722 RET Z         ; Return if so
 62723 CALL 62452    ; Make ALBERT put his arm up and update the SRB
 62726 LD HL,32640   ; #R32640 holds various game status flags
 62729 BIT 1,(HL)    ; Is MR WACKER already looking for ERIC in order to expel
                     ; him?
 62731 JR NZ,62750   ; Jump if so
 62733 BIT 2,(HL)    ; Is MR WACKER already looking for the truant ERIC?
 62735 JR NZ,62750   ; Jump if so
 62737 SET 2,(HL)    ; Signal: MR WACKER is looking for the truant ERIC
@ssub=LD HL,51200+27
 62739 LD HL,51227   ; {Place the address of the command list at #R62766 into
@ssub=LD (HL),62766%256
 62742 LD (HL),46    ; bytes #b27 and #b28 of MR WACKER's buffer; this command
 62744 INC L         ; list contains a single entry: the address of the routine
@ssub=LD (HL),62766/256
 62745 LD (HL),245   ; at #R32054}
 62747 INC L         ; {Set bit 0 of byte #b29 of MR WACKER's buffer,
 62748 SET 0,(HL)    ; triggering a command list restart (at #R62766)}
*62750 LD H,205      ; #b205=ALBERT
 62752 CALL 29696    ; Determine the coordinates at which to print ALBERT's
                     ; exclamation
 62755 CALL 27276    ; Save the area of the screen that will be overwritten by
                     ; the message box
@keep
 62758 LD BC,25138   ; #REGb=#R60937(#b98) (MR WACKER^HE'S ESCAPING),
                     ; #REGc=#b50 (INK 2: PAPER 6)
 62761 LD A,2        ; The border colour will be red
 62763 JP 29811      ; Make ALBERT sound the alarm

; Command list used to make MR WACKER find the truant ERIC
;
; Used by the routine at #R62668.
@label=CLGETERIC
w62766 DEFW 32054    ; Make MR WACKER find the truant ERIC

; Command list used to make MR WACKER find and expel ERIC
;
; Used by the routine at #R62770.
@label=CLEXPEL
w62768 DEFW 62815    ; Make MR WACKER find and expel ERIC

; Set MR WACKER on his way to expel ERIC
;
; Used by the routines at #R29643 (when ERIC has 10000 or more lines) and
; #R64460 (when ERIC has jumped out of the top-floor window).
@label=EXPEL
c62770 LD HL,32640   ; #R32640 holds various game status flags
 62773 BIT 1,(HL)    ; Is MR WACKER already looking for ERIC (to expel him)?
 62775 RET NZ        ; Return if so
 62776 SET 1,(HL)    ; Signal: MR WACKER is looking for ERIC (to expel him)
@ssub=LD L,32739%256+1
 62778 LD L,228      ; {Set the MSB of the lesson clock at #R32739 to #b255, so
 62780 LD (HL),255   ; that the lesson will not end until ERIC's expelled}
@ssub=LD HL,51200+27
 62782 LD HL,51227   ; Point #REGhl at byte #b27 of MR WACKER's buffer
@ssub=LD (HL),62768%256
 62785 LD (HL),48    ; {Place the address of the command list at #R62768 (which
 62787 INC L         ; contains the single routine address #R62815) into bytes
@ssub=LD (HL),62768/256
 62788 LD (HL),245   ; #b27 and #b28 of MR WACKER's buffer}
 62790 INC L         ; {Set bit 0 of byte #b29 of MR WACKER's buffer,
 62791 SET 0,(HL)    ; triggering a command list restart (at #R62768)}
 62793 RET           ;

; Make MR WACKER find the truant ERIC
;
; The address of this interruptible subcommand routine is placed into bytes #b9
; and #b10 of MR WACKER's buffer by the routine at #R32054 after ALBERT has
; spotted ERIC trying to escape and raised the alarm.
;
; H #b200 (MR WACKER)
@label=FINDTRUANT
c62794 LD L,29       ; {Set bit 7 of byte #b29 of MR WACKER's buffer, making
 62796 SET 7,(HL)    ; him run}
 62798 LD L,0        ; Point #REGhl at byte #b0 of MR WACKER's buffer
 62800 BIT 0,(HL)    ; Is MR WACKER midstride?
 62802 JP NZ,25950   ; Finish the stride if so
; Now check whether a command list restart has been requested. This request
; will have been made if the lesson in which MR WACKER started chasing ERIC has
; ended, and the next lesson has just begun (see #R63309).
 62805 LD L,29       ; {Has a command list restart been requested (i.e. should
 62807 BIT 0,(HL)    ; MR WACKER end the chase now)?}
 62809 JP NZ,32399   ; Jump if so
 62812 JP 25944      ; Otherwise continue the hunt for ERIC

; Make MR WACKER find and expel ERIC
;
; The address of this routine is found in the command list at #R62768, the
; address of which is placed into bytes #b27 and #b28 of MR WACKER's buffer by
; the routine at #R62770.
;
; H #b200 (MR WACKER)
@label=FINDEXPEL
c62815 LD L,29       ; {Set bit 7 of byte #b29 of MR WACKER's buffer, making
 62817 SET 7,(HL)    ; him run}
 62819 LD A,255      ; {Set the MSB of the lesson clock at #R32739 to #b255
@ssub=LD (32739+1),A
 62821 LD (32740),A  ; (this lesson will not end until ERIC's expelled)}
 62824 CALL 25944    ; Move MR WACKER one step closer to ERIC (if he's not yet
                     ; close enough)
 62827 LD HL,51200   ; Point #REGhl at byte #b0 of MR WACKER's buffer
 62830 BIT 0,(HL)    ; Is MR WACKER now midstride?
 62832 RET NZ        ; Return if so
 62833 INC L         ; #REGl=#b1
@ssub=LD DE,(53760+1)
 62834 LD DE,(53761) ; #REGe=ERIC's x-coordinate, #REGd=ERIC's y-coordinate
 62838 LD A,(HL)     ; #REGa=MR WACKER's x-coordinate
 62839 SUB E         ; {Is MR WACKER within 3 x-coordinates of ERIC?
 62840 ADD A,3       ;
 62842 CP 7          ; }
 62844 RET NC        ; Return if not
 62845 INC L         ; #REGl=#b2
 62846 LD A,(HL)     ; #REGa=MR WACKER's y-coordinate
 62847 SUB D         ; {Is MR WACKER within 3 y-coordinates of ERIC?
 62848 ADD A,3       ;
 62850 CP 7          ; }
 62852 RET NC        ; Return if not
; MR WACKER has found ERIC.
 62853 LD HL,32763   ; #R32763 holds ERIC's status flags
 62856 LD (HL),64    ; Set bit 6: MR WACKER is expelling ERIC (who is now
                     ; paralysed)
@ssub=LD L,32749%256
 62858 LD L,237      ; #REGhl=#R32749 (ERIC's other status flags)
 62860 BIT 5,(HL)    ; Bit 5 is set if ERIC jumped out of the top-floor window
 62862 LD H,200      ; #b200=MR WACKER
 62864 LD E,99       ; Message #R60953(#b99): YOU HAVE 10000 LINES...
 62866 JR Z,62869    ; Jump if ERIC didn't jump out of the top-floor window
                     ; (i.e. he has 10000 lines)
 62868 INC E         ; #REGe=#R60975(#b100): YOU ARE NOT A BIRD...
@nowarn
*62869 LD BC,27144   ; {Redirect control to the routine at #R27144 (make
 62872 CALL 25503    ; character speak) and return to #R62875 (below) when done
                     ; }
@label=*
*62875 LD DE,(32741) ; Collect the score from #R32741 into #REGde
 62879 LD HL,(32745) ; Collect the current hi-score from #R32745 into #REGhl
 62882 AND A         ; Clear the carry flag ready for subtraction
 62883 SBC HL,DE     ; Do we have a new hi-score?
 62885 JR NC,62891   ; Jump if not
 62887 LD (32745),DE ; Insert the new hi-score
*62891 LD HL,0       ; {Reset the score (at #R32741) and the lines total (at
 62894 LD (32741),HL ; #R32743) to 0
 62897 LD (32743),HL ; }
 62900 JP 63189      ; Enter demo mode

; Unused
@rsub=!62903
s62903 DEFS 7

; Prepare for a new game
;
; Used by the routine at #R63189. First of all, wipe the blackboards clean.
@label=PREPGAME
c62910 LD H,135      ; {The blackboards use UDGs #b0-#b79 (#b0-#b15 for the
 62912 LD C,8        ; Blue Room board, #b16-#b31 for the Yellow Room,
 62914 XOR A         ; #b32-#b47 for the top-floor room in the girls' skool,
*62915 LD L,A        ; #b48-#b63 for the Science Lab, and #b64-#b79 for the
 62916 LD B,80       ; middle-floor room in the girls' skool) with base page
*62918 LD (HL),255   ; #b128; wipe them clean by setting every byte of graphic
 62920 INC L         ; data for these UDGs to #b255
 62921 DJNZ 62918    ;
 62923 DEC H         ;
 62924 DEC C         ;
 62925 JR NZ,62915   ; }
; Next, clean up the #LINK:GameStatusBuffer(game status buffer).
@ssub=LD L,32512%256
 62927 LD L,0        ; {Clear the first 222 bytes of the game status buffer
 62929 LD B,222      ;
*62931 LD (HL),A     ;
 62932 INC L         ;
 62933 DJNZ 62931    ; }
; Reset various counters, flags and identifiers.
@ssub=LD L,32736%256
@rsub=!62935-62937
 62935 LD L,224      ; {Set the lesson descriptor at #R32736 to 0 (for no good
 62937 LD (HL),A     ; reason: it will be set again by the routine at #R63309
                     ; when demo mode or a new game starts)}
@rsub=LD L,32737%256
 62938 INC L         ; {Reset the number of mice caught at #R32737
 62939 LD (HL),A     ; }
 62940 INC L         ; {Reset the number of kisses available from HAYLEY at
 62941 LD (HL),40    ; #R32738}
 62943 INC L         ; {Set the lesson clock at #R32739 to 1 (so the bell will
 62944 LD (HL),1     ; ring straight away)
 62946 INC L         ;
 62947 LD (HL),A     ; }
@ssub=LD L,32747%256
 62948 LD L,235      ; {Reset the inventory flags at #R32747
 62950 LD (HL),A     ; }
@ssub=LD L,32749%256
 62951 LD L,237      ; {Clear the game status buffer from #R32749 to #R32763
 62953 LD B,15       ;
*62955 LD (HL),A     ;
 62956 INC L         ;
 62957 DJNZ 62955    ; }
 62959 LD (HL),214   ; #R32764 holds the number of the last character moved;
                     ; set this to #b214 so it immediately rewinds to #b183
                     ; (little boy no. 1)
@ssub=LD L,32767%256
 62961 LD L,255      ; #REGhl=#R32767 (leftmost column of the play area on
                     ; screen)
 62963 LD (HL),A     ; Set this to 0
@ssub=LD L,32735%256
 62964 LD L,223      ; #REGhl=#R32735 (current lesson number)
 62966 LD A,(HL)     ; Pick this up in #REGa (#b192-#b255)
 62967 OR 7          ; {Make sure the first lesson of the new game will be
 62969 LD (HL),A     ; PLAYTIME}
 62970 CALL 27860    ; Prepare the doors, windows, cups and bike
@ssub=LD L,32755%256
 62973 LD L,243      ; #REGhl=#R32755 (ERIC's main action timer)
 62975 LD (HL),1     ; Initialise this to 1
; Set up the bike and storeroom combinations.
 62977 LD C,8        ; 4 numbers in each of the 2 combinations
@ssub=LD L,32668%256
 62979 LD L,156      ; #REGhl=#R32668 (combinations)
*62981 CALL 25233    ; {Generate new bike and Science Lab storeroom
 62984 LD B,A        ; combinations
*62985 CALL 25233    ;
 62988 DJNZ 62985    ;
 62990 LD (HL),A     ;
 62991 INC L         ;
 62992 DEC C         ;
 62993 JR NZ,62981   ; }
@ssub=LD L,32668%256
 62995 LD L,156      ; #REGhl=#R32668 (combinations)
 62997 LD B,4        ; There are 4 digits in the bike combination
*62999 LD C,47       ; #b47+#b1=#b48 (ASCII code for '0')
 63001 LD A,(HL)     ; #REGa=random number collected earlier
*63002 INC C         ; {#REGc=ASCII code of the number INT(#REGa/#b26)
 63003 SUB 26        ;
 63005 JR NC,63002   ; }
 63007 LD (HL),C     ; Put the bike combination digit in place
 63008 INC L         ; Point #REGhl at the next digit slot
 63009 DJNZ 62999    ; Jump back until all four digits are done
 63011 LD B,4        ; There are 4 letters in the storeroom combination
*63013 LD C,64       ; #b64+#b1=#b65 (ASCII code for 'A')
 63015 LD A,(HL)     ; #REGa=random number collected earlier
*63016 INC C         ; {#REGc=ASCII code of the Nth letter of the alphabet
 63017 SUB 10        ; (where N=1+INT(#REGa/#b10))
 63019 JR NC,63016   ; }
 63021 LD (HL),C     ; Put the storeroom combination letter in place
 63022 INC L         ; Point #REGhl at the next letter slot
 63023 DJNZ 63013    ; Jump back until all four letters are done
 63025 LD DE,32668   ; {Set #REGhl to #R32668 and #REGde to #R32676
 63028 EX DE,HL      ; }
 63029 LD C,8        ; {Copy the bike combination to #R32676 and the storeroom
 63031 LDIR          ; combination to #R32680}
; Place the game characters in their initial positions.
 63033 LD B,32       ; There are 32 game characters (#b183-#b214)
 63035 LD H,183      ; #b183=little girl no. 1
*63037 LD D,H        ;
 63038 PUSH BC       ;
 63039 LD L,32       ; {Collect the initial animatory state and location of the
 63041 XOR A         ; character from bytes #b32-#b34 of the character's buffer
 63042 LD E,A        ; and copy them into bytes #b0-#b2
 63043 LD BC,3       ;
 63046 LDIR          ; }
 63048 EX DE,HL      ;
@ssub=LD (HL),53796%256
 63049 LD (HL),36    ; {Place the address of the routine at #R53796 (#S/RET/)
 63051 INC L         ; into bytes #b3 and #b4 of the character's buffer (thus
@ssub=LD (HL),53796/256
 63052 LD (HL),210   ; making it the character's primary command; this is
                     ; useful only for the non-human characters, which do not
                     ; use command lists and therefore need a default primary
                     ; command)}
 63054 INC L         ; #REGl=#b5
 63055 EX DE,HL      ;
 63056 LD B,24       ; {Zero out bytes #b5-#b28 of the character's buffer
*63058 LD (DE),A     ;
 63059 INC E         ;
 63060 DJNZ 63058    ; }
 63062 LDI           ; Copy byte #b35 into byte #b29
 63064 LD A,H        ; #REGa=character number (#b183-#b214)
 63065 AND 15        ; {Initialise the walking speed change delay counter at
 63067 LD (DE),A     ; byte #b30 of the character's buffer}
 63068 POP BC        ;
 63069 INC H         ; Next character
 63070 DJNZ 63037    ; Jump back until all the characters have been initialised
; Set up a free mouse.
@nowarn
 63072 LD HL,31254   ; Routine at #R31254: control mouse
@ssub=LD (54272+17),HL
 63075 LD (54289),HL ; Place this uninterruptible subcommand routine address
                     ; into bytes #b17 and #b18 of the mouse's buffer
 63078 LD HL,257     ; {Set bytes #b20 and #b21 of the mouse's buffer to 1;
@ssub=LD (54272+20),HL
 63081 LD (54292),HL ; this has the effect of making the mouse hide initially}
; Clear the screen.
 63084 LD HL,16384   ; {Clear the display file
 63087 LD (HL),L     ;
 63088 LD DE,16385   ;
 63091 LD BC,6144    ;
 63094 LDIR          ; }
 63096 LD (HL),7     ; {PAPER 0: INK 7
 63098 LD B,3        ;
 63100 LDIR          ; }
; Prepare the bottom three lines of the screen.
 63102 LD HL,59176   ; The graphic data for the BTS logo is at #R59176
@nowarn
 63105 LD DE,23224   ; Point #REGde at the appropriate attribute file address
 63108 CALL 27364    ; Print the BTS logo
 63111 LD HL,58920   ; The graphic data for the score box is at #R58920
@nowarn
 63114 LD DE,23200   ; Point #REGde at the appropriate attribute file address
 63117 CALL 27364    ; Print the Score/Lines/Hi-score box
 63120 LD HL,(32745) ; {Collect the hi-score from #R32745 into #REGde
 63123 EX DE,HL      ; }
@keep
 63124 LD HL,20964   ; Point #REGhl at the appropriate display file address
 63127 CALL 29613    ; Print the hi-score
 63130 XOR A         ; {Print the score (0)
 63131 CALL 29621    ; }
 63134 XOR A         ; {Print the lines total (0)
 63135 CALL 29643    ; }
 63138 LD A,88       ; {When the game begins, the leftmost column of the play
 63140 LD (32767),A  ; area on screen will be 88+32=120}
; Scroll the play area onto the screen and play the theme tune.
 63143 LD B,4        ; There are 4 quarters to scroll on
*63145 PUSH BC       ;
 63146 CALL 25026    ; Scroll on a quarter
 63149 POP BC        ;
 63150 DJNZ 63145    ; Jump back until all 4 quarters have been scrolled on
@rsub=JP 24477
 63152 CALL 24477    ; Play the theme tune
@rsub=!63155
 63155 RET           ;

; Move the characters, close doors, and give ERIC lines if necessary
;
; Called from the main loop at #R63210.
@label=MAINLOOP2
c63156 CALL 25296    ; Move the game characters
 63159 CALL 28877    ; Close any temporarily open doors that need closing
@rsub=JP 32032
 63162 CALL 32032    ; Make a teacher give ERIC lines if he's up to something
                     ; he shouldn't be
@rsub=!63165
 63165 RET           ; Return to the main loop

; Start a new game if a key is pressed while ERIC's sitting or lying down in
; demo mode
;
; Used by the routine at #R62178. Returns with ERIC's animatory state in #REGa
; if no key was pressed.
@label=EXITDEMO
c63166 CALL 29118    ; Check for keypresses
 63169 LD A,(53760)  ; #REGa=ERIC's animatory state
 63172 RET Z         ; Return if no key was pressed
 63173 JP 63189      ; Otherwise start a new game

; 'D.S.REIDY 85 '
@rsub=!63176
t63176 DEFM "D.S.REIDY 85 "

; Start a new game or enter demo mode
;
; Used by the routines at #R21664, #R23907, #R62483, #R62815 and #R63166.
@label=START
@keep
c63189 LD SP,23806   ; Put the stack somewhere safe
 63192 LD HL,32734   ; {#REGa=#b255 if we're in demo mode, #b0 if a game has
 63195 LD A,(HL)     ; just ended, or #b1 if ERIC has just gone up a year}
@rsub=!63196-63202
 63196 INC A         ;
 63197 PUSH HL       ;
 63198 NOP           ; {Who knows what used to happen here?
 63199 NOP           ;
 63200 NOP           ; }
 63201 POP HL        ;
 63202 LD A,(HL)     ; #REGa=#b255 if we're in demo mode, #b0 if a game has
                     ; just ended, or #b1 if ERIC has just gone up a year
 63203 RRCA          ; {#b0 becomes #b255 (demo mode), and #b1 and #b255 become
 63204 CCF           ; #b0
 63205 SBC A,A       ; }
 63206 LD (HL),A     ; Store this in #R32734
 63207 CALL 62910    ; Prepare for a new game or demo mode, then enter the main
                     ; loop at #R63210

; Main loop
;
; The routine at #R63189 continues here.
@label=MAINLOOP
c63210 LD HL,32739   ; #R32739 holds the lesson clock
 63213 DEC (HL)      ; Decrement the LSB
 63214 JR NZ,63223   ; Jump if it's non-zero
 63216 INC L         ; Point #REGhl at the MSB of the lesson clock
 63217 DEC (HL)      ; Decrement the MSB
 63218 LD A,(HL)     ; Copy the new MSB to #REGa
 63219 INC A         ; Have we reached the end of the lesson?
 63220 CALL Z,63309  ; Ring the bell and start the next lesson if so
*63223 CALL 63156    ; Move the characters, close any temporarily open doors,
                     ; and make the nearest teacher give ERIC lines if he's up
                     ; to something he shouldn't be
 63226 LD HL,32763   ; #R32763 holds ERIC's primary status flags
 63229 LD A,(HL)     ; Pick these up in #REGa
 63230 AND A         ; Are any of the status flags set?
 63231 JR Z,63238    ; Jump if not
 63233 CALL 63405    ; Deal with ERIC if any of the status flags at #R32763 are
                     ; set
 63236 JR 63283      ;
; No status flags at #R32763 are set, which means ERIC is standing, or
; midstride, or just about to finish a 'short action' (bending over, dropping a
; stinkbomb, firing the water pistol, or moving forward as if to kiss). Here we
; finish ERIC's stride if he's midstride, finish any action he's just about to
; finish, or check for keypresses.
@ssub=LD L,32755%256
*63238 LD L,243      ; {Decrement ERIC's main action timer at #R32755
 63240 DEC (HL)      ; }
 63241 JR NZ,63283   ; Jump unless it's 0
 63243 DEC L         ; {Collect the mid-action timer from #R32754 into #REGa;
 63244 LD A,(HL)     ; it will be non-zero if ERIC is midstride or mid-action}
 63245 LD (HL),0     ; Reset the mid-action timer to 0
 63247 INC L         ; {Copy the previous contents of the mid-action timer into
 63248 LD (HL),A     ; the main action timer at #R32755}
 63249 AND A         ; Is ERIC midstride or mid-action?
 63250 JR NZ,63280   ; Jump if so
; ERIC is neither midstride nor just about to finish a short action, so check
; the keyboard.
 63252 CALL 62483    ; Check for keypresses
 63255 JR Z,63283    ; Jump if there haven't been any
 63257 LD (32753),A  ; Store the offset of the last keypress in #R32753
@ssub=LD H,58704/256
 63260 LD H,229      ; #REGhl will index the table of keypress handling
                     ; routines at #R58704
@nowarn
 63262 LD DE,63283   ; {Push the address #R63283 (see below) onto the stack so
 63265 PUSH DE       ; we return there after dealing with the keypress}
 63266 LD L,A        ; Point #REGhl at the appropriate entry
 63267 LD C,(HL)     ; {Copy the address of the routine for dealing with the
 63268 INC L         ; keypress into #REGbc
 63269 LD B,(HL)     ; }
 63270 PUSH BC       ; Push this address onto the stack
 63271 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 63274 LD A,(HL)     ; {Collect ERIC's animatory state into #REGa, and his
 63275 INC L         ; coordinates into #REGde
 63276 LD E,(HL)     ;
 63277 INC L         ;
 63278 LD D,(HL)     ; }
 63279 RET           ; Make an indirect jump to the relevant keypress-handling
                     ; routine, and then return to #R63283
; ERIC is midstride, or just about to finish an action (such as firing the
; water pistol or catching a mouse). Make him finish the stride or action.
*63280 CALL 28160    ; Update ERIC's animatory state and location, update the
                     ; SRB, and scroll the screen if necessary
; Now that ERIC's movements have been dealt with, the main loop continues.
*63283 CALL 25248    ; Update the display
 63286 LD HL,32755   ; #R32755 holds ERIC's main action timer
 63289 LD A,(HL)     ; Pick this up in #REGa
 63290 AND A         ; Did we check for keypresses on this pass?
 63291 JR NZ,63295   ; Jump if not
 63293 LD (HL),2     ; Otherwise reset ERIC's main action timer to 2
; This next section of code ensures that we don't pass through the main loop
; more than once every 1/50th of a second.
@ssub=LD L,32729%256
*63295 LD L,217      ; #REGhl=#R32729 (which holds the LSB of the system
                     ; variable FRAMES as it was when the last pass through the
                     ; main loop was completed)
@nowarn
*63297 LD A,(23672)  ; #REGa=LSB of the system variable FRAMES, which is
                     ; incremented every 1/50th of a second
 63300 SUB (HL)      ; Now #REGa=0 if FRAMES hasn't been incremented since the
                     ; last pass through the main loop
 63301 CP 1          ; Was FRAMES incremented?
 63303 JR C,63297    ; Jump back if not to check again
 63305 ADD A,(HL)    ; {Store the current value of the LSB of FRAMES at #R32729
 63306 LD (HL),A     ; }
 63307 JR 63210      ; Jump back to the start of the main loop

; Change the lesson
;
; This routine is called from the main loop at #R63210 when the lesson clock
; has counted down to zero. It sets each character up with the appropriate
; command list for the next lesson, and teleports some of the minor characters
; (specifically, little boys 1-8 and all the little girls) to their initial
; destinations if possible.
;
@ignoreua
; HL #w32740 (MSB of the #R32739(lesson clock))
@label=NEWLESSON1
c63309 LD (HL),16    ; Reset the MSB of the lesson clock to #b16
 63311 CALL 63576    ; Clear the flags at #R32640 and #R32641
@ssub=LD L,32735%256
 63314 LD L,223      ; #REGhl=#R32735 (which holds the current lesson number)
 63316 LD A,(HL)     ; Pick this up in #REGa (#b192-#b255)
 63317 INC A         ; Next lesson
 63318 OR 192        ; Roll over from #b255 to #b192 if necessary
 63320 LD (HL),A     ; Store the new lesson number
 63321 LD E,A        ; {Point #REGde at the #R46528(main timetable) entry for
@ssub=LD D,46528/256
 63322 LD D,181      ; this lesson}
 63324 LD A,(DE)     ; Pick up the lesson identifier (#b37-#b59) in #REGa
 63325 LD E,A        ; Copy this to #REGe
 63326 LD D,210      ; The lesson descriptor table is at #R53797
 63328 LD A,(DE)     ; Pick up the lesson descriptor in #REGa
 63329 INC L         ; {Store a copy of the lesson descriptor in #R32736
 63330 LD (HL),A     ; }
 63331 DEC D         ; #REGd=#b209 (HAYLEY)
; We now enter a loop to transfer the start address of a command list into
; bytes #b27 and #b28 of each character's buffer.
*63332 LD H,D        ;
 63333 LD A,(DE)     ; #REGa=command list number for this lesson from the
                     ; character's personal timetable
 63334 EXX           ;
@ssub=LD H,59392/256
 63335 LD H,232      ; Page #R59392(#b232) holds the start addresses of the
                     ; command lists
 63337 LD L,A        ; {Pick up the LSB of the command list start address in
 63338 LD A,(HL)     ; #REGa}
 63339 INC L         ; Point #REGhl' at the MSB
 63340 EXX           ;
 63341 LD L,27       ; {The LSB of the command list start address goes into
 63343 LD (HL),A     ; byte #b27 of the character's buffer}
 63344 INC L         ; Point #REGhl at byte #b28 of the character's buffer
 63345 EXX           ;
 63346 LD A,(HL)     ; #REGa=MSB of the command list start address
 63347 EXX           ;
 63348 LD (HL),A     ; Place this into byte #b28 of the character's buffer
 63349 INC L         ; {Set bit 0 of byte #b29 of the character's buffer, which
 63350 SET 0,(HL)    ; will trigger a command list restart at the next
                     ; available opportunity (i.e. after any subcommand routine
                     ; whose address is currently in bytes #b17 and #b18 or
                     ; bytes #b9 and #b10 of the character's buffer has
                     ; finished its job; see #R25296)}
 63352 LD A,H        ; Copy the character number to #REGa
 63353 CP 198        ; Are we dealing with one of the characters #b198-#b209
                     ; (little boys nos. 9 and 10, the adults and the main
                     ; kids)?
 63355 JR NC,63395   ; Jump if so
; We are dealing with one of the characters #b183-#b197 (all the little girls,
; and little boys 1-8), who get special treatment at the start of a new lesson.
; Any of them who never venture into the area that's currently on-screen will
; be 'teleported' to the first destination in their new command list.
 63357 SET 3,(HL)    ; Set bit 3 of byte #b29, signalling to the routine at
                     ; #R25134 (called later) that this character may be
                     ; teleported
 63359 EXX           ;
 63360 LD B,1        ; We let the routine at #R25134 consider only one
                     ; character at a time
 63362 LD H,A        ; #REGh'=character number (#b183-#b197)
 63363 LD A,(32767)  ; #REGa=X (leftmost column of the play area on screen)
 63366 CP 80         ; Is X at least 80 (the middle of the assembly hall
                     ; stage)?
 63368 JR NC,63375   ; Jump if so
 63370 LD A,H        ; #REGa=character number (#b183-#b197)
 63371 CP 190        ; Now X<80, so set the carry flag if we're dealing with a
                     ; little girl (none of whom should be on-screen)
 63373 JR 63391      ;
*63375 CP 120        ; Set the carry flag if X<120
 63377 LD A,H        ; #REGa=character number (#b183-#b197)
 63378 JR NC,63388   ; Jump if X>=120 (which means none of the little boys 1-8
                     ; should be on-screen)
 63380 CP 193        ; Are we dealing with little boys 4-8?
 63382 JR NC,63394   ; Jump if so (they do venture this far into the
                     ; playground)
 63384 CP 186        ; Now 80<=X<=112, so reset the carry flag if we're dealing
                     ; with little girls 4-7 (who never leave the girls' skool)
                     ; or little boys 1-3 (who never venture beyond the
                     ; assembly hall stage)
 63386 JR 63390      ;
*63388 CP 190        ; Now X>=120, so reset the carry flag if we're dealing
                     ; with a little boy
*63390 CCF           ; Set the carry flag if this character should be
                     ; considered for teleportation
*63391 CALL C,25134  ; Teleport this character if appropriate
*63394 EXX           ;
; The loop that prepares each character for the new lesson continues here.
*63395 DEC D         ; Next character
 63396 LD A,D        ; Copy this character's number to #REGa
 63397 CP 182        ; Have we done all the characters yet?
 63399 JR NZ,63332   ; Jump back if not
 63401 JP 32433      ; Print the lesson and ring the bell

; Unused
@rsub=!63404
s63404 DEFB 0

; Deal with ERIC
;
; Used by the routine at #R63210. Deals with ERIC when any of the bits at
; #R32763 (ERIC's primary status flags) are set, indicating that ERIC is doing
; something other than standing or walking:
; .
; #TABLE(default,centre,centre,:w,centre)<nowrap>
; { =h Bit | =h Set by                 | =h Meaning if set                               | =h Handler }
; { 0      | #R23887                   | ERIC is jumping                                 | #R23907 }
; { 1      | #R23907, #R28305, #R29574 | Examine the secondary status flags at #R32749   | }
; { 2      | #R62094, #R62423, #R64460 | ERIC is sitting or lying down                   | #R62178 }
; { 3      | #R57637                   | ERIC is bending over, dropping a stinkbomb etc. | #R57669 }
; { 4      | #R24133                   | ERIC is writing on a blackboard                 | #R24175 }
; { 5      | #R24247                   | ERIC is firing, hitting or kissing              | #R24237 }
; { 6      | #R62815, #R64460          | MR WACKER is expelling ERIC                     | }
; { 7      | #R26175, #R29896          | ERIC has been knocked over                      | #R62094 }
; TABLE#
; .
; If bit 1 at #R32763 is set, we examine ERIC's secondary status flags at
; #R32749:
; .
; #TABLE(default,centre,centre,:w,centre)<nowrap>
; { =h Bit | =h Set by                 | =h Meaning if set                                       | =h Handler }
; { 0      | #R29462                   | ERIC is riding the bike                                 | #R29278 }
; { 1      | #R23907                   | ERIC is standing on a plant or plant pot                | #R64316 }
; { 2      | #R64242, #R64259, #R64316 | ERIC is stepping off a plant, a plant pot, or the stage | #R64259 }
; { 3      | #R64259, #R64316          | ERIC is falling and will land on his feet               | #R64416 }
; { 4      | #R29194, #R29278, #R64077 | ERIC is falling and will not land on his feet           | #R64460 }
; { 5      | #R64259                   | ERIC has stepped out of the top-floor window            | #R23859 }
; { 6      | #R29194                   | ERIC is falling from the saddle of the bike             | #R23843 }
; { 7      | #R29278                   | ERIC is standing on the saddle of the bike              | #R29462 }
; TABLE#
;
; H #b127
@label=HANDLEERIC
@ssub=LD L,32749%256
c63405 LD L,237      ; #REGhl=#R32749 (ERIC's secondary status flags)
 63407 BIT 5,(HL)    ; Has ERIC stepped out of the top-floor window?
 63409 JR Z,63418    ; Jump if not
 63411 LD A,(53760)  ; #REGa=ERIC's animatory state
 63414 CP 134        ; #AS134: Is ERIC lying on his back, facing right?
 63416 JR NZ,63431   ; Jump if not
@ssub=LD L,32763%256
*63418 LD L,251      ; #REGhl=#R32763 (ERIC's status flags)
 63420 BIT 6,(HL)    ; Is MR WACKER expelling ERIC?
 63422 RET NZ        ; Return if so (ERIC is incapacitated)
 63423 BIT 1,(HL)    ; Bit 1 at #R32763 is set if we need to look at #R32749
@ssub=LD D,54076/256
 63425 LD D,211      ;
 63427 JR Z,63433    ; Jump unless we need to look at #R32749
@ssub=LD L,32749%256
 63429 LD L,237      ; #REGhl=#R32749 (ERIC's secondary status flags)
@ssub=LD D,54588/256
*63431 LD D,213      ;
*63433 LD A,(HL)     ; Copy the contents of #R32763 or #R32749 to #REGa
; Now #REGd=#b211 and #REGa=(#R32763) if bit 1 at #R32763 is reset; otherwise
; #REGd=#b213 and #REGa=(#R32749).
@ssub=LD E,54076%256+8
 63434 LD E,68       ; {Point #REGde at the appropriate entry in the table of
*63436 DEC E         ; handler routine address LSBs (at #R54076 or #R54588),
 63437 RRCA          ; depending on which bit of #REGa is set
 63438 JR NC,63436   ; }
 63440 EX DE,HL      ; Transfer the table entry address to #REGhl
 63441 LD E,(HL)     ; {Collect the handler routine address from the table
 63442 INC H         ; entry into #REGde
 63443 LD D,(HL)     ; }
 63444 EX DE,HL      ; Transfer this handler routine address to #REGhl
 63445 JP (HL)       ; Jump to the handler routine

; Unused
@rsub=!63446
s63446 DEFB 0

; Place a continual subcommand routine address into a character's buffer
;
; Used by command lists #R58768(#b32), #R58779(#b34), #R58798(#b36),
; #R58813(#b38), #R59151(#b40), #R58828(#b42), #R58844(#b44), #R59488(#b46),
; #R59499(#b48), #R59519(#b50), #R59530(#b52), #R59550(#b54), #R59584(#b56) and
; #R59724(#b76). Collects a continual subcommand routine address from the
; command list and places it into bytes #b23 and #b24 of the character's
; buffer. The routine address will be one of the following:
; .
; #TABLE(default,centre)
; { =h Address | =h Description }
; { #R30555    | #D30555 }
; { #R62668    | #D62668 }
; { #R63455    | #D63455 }
; { #R63492    | #D63492 }
; TABLE#
;
; H Character number (#b205-#b207)
@label=ADDR2CBUF
c63447 LD L,23       ; {Collect the routine address from the command list and
 63449 CALL 25188    ; place it into bytes #b23 and #b24 of the character's
                     ; buffer}
 63452 JP 25473      ; Move to the next command in the command list

; Make ANGELFACE stalk HAYLEY
;
; The address of this continual subcommand routine is placed into bytes #b23
; and #b24 of ANGELFACE's buffer by command list #R58844(#b44). Sets
; ANGELFACE's destination to match HAYLEY's, presumably so he has a better
; chance of knocking her out with a random punch.
;
; H #b207 (ANGELFACE)
@label=HITHAYLEY
@ssub=LD DE,53504+29
c63455 LD DE,53533   ; Point #REGde at byte #b29 of HAYLEY's buffer
 63458 LD A,(DE)     ; Pick this up in #REGa
 63459 RRCA          ; Is HAYLEY's command list due to be restarted?
 63460 JR C,63488    ; Jump if so
 63462 LD E,4        ; {Pick up the MSB of the routine address of the current
 63464 LD A,(DE)     ; command in HAYLEY's command list}
 63465 CP 100        ; Is it the routine at #R25700 (go to a location)?
 63467 JR NZ,63488   ; Jump if not
@ssub=LD DE,(53504+5)
 63469 LD DE,(53509) ; Copy the coordinates of HAYLEY's destination from bytes
                     ; #b5 and #b6 of HAYLEY's buffer to #REGde
@ssub=LD (58844+6),DE
@nowarn
 63473 LD (58850),DE ; Place these coordinates directly into command list
                     ; #R58844(#b44)
 63477 LD L,4        ; {Pick up the MSB of the routine address of the current
 63479 LD A,(HL)     ; command in ANGELFACE's command list}
 63480 CP 100        ; Is it the routine at #R25700 (go to a location)?
 63482 JR NZ,63488   ; Jump if not
@ssub=LD (52992+5),DE
 63484 LD (52997),DE ; Copy HAYLEY's destination into bytes #b5 and #b6 of
                     ; ANGELFACE's buffer (i.e. make it his destination too)
*63488 JP 30706      ; Continue into #R30706 (make ANGELFACE hit now and then)

; Unused
@rsub=!63491
s63491 DEFB 0

; Make ANGELFACE or BOY WANDER hit or fire now and then
;
; The address of this continual subcommand routine is placed into bytes #b23
; and #b24 of BOY WANDER's or ANGELFACE's buffer by command lists
; #R58768(#b32), #R58779(#b34), #R58798(#b36), #R58813(#b38), #R59151(#b40),
; #R58828(#b42), #R59488(#b46), #R59499(#b48), #R59519(#b50), #R59530(#b52),
; #R59550(#b54) and #R59584(#b56).
;
; H #b206 (BOY WANDER) or #b207 (ANGELFACE)
@label=HITFIRE
c63492 LD A,H        ; {Is this ANGELFACE?
 63493 CP 207        ; }
 63495 JP Z,30706    ; Jump if so
 63498 JP 30555      ; Jump if it's BOY WANDER

; Restart the command list unless it's time for assembly
;
; Used by command list #R59699(#b72). Restarts the command list (making MR
; WACKER go back up to his study) unless it's time to start assembly.
;
; H #b200 (MR WACKER)
@label=RSTORASSEM
@ssub=LD A,(32739+1)
c63501 LD A,(32740)  ; #REGa=MSB of the lesson clock (which starts off at #b16)
 63504 CP 9          ; Is it time to start assembly yet?
 63506 JP NC,61624   ; Restart the command list if not
 63509 JP 25484      ; Otherwise move to the next command in the command list

; Scroll the display file left or right one column
;
; Used by the routine at #R63561. Returns with the column of the play area that
; was at the far left of the screen before this routine was called in #REGa.
;
; DE #w16384 or #w16415
@label=LRSCROLL
c63512 LD B,0        ; #REGbc will be used as the counter for the #S|LDIR/LDDR|
                     ; instruction at #R63526; initialise the MSB to 0
 63514 EXX           ;
 63515 LD C,21       ; There are 21 rows to scroll (the bottom 3 rows of the
                     ; screen are fixed)
*63517 LD B,8        ; 8 pixel lines per row of the screen
*63519 EXX           ;
 63520 LD H,D        ; {Copy the display file address from #REGde to #REGhl
 63521 LD L,E        ; }
@label=SCRL1
 63522 INC L         ; This instruction is set to #S/INC L/ if we're scrolling
                     ; to the left, or #S/DEC L/ if we're scrolling to the
                     ; right (see #R63561)
 63523 LD A,E        ; Save the LSB of the display file address in #REGa
                     ; briefly
 63524 LD C,31       ; 31 bytes to shift per pixel line
@label=SCRL2
 63526 LDIR          ; This instruction is set to #S/LDIR/ if we're shifting to
                     ; the left, or #S/LDDR/ if we're shifting to the right
                     ; (see #R63561)
 63528 LD E,A        ; Restore the LSB of the display file address to #REGe
 63529 INC D         ; Point #REGde at the first (or last) byte of the next
                     ; pixel line in this row
 63530 EXX           ;
 63531 DJNZ 63519    ; Shift the remaining pixel lines in this row
 63533 EXX           ;
 63534 LD A,E        ; {Set #REGe to the LSB of the display file address for
 63535 ADD A,32      ; the first (or last) byte of the first pixel line in the
 63537 LD E,A        ; next row down}
 63538 JR C,63544    ; Jump if we just finished shifting the eighth or
                     ; sixteenth row
 63540 LD A,D        ; {Adjust #REGd appropriately in the case where we haven't
 63541 SUB 8         ; finished with the current 8-row third of the screen
 63543 LD D,A        ; }
*63544 EXX           ;
 63545 DEC C         ; Next row
 63546 JR NZ,63517   ; Jump back until all 21 rows have been shifted
 63548 EXX           ;
 63549 LD A,(32767)  ; #REGa=column of the play area (that was) at the far left
                     ; of the screen
 63552 RET           ;

; Scroll the display file left one column
;
; Used by the routine at #R25026.
@label=LSCROLL
@keep
c63553 LD BC,45100   ; #REGc=#b44 (#S/INC L/), #REGb=#b176 (#S/LDIR/ after
                     ; #b237)
 63556 LD DE,16384   ; Initialise #REGde to the appropriate display file
                     ; address
 63559 JR 63567      ;

; Scroll the display file right one column
;
; Used by the routine at #R25080.
@label=RSCROLL
@keep
c63561 LD BC,47149   ; #REGc=#b45 (#S/DEC L/), #REGb=#b184 (#S/LDDR/ after
                     ; #b237)
 63564 LD DE,16415   ; Initialise #REGde to the appropriate display file
                     ; address
; This entry point is used by the routine at #R63553 with #REGc=#b44 (#S/INC
; L/), #REGb=#b176 (#S/LDIR/ after #b237), and #REGde=#w16384.
@nowarn
*63567 LD HL,63522   ; {Set the instruction at #R63522 to #S/INC L/ or #S/DEC
 63570 LD (HL),C     ; L/, and the instruction at #R63526 to #S/LDIR/ or
@ssub=LD L,(63526+1)%256
 63571 LD L,39       ; #S/LDDR/
 63573 LD (HL),B     ; }
 63574 JR 63512      ; Scroll the display file one column left or right

; Clear various game and lesson flags
;
; Used by the routine at #R63309. Clears the flags in #R32640 and #R32641, and
; also sets the 6 unused bytes at #R32642 to 0.
;
; H #b127
@label=CLRFLAGS
@ssub=LD L,32640%256
c63576 LD L,128      ; #REGhl=#R32640
 63578 LD B,8        ; {Zero out the bytes
*63580 LD (HL),0     ;
 63582 INC L         ;
 63583 DJNZ 63580    ; }
 63585 RET           ;

; Deal with a stinkbomb when dropped
;
; The address of this routine is placed into #R32727 by the routine at #R28992
; when ERIC drops a stinkbomb. It creates a stinkbomb cloud and deals with it
; until it has dissipated, which includes checking whether MR WACKER and a
; closed window are nearby, and making the former set off for the latter if so.
@label=CLOUD
c63586 LD HL,32747   ; #R32747 holds the inventory flags
 63589 LD A,(HL)     ; Pick these up in #REGa
 63590 AND 224       ; Keep only the stinkbomb bits (bits 5-7)
 63592 ADD A,A       ; Shift these bits left, losing the leftmost bit
 63593 LD C,A        ; Store the new stinkbomb bits in #REGc briefly
 63594 LD A,(HL)     ; Pick up the inventory flags in #REGa again
 63595 AND 31        ; Discard the old stinkbomb bits
 63597 OR C          ; Superimpose the new stinkbomb bits
 63598 LD (HL),A     ; Restore the inventory flags, minus one stinkbomb
 63599 CALL 31746    ; Print the inventory
 63602 CALL 57910    ; Prepare buffer #b213 for the stinkbomb cloud (or return
                     ; to the main loop if the buffer is already in use by a
                     ; stinkbomb cloud)
 63605 LD L,0        ; Point #REGhl at byte #b0 of ERIC's buffer
 63607 LD A,(HL)     ; #REGa=ERIC's animatory state
 63608 INC L         ; #REGl=#b1
 63609 RLCA          ; {Set #REGa to -1 if ERIC is facing left, 1 if he's
 63610 SBC A,A       ; facing right
 63611 ADD A,A       ;
 63612 CPL           ; }
 63613 ADD A,(HL)    ; Add ERIC's x-coordinate to get the x-coordinate for the
                     ; stinkbomb cloud
 63614 LD E,A        ; Copy this to #REGe
 63615 INC L         ; #REGl=#b2
 63616 LD D,(HL)     ; #REGd=ERIC's y-coordinate, which will also be the
                     ; y-coordinate for the stinkbomb cloud
@ssub=LD HL,54528+19
 63617 LD HL,54547   ; Point #REGhl at byte #b19 of the stinkbomb cloud's
                     ; buffer
 63620 LD (HL),29    ; Initialise the counter that determines when the cloud
                     ; will disappear
 63622 LD A,71       ; #AS71: stinkbomb cloud (phase 1)
 63624 CALL 30534    ; Update the SRB for the stinkbomb cloud's appearance and
                     ; place address #R63627 (below) into bytes #b17 and #b18
                     ; of the cloud's buffer
; The address of the entry point below is placed into bytes #b17 and #b18 of
; the cloud's buffer by the instruction above.
@label=*SBCLOUD
*63627 LD L,19       ; Byte #b19 of the cloud's buffer holds the counter that
                     ; determines how much longer the cloud will stick around
                     ; (which starts off at #b29)
 63629 DEC (HL)      ; Is it time for the cloud to disappear?
 63630 JP Z,29903    ; Jump if so
 63633 LD A,(HL)     ; Pick up the counter's value in #REGa
 63634 CP 28         ; Is it time for a teacher to give lines?
 63636 JR NZ,63646   ; Jump if not
 63638 LD A,1        ; Message #R64564(#b1): NO STINKBOMBS
; This entry point is used by the routines at #R24175, #R24263, #R24296 and
; #R63915 with #REGa holding a reprimand message number.
*63640 SUB 62        ; Subtract #b62 now (it's added back later on)
 63642 CP A          ; Set the zero flag to indicate that any teacher may give
                     ; ERIC lines (including the one who last gave him lines)
 63643 JP 32282      ; Make any teacher within range give ERIC lines
; Now deal with animating the stinkbomb cloud and checking whether it's near a
; window.
*63646 CALL 25648    ; Toggle between cloud animation phases 1 (#AS71) and 2
                     ; (#AS199) and update the SRB accordingly
@rsub=!63649-63653
 63649 LD L,0        ; Point #REGhl at byte #b0 of the cloud's buffer
 63651 BIT 0,(HL)    ; {Bit 0 of the cloud's animatory state (#AS71(#b71 or
 63653 RET Z         ; #b199)) is always set, so this #S/RET/ never happens}
 63654 INC L         ; #REGl=#b1
 63655 LD A,(HL)     ; #REGa=stinkbomb cloud's x-coordinate
 63656 CP 84         ; The head's right study door is at x-coordinate 84
 63658 RET C         ; Return if the cloud is to the left of this
 63659 CP 96         ; The boys' skool door is at x-coordinate 96
 63661 RET NC        ; Return if the cloud is to the right of this
 63662 INC L         ; #REGl=#b2
 63663 LD A,(HL)     ; #REGa=stinkbomb cloud's y-coordinate
 63664 CP 17         ; Is the cloud on the bottom floor?
 63666 RET Z         ; Return if so
; The stinkbomb cloud is on the top floor or middle floor, somewhere between
; the head's right study door and the boys' skool door. Check the windows.
 63667 EX DE,HL      ; Point #REGde at byte #b2 of the cloud's buffer
 63668 LD HL,32756   ; #R32756 holds the door/window status flags
 63671 CP 3          ; Is the cloud on the top floor?
 63673 JR Z,63683    ; Jump if so
 63675 BIT 7,(HL)    ; Is the middle-floor window already open?
 63677 RET NZ        ; Return if so
@keep
 63678 LD BC,32861   ; #REGb=#b128 (middle floor window), #REGc=93
                     ; (x-coordinate)
 63681 JR 63689      ;
*63683 BIT 6,(HL)    ; Is the top-floor window already open?
 63685 RET NZ        ; Return if so
 63686 LD BC,16475   ; #REGb=#b64 (top-floor window), #REGc=91 (x-coordinate)
; Now #REGb holds the identifier of a closed window on the same floor as the
; stinkbomb cloud, and #REGc holds its x-coordinate. Is MR WACKER in the
; vicinity?
@ssub=LD HL,51200+2
*63689 LD HL,51202   ; Point #REGhl at byte #b2 of MR WACKER's buffer
 63692 CP (HL)       ; Is MR WACKER on the same floor as the stinkbomb cloud?
 63693 RET NZ        ; Return if not
 63694 DEC L         ; #REGl=#b1
 63695 DEC E         ; #REGe=#b1
 63696 LD A,(DE)     ; #REGa=x-coordinate of the stinkbomb cloud
 63697 SUB 3         ; {Return if MR WACKER is more than 2 spaces to the left
 63699 CP (HL)       ; of the cloud
 63700 RET NC        ; }
 63701 ADD A,5       ; {Return if MR WACKER is more than 2 spaces to the right
 63703 CP (HL)       ; of the cloud
 63704 RET C         ; }
; MR WACKER is close enough to the stinkbomb cloud to be affected by its
; stench. Check whether he's available for a spot of window-opening.
 63705 LD E,(HL)     ; #REGe=MR WACKER's x-coordinate
 63706 LD L,18       ; {Is there an uninterruptible subcommand routine address
 63708 LD A,(HL)     ; in bytes #b17 and #b18 of MR WACKER's buffer (meaning he
 63709 AND A         ; is otherwise occupied at the moment)?}
 63710 RET NZ        ; Return if so
 63711 LD L,A        ; #REGl=#b0
 63712 LD A,(HL)     ; #REGa=MR WACKER's animatory state
 63713 RRCA          ; Is MR WACKER midstride?
 63714 RET C         ; Return if so
 63715 RLCA          ; #REGa=MR WACKER's animatory state
 63716 LD L,19       ; {Store MR WACKER's current x-coordinate and animatory
 63718 LD (HL),E     ; state in bytes #b19 and #b20 of his buffer for later
 63719 INC L         ; retrieval
 63720 LD (HL),A     ; }
 63721 INC L         ; {Store the x-coordinate of the window in byte #b21
 63722 LD (HL),C     ; }
 63723 INC L         ; {Byte #b22 holds #b128 (middle-floor window) or #b64
 63724 LD (HL),B     ; (top-floor window)}
 63725 CALL 25012    ; Update the SRB for MR WACKER's current animatory state
                     ; and location
 63728 SET 7,A       ; #REGa=animatory state of MR WACKER facing right
 63730 CALL 30534    ; Place address #R63733 (below) into bytes #b17 and #b18
                     ; of MR WACKER's buffer and update his animatory state
; The address of the entry point below is placed into bytes #b17 and #b18 of MR
; WACKER's buffer by the instruction above.
@label=HEAD2WIN
 63733 LD L,0        ; Point #REGhl at byte #b0 of MR WACKER's buffer
 63735 BIT 0,(HL)    ; Is MR WACKER midstride?
 63737 JP NZ,25597   ; Finish his stride if so
 63740 JP 63801      ; Otherwise set MR WACKER off on his journey to the window

; Unused
@rsub=!63743
s63743 DEFB 0

@org
; UDG reference table for the skool gate when shut
;
; Used by the routine at #R27672. The UDG reference table for the skool gate
; when open is at #R64000.
; .
; #UDGTABLE
; { #CALL:mutable(63744) }
; TABLE#
@label=URTSGSHUT
b63744 DEFB 17,132,81,4,17,133,81,4,17,134,254,132,17,135,3,196
 63760 DEFB 18,132,81,4,18,133,81,4,18,134,254,132,18,135,3,196
 63776 DEFB 19,132,81,4,19,133,81,4,19,134,207,68,19,135,4,196
 63792 DEFB 20,134,122,4,20,135,5,196
 63800 DEFB 255                                                 ; End marker

; Deal with MR WACKER's journey to a window
;
; Continues from #R63586. Controls MR WACKER as he walks from the vicinity of
; the stinkbomb cloud over to the nearest closed window, opens it, and walks
; back again.
;
; H #b200 (MR WACKER)
@label=TOWINDOW
c63801 LD L,21       ; {Pick up the x-coordinate of the window to be opened
 63803 LD A,(HL)     ; from byte #b21 of MR WACKER's buffer}
 63804 LD L,1        ; Byte #b1 of MR WACKER's buffer holds his current
                     ; x-coordinate
 63806 CP (HL)       ; Has MR WACKER reached the window yet?
 63807 JP NZ,25632   ; Keep going if not
 63810 CALL 25012    ; Update the SRB for MR WACKER's current animatory state
                     ; and location
 63813 OR 7          ; #REGa=animatory state of MR WACKER with his arm up
 63815 CALL 30534    ; Place address #R63818 (below) into bytes #b17 and #b18
                     ; of MR WACKER's buffer and update his animatory state
; The address of this entry point is placed into bytes #b17 and #b18 of MR
; WACKER's buffer by the instruction above when he has reached the window that
; needs opening.
@label=*
*63818 LD L,17       ; {Replace the address of this entry point in bytes #b17
@ssub=LD (HL),63830%256
@rsub=LD (HL),63830%256 ; and #b18 of MR WACKER's buffer with #R63830
@rsub=INC L
@rsub=LD (HL),63830/256 ; }
 63820 LD (HL),86    ; and #b18 of MR WACKER's buffer with #R63830}
 63822 LD B,1        ; #REGb=1 (open window)
 63824 LD L,22       ; {Pick up the window identifier (#b64/#b128) from byte
 63826 LD A,(HL)     ; #b22 of MR WACKER's buffer}
 63827 JP 28863      ; Open the window and lower MR WACKER's arm
; This entry point is used after the window has been opened.
@label=TOWINDOW0
 63830 CALL 25012    ; Update the SRB for MR WACKER's current animatory state
                     ; and location
 63833 XOR 128       ; #REGa=animatory state of MR WACKER facing left
 63835 CALL 30534    ; Place address #R63838 (below) into bytes #b17 and #b18
                     ; of MR WACKER's buffer and update his animatory state
; This entry point is used after MR WACKER has turned round to begin his return
; journey from the window.
@label=*
*63838 LD L,0        ; Point #REGhl at byte #b0 of MR WACKER's buffer
 63840 BIT 0,(HL)    ; Is MR WACKER midstride?
 63842 JP NZ,25597   ; Finish his stride if so
 63845 LD L,19       ; {Byte #b19 stores MR WACKER's x-coordinate before he
 63847 LD A,(HL)     ; went off to the  window; pick this up in #REGa}
 63848 LD L,1        ; Byte #b1 of MR WACKER's buffer holds his x-coordinate
 63850 CP (HL)       ; Is MR WACKER at his pre-window-opening position?
 63851 JP NZ,25632   ; Continue his return journey if not
; MR WACKER has now returned to the spot where the stinkbomb first offended his
; nostrils.
 63854 LD L,18       ; {Remove the routine address (#R63838 above) from bytes
 63856 LD (HL),0     ; #b17 and #b18 of MR WACKER's buffer}
 63858 JP 30112      ; Restore MR WACKER's original animatory state and update
                     ; SRB

; Prepare the buffer for ERIC's catapult pellet and make a sound effect
;
; Used by the routine at #R24296.
;
; B #b214 (ERIC's catapult pellet)
@label=PREPCATTY
c63861 CALL 30615    ; Prepare buffer #b214 for the pellet
; This entry point is used by the routine at #R63915.
*63864 PUSH DE       ;
@keep
 63865 LD HL,63506   ; {Initialise the sound effect parameters
@keep
 63868 LD DE,32768   ;
 63871 LD A,4        ; }
 63873 CALL 62155    ; Make a catapult/water pistol sound effect
 63876 POP DE        ;
 63877 RET           ;

; Check for the presence of a plant pot
;
; Used by the routines at #R23907 and #R64077. Returns with the zero flag set
; if either ERIC or the recently ejected contents of the water pistol are on
; top of a plant pot:
; .
; #TABLE(default,centre)
; { =h Location | =h Plant pot }
; { 91,2        | Near the top-floor window }
; { 93,9        | Near the middle-floor window }
; { 132,16      | To the left of the skool gate }
; { 135,16      | To the right of the skool gate }
; TABLE#
;
; H #b210 (ERIC) or #b214 (water/sherry)
@label=CHECKPOT
c63878 LD DE,40956   ; Point #REGde at the plant-pot y-coordinate table at
                     ; #R40956
*63881 LD L,2        ; Point #REGhl at byte #b2 of the character's buffer
 63883 LD A,(DE)     ; #REGa=y-coordinate of the plant pot
 63884 CP (HL)       ; Does this match the character's y-coordinate?
 63885 JR NZ,63893   ; Jump if not
 63887 DEC L         ; #REGl=#b1
 63888 DEC D         ; Point #REGde at the plant-pot x-coordinate table at
                     ; #R40700
 63889 LD A,(DE)     ; #REGa=x-coordinate of the plant pot
 63890 CP (HL)       ; Does this match the character's x-coordinate?
 63891 RET Z         ; Return with the zero flag set if so
 63892 INC D         ; Point #REGde back at the plant-pot y-coordinate table
*63893 INC E         ; Next plant pot
 63894 JR NZ,63881   ; Jump back until all four plant pots have been checked
 63896 INC E         ; Reset the zero flag to indicate the lack of any plant
                     ; pot here
 63897 RET           ;

; 'G' pressed - fire water pistol
;
; The address of this routine is found in the table of keypress handling
; routines at #R58704. It is called from the main loop at #R63210 when 'G' is
; pressed.
@label=FIREWP
c63898 LD A,(32747)  ; #R32747 holds the inventory flags
 63901 AND 24        ; Keep only bits 3 and 4 (the pistol bits)
 63903 RET Z         ; Return if ERIC hasn't got the water pistol
 63904 CALL 57935    ; Give up now if buffer #b214 is already being used
@nowarn
 63907 LD HL,63915   ; The routine at #R63915 will control the water fired from
                     ; the pistol
 63910 LD A,14       ; #AS14: animatory state of ERIC firing the water pistol
 63912 JP 57642      ; Begin the pistol-firing action

; Control water fired from the pistol (1)
;
; The address of this routine is placed into #R32727 and #R32728 by the routine
; at #R63898. In the following, 'water' may refer to either water or sherry.
;
; H #b210 (ERIC)
@label=WATER
c63915 LD B,84       ; #AS84: water fired from the pistol, phase 1 (facing
                     ; left)
 63917 LD L,0        ; Point #REGhl at byte #b0 of ERIC's buffer
 63919 LD A,(HL)     ; #REGa=ERIC's animatory state
 63920 INC L         ; #REGl=#b1
 63921 RLCA          ; Is ERIC facing left?
 63922 JR NC,63926   ; Jump if so
 63924 LD B,212      ; #AS212: water fired from the pistol, phase 1 (facing
                     ; right)
*63926 SBC A,A       ; {Set #REGa=-2 if ERIC's facing left, 2 if he's facing
 63927 ADD A,A       ; right
 63928 CPL           ;
 63929 ADD A,A       ; }
 63930 ADD A,(HL)    ; Add ERIC's x-coordinate to get the initial x-coordinate
                     ; of the water
 63931 CP 191        ; Is ERIC too close to (and facing) the far left wall of
                     ; the boys' skool or the far right wall of the girls'
                     ; skool?
 63933 RET NC        ; Return if so
 63934 LD E,A        ; Copy the water's initial x-coordinate to #REGe
 63935 INC L         ; #REGl=#b2
 63936 LD D,(HL)     ; #REGd=ERIC's y-coordinate
 63937 DEC D         ; {Subtract 2 to get the initial y-coordinate of the water
 63938 DEC D         ; }
 63939 LD A,B        ; #REGa=initial animatory state of the water
 63940 PUSH AF       ; Save the water's initial animatory state briefly
 63941 PUSH DE       ; Save the water's initial coordinates briefly
 63942 CALL 63864    ; Make a water pistol sound effect
 63945 LD A,136      ; Message #R64591(#b136): NO WATERPISTOLS
 63947 CALL 63640    ; Give ERIC lines if any teacher is nearby
 63950 POP DE        ; Restore the water's initial coordinates to #REGde
 63951 POP AF        ; Restore the water's initial animatory state to #REGa
@ssub=LD HL,54784+19
 63952 LD HL,54803   ; Point #REGhl at byte #b19 of the water's buffer
 63955 LD (HL),151   ; Initialise the water animation phase identifier
 63957 CALL 30534    ; Place address #R63960 (below) into bytes #b17 and #b18
                     ; of the water's buffer and update the SRB for the water's
                     ; appearance
; The address of this entry point is placed into bytes #b17 and #b18 of the
; water's buffer by the instruction above just after the water has been fired
; from the pistol, and is used throughout the water's lifespan. First, check
; whether the water has hit a cup, a plant, or the floor.
@label=WATERFALL
 63960 LD L,19       ; {Increment the water animation phase identifier (which
 63962 INC (HL)      ; starts off at #b151) held in byte #b19 of the buffer}
 63963 LD B,(HL)     ; Pick up this identifier (#b152-#b156) in #REGb
 63964 LD C,255      ; Point #REGbc at the appropriate entry in the water
                     ; animation table (see below)
 63966 LD A,(BC)     ; Pick up the entry in #REGa
 63967 AND A         ; {Deal with the water at phase 3 (when it can hit a cup),
 63968 CALL NZ,64077 ; 6 (when it can hit a plant) or 7+ (when it hits the
                     ; floor)}
; Next, determine the water's new animatory state and coordinates as it moves
; through the air. For this we use the water animation table, which comprises
; five 4-byte entries located in bytes #b252-#b255 of pages #b152-#b156,
; corresponding to the phases of animation of the water as it flies from the
; pistol to the ground. Each entry contains the animatory state (AS), the
; x-coordinate increment (x+), the y-coordinate increment (y+), and a parameter
; (P) that is passed to the routine at #R64077 when non-zero. When P=1, the
; water is at the right phase to fill a cup; when P=2, the water may have hit a
; plant or the ground.
; .
; #TABLE(default,centre,centre,centre,centre,centre,centre)
; { =h Address | =h Phase | =h AS  | =h x+ | =h y+ | =h P }
; { #R39164    | 2        | #AS92  | -2    | -1    | 0 }
; { #R39420    | 3        | #AS108 | -2    | 0     | 1 }
; { #R39676    | 4        | #AS116 | -1    | 0     | 0 }
; { #R39932    | 5        | #AS124 | 0     | 1     | 0 }
; { #R40188    | 6+       | #AS124 | 0     | 1     | 2 }
; TABLE#
 63971 DEC C         ; #REGc=#b254
 63972 PUSH BC       ; Save the water animation table pointer
 63973 CALL 25012    ; Update the SRB for the water's current animatory state
                     ; and location
 63976 LD A,D        ; #REGa=water's current y-coordinate
 63977 POP HL        ; Restore the water animation table pointer to #REGhl
 63978 ADD A,(HL)    ; Add the entry from the table to obtain the water's new
                     ; y-coordinate
 63979 LD D,A        ; Copy this to #REGd
 63980 DEC L         ; #REGl=#b253
 63981 LD C,(HL)     ; Pick up the x-coordinate increment in #REGc
 63982 DEC L         ; #REGl=#b252
 63983 LD A,(HL)     ; #REGa=water's new animatory state (facing left)
 63984 LD HL,54784   ; Point #REGhl at byte #b0 of the water's buffer
 63987 RL (HL)       ; Set the carry flag if the water's travelling to the
                     ; right
 63989 RLA           ; {Copy the carry flag into the 'direction' bit (bit 7) of
 63990 RRCA          ; the animatory state}
 63991 LD B,A        ; #REGb=water's new animatory state (facing the correct
                     ; way)
 63992 LD A,E        ; #REGa=water's current x-coordinate
 63993 JP 64057      ; Jump over the data table at #R64000 to continue this
                     ; routine

; Unused
@rsub=!63996
s63996 DEFS 4

@org
; UDG reference table for the skool gate when open
;
; Used by the routine at #R27672. The UDG reference table for the skool gate
; when shut is at #R63744.
; .
; #UDGTABLE
; { #CALL:mutable(64000) }
; TABLE#
@rem=This table must be 256 bytes after the UDG reference table for the skool
@rem=gate when shut
@label=URTSGOPEN
b64000 DEFB 17,132,223,196,17,133,240,196
 64008 DEFB 17,134,241,196,17,135,242,196
 64016 DEFB 18,132,243,196,18,133,244,196
 64024 DEFB 18,134,245,196,18,135,117,4
 64032 DEFB 19,132,246,196,19,133,247,196
 64040 DEFB 19,134,248,196,19,135,249,196
 64048 DEFB 20,134,81,4,20,135,81,4
 64056 DEFB 255                           ; End marker

; Control water fired from the pistol (2)
;
; Continues from #R63915. On entry the carry flag is set if the water is
; travelling to the right. In the following, 'water' may refer to either water
; or sherry.
;
; A Water's current x-coordinate
; B Water's new animatory state
; C x-coordinate increment (-2, -1 or 0)
; D Water's new y-coordinate
; H #b214 (water)
@label=WATER2
c64057 JR NC,64061   ; Jump if the water is travelling to the left
 64059 SUB C         ; Add 0, 1 or 2 to the water's current x-coordinate
 64060 SUB C         ; Do the same again to compensate for the #S/ADD A,C/
                     ; instruction below
*64061 ADD A,C       ; Now #REGa=new x-coordinate for the water
 64062 LD E,A        ; Copy this to #REGe
 64063 CP 191        ; Reset the carry flag if the water has hit the far left
                     ; wall of the boys' skool or the far right wall of the
                     ; girls' skool
 64065 LD A,B        ; Transfer the water's new animatory state to #REGa
 64066 JP C,24880    ; Update the water's animatory state and location and
                     ; update the SRB (if the water hasn't hit one of the far
                     ; walls, i.e. it's still entirely on-screen)
 64069 LD L,18       ; {Otherwise remove the uninterruptible subcommand routine
 64071 LD (HL),0     ; address (#R63960) from bytes #b17 and #b18 of the
                     ; water's buffer}
 64073 JP 29910      ; Place the water out of sight

; Unused
@rsub=!64076
s64076 DEFB 0

; Deal with water fired from the pistol at certain phases
;
; Used by the routine at #R63915. On entry, #REGa is equal to 1 if the water is
; at phase 3 of its trajectory (at which point it may hit a cup), or 2 if it's
; at phase 6 or above (at which point it may hit a plant or the floor). In the
; following, 'water' may refer to either water or sherry.
;
; A 1 or 2
; H #b214 (water)
; L #b19
@label=CHKWATER
c64077 DEC A         ; Is the water at the right phase to fill a cup?
 64078 JR NZ,64126   ; Jump if not
 64080 LD L,2        ; Point #REGhl at byte #b2 of the water's buffer
 64082 LD A,(HL)     ; #REGa=water's y-coordinate
 64083 SUB 14        ; All cups have a y-coordinate of 14
 64085 RET NZ        ; Return if the water's not at the right height
 64086 LD L,A        ; #REGl=#b0
 64087 DEC A         ; #REGa=-1
 64088 BIT 7,(HL)    ; Is the water travelling to the left?
 64090 JR Z,64094    ; Jump if so
 64092 LD A,3        ;
*64094 INC L         ; #REGl=#b1
 64095 ADD A,(HL)    ; Now #REGa=x-coordinate of the spot the water is hitting
 64096 CALL 30217    ; Is this the x-coordinate of one of the cups?
 64099 RET NZ        ; Return if not
 64100 LD HL,32747   ; #R32747 holds the inventory flags
 64103 BIT 4,(HL)    ; Set the zero flag if there's water (not sherry) in the
                     ; pistol
@nowarn
@ssub=LD HL,56694-255
 64105 LD HL,56439   ; #REGh=#b220, #REGl=#b119
 64108 JR Z,64112    ; Jump if there's water in the pistol
 64110 LD L,124      ;
*64112 INC H         ; Point #REGhl at a cup graphic data table
 64113 CP (HL)       ; Is this the right data table for the cup?
 64114 JR NZ,64112   ; Jump back to check the next table if not
 64116 DEC L         ; Point #REGhl at the appropriate UDG reference table
; Now #REGhl points at the start of the appropriate UDG reference table for the
; cup:
; .
; #TABLE(default)
; { =h #REGhl | =h Cup                           | =h Contents }
; { #R56694   | Leftmost cup in the boys' skool  | Water }
; { #R56699   | Leftmost cup in the boys' skool  | Sherry }
; { #R56950   | Middle cup in the boys' skool    | Water }
; { #R56955   | Middle cup in the boys' skool    | Sherry }
; { #R57206   | Rightmost cup in the boys' skool | Water }
; { #R57211   | Rightmost cup in the boys' skool | Sherry }
; { #R57462   | Cup in the girls' skool          | Water }
; { #R57467   | Cup in the girls' skool          | Sherry }
; TABLE#
 64117 CALL 27672    ; Alter the appropriate UDG and attribute references in
                     ; the play area to show the cup filled with water or
                     ; sherry
*64120 POP HL        ; Drop the return address (to the routine at #R63915) from
                     ; the stack
 64121 LD H,214      ; #b214=water
 64123 JP 29903      ; Remove the water from sight
; The water is at phase 6 or above of its trajectory. Has it hit the floor?
*64126 DEC (HL)      ; Decrement the water animation phase identifier in byte
                     ; #b19 of the water's buffer from #b156 to #b155; this has
                     ; the effect of bringing us back through this section of
                     ; code (via the routine at #R63915) until the water has
                     ; hit either a plant or the floor
 64127 CALL 30543    ; Is the water's y-coordinate 3 (top floor), 10 (middle
                     ; floor) or 17 (bottom floor)?
 64130 JR NZ,64147   ; Jump if not
 64132 CP 17         ; Did it hit the bottom floor?
 64134 JR Z,64120    ; Terminate the water if so
; The water has reached the level of the top or middle floor. We terminate it
; here if it's inside the boys' skool or the girls' skool. (Note that it hasn't
; necessarily hit the floor at this point; for example, it may have been fired
; from the top of the stairs above the stage down onto the stage, in which case
; it will terminate in mid-air above the stage, at the level of the middle
; floor.) Otherwise we let it continue till it hits the ground.
 64136 DEC L         ; #REGl=#b1
 64137 LD A,(HL)     ; #REGa=water's x-coordinate
 64138 CP 96         ; {Terminate the water if #REGa<96 (it's inside the boys'
 64140 JR C,64120    ; skool) or #REGa>=160 (it's inside the girls' skool)
 64142 CP 160        ;
 64144 JR NC,64120   ; }
 64146 RET           ;
; The water hasn't hit a cup or the floor. Has it hit a plant pot?
*64147 CALL 63878    ; Has the water hit a plant pot?
 64150 RET NZ        ; Return if not
 64151 LD A,(32747)  ; #R32747 holds the inventory flags
 64154 BIT 4,A       ; Has the pistol got sherry in it?
 64156 JR NZ,64120   ; Terminate the sherry if so (sherry does not make plants
                     ; grow)
 64158 POP DE        ; Drop the return address (to the routine at #R63915) from
                     ; the stack
 64159 CALL 25012    ; Update the SRB for the water's current animatory state
                     ; and location
 64162 INC D         ; Now #REGd=y-coordinate of the plant
 64163 LD L,19       ; {Initialise the counter that determines the phases of
 64165 LD (HL),22    ; growth of the watered plant}
 64167 INC L         ; {Store the x-coordinate of the plant in byte #b20 of the
 64168 LD (HL),E     ; buffer for retrieval later when it starts growing}
 64169 LD E,0        ; The plant's initial x-coordinate will be 0 (which is
                     ; certainly off-screen at the moment, since the leftmost
                     ; plant pot is at x-coordinate 91)
 64171 LD A,E        ; And its initial animatory state will be #AS0 (ERIC
                     ; standing, facing left), so it's a good thing it will be
                     ; off-screen!
 64172 CALL 30534    ; Place address #R64175 (below) into bytes #b17 and #b18
                     ; of the plant's buffer and update the SRB for the plant's
                     ; appearance
; The address of this entry point is placed into bytes #b17 and #b18 of the
; plant's buffer by the instruction above just after the plant has been
; watered.
@label=GROWPLANT
 64175 LD L,19       ; Byte #b19 holds the counter that determines the phases
                     ; of growth (and death) of the plant
 64177 DEC (HL)      ; Is the plant ready to die?
 64178 JR NZ,64195   ; Jump if not
 64180 LD A,(32749)  ; #R32749 holds ERIC's secondary status flags
 64183 CP 2          ; Is ERIC standing on a plant or plant pot?
 64185 JR NZ,64192   ; Jump if not
 64187 LD A,16       ; {Set bit 4 at #R32749, indicating that ERIC is going to
 64189 LD (32749),A  ; take a fall (even if ERIC's standing on a different
                     ; plant pot; this is a #BUG#plant(bug))}
*64192 JP 29903      ; Kill the plant
; The plant is not dead yet. Plan its next move.
*64195 LD A,(HL)     ; Pick up the plant lifespan counter in #REGa
 64196 CP 8          ; Is it time for the plant to start growing?
 64198 JR NZ,64209   ; Jump if not
 64200 INC L         ; {#REGe=x-coordinate of the plant (stored in byte #b20
 64201 LD E,(HL)     ; earlier)}
 64202 LD L,2        ; Point #REGhl at byte #b2 of the plant's buffer
 64204 LD D,(HL)     ; #REGd=y-coordinate of the plant
 64205 LD A,42       ; #AS42: flower, half-grown
 64207 JR 64216      ;
*64209 CP 4          ; Is it time for the plant to reach full height?
 64211 RET NZ        ; Return if not
 64212 CALL 25012    ; Update the SRB for the plant's current animatory state
 64215 INC A         ; #REGa=#AS43: flower, fully grown
*64216 CALL 24880    ; Update the plant's animatory state and update the SRB
 64219 LD A,(32749)  ; #R32749 holds ERIC's status flags
 64222 CP 2          ; Is ERIC standing on a plant?
 64224 RET NZ        ; Return if not
@ssub=LD A,(53760+1)
 64225 LD A,(53761)  ; #REGa=ERIC's x-coordinate
 64228 LD L,1        ; Point #REGhl at byte #b1 of the plant's buffer (which
                     ; holds its x-coordinate)
 64230 CP (HL)       ; Is ERIC standing on this plant?
 64231 RET NZ        ; Return if not
 64232 LD H,210      ; #b210=ERIC
 64234 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 64237 DEC D         ; ERIC will rise one level as the plant grows
 64238 JP 24880      ; Update ERIC's location and update the SRB

; Unused
@rsub=!64241
s64241 DEFB 0

; Begin ERIC's descent from a plant, a plant pot, or the assembly hall stage
;
; Used by the routines at #R28305 and #R64316.
@label=STEPOFF
c64242 LD A,12       ; Bits 2 and 3 set (ERIC is stepping off a fully grown
                     ; plant in the direction of an open window or the closed
                     ; skool gate, or stepping off the stage)
; This entry point is also used by the routine at #R64316 with #REGa=4 (bit 2
; set, indicating that ERIC has stepped off a plant).
*64244 LD (32749),A  ; Set ERIC's secondary status flags at #R32749 as
                     ; appropriate
; This entry point is used by the routine at #R64259.
*64247 CALL 29012    ; Make a sound effect
 64250 LD H,210      ; #b210=ERIC
 64252 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 64255 INC A         ; #REGa=ERIC's next animatory state (midstride)
 64256 JP 62231      ; Update ERIC's animatory state and update the SRB

; Deal with ERIC when he's stepping off a plant, a plant pot, or the assembly
; hall stage
;
; Used by the routine at #R63405 when bit 2 at #R32749 is set (by the routine
; at #R64242 or #R64316, or by this routine on the first pass through). On
; entry, bit 3 at #R32749 is also set if ERIC is stepping out of an open
; window, over the closed skool gate, or off the assembly hall stage. On exit,
; ERIC's status flags at #R32749 are set as follows:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit | =h Meaning }
; { 2      | ERIC has completed one step towards an open window, over the
;            closed skool gate, or off the stage }
; { 3      | ERIC is now falling (but not from the top-floor window) }
; { 5      | ERIC is now falling out of the top-floor window }
; TABLE#
@label=STEPPEDOFF
c64259 LD HL,32755   ; #R32755 holds ERIC's main action timer
 64262 DEC (HL)      ; Is it time to deal with ERIC yet?
 64263 RET NZ        ; Return if not
 64264 LD (HL),5     ; Reset ERIC's main action timer to 5
 64266 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC' buffer
 64269 BIT 0,(HL)    ; Is ERIC midstride?
 64271 JR Z,64247    ; Make him so if not (with an accompanying sound effect)
 64273 LD A,(32749)  ; {Set the zero flag if bit 3 of ERIC's secondary status
 64276 CP 12         ; flags at #R32749 is also set}
 64278 LD A,4        ; Set bit 2 (only) in #REGa
 64280 JR Z,64292    ; Reset bit 3 at #R32749 if ERIC has just stepped off a
                     ; fully grown plant towards an open window or the closed
                     ; skool gate, or just stepped off the stage
 64282 INC L         ; #REGl=#b1
 64283 LD A,(HL)     ; #REGa=ERIC's x-coordinate
 64284 CP 92         ; This is the x-coordinate of the plant pot on the top
                     ; floor
 64286 LD A,32       ; Set bit 5 in #REGa
 64288 JR Z,64292    ; Jump if ERIC is going to fall from the top-floor window
 64290 LD A,8        ; Set bit 3 in #REGa
*64292 LD (32749),A  ; Set the appropriate bit (2, 3 or 5) in ERIC's secondary
                     ; status flags at #R32749
 64295 CALL 29012    ; Make a sound effect
 64298 LD H,210      ; #b210=ERIC
 64300 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 64303 INC A         ; {#REGa=ERIC's new animatory state (standing)
 64304 AND 130       ; }
 64306 DEC E         ; Decrement ERIC's x-coordinate
 64307 BIT 7,A       ; Is ERIC facing left?
 64309 JR Z,64313    ; Jump if so
 64311 INC E         ; {Increment ERIC's x-coordinate (if he's facing right)
 64312 INC E         ; }
*64313 JP 28172      ; Update ERIC's animatory state and location, make a sound
                     ; effect, and scroll the screen if necessary

; Deal with ERIC when he's standing on a plant or plant pot
;
; Used by the routine at #R63405 when bit 1 at #R32749 is set (by the routine
; at #R23907). If 'down', 'left' or 'right' is pressed while ERIC is standing
; on a plant or plant pot, this routine will set bit 2 or 3 of ERIC's status
; flags at #R32749 as follows:
; .
; #TABLE(default,centre,:w)<wrapalign>
; { =h Bit(s) | =h Meaning }
; { 2         | ERIC is stepping off a plant or plant pot straight to the floor
;               }
; { 3         | ERIC is falling and will land on his feet ('down' pressed) }
; { 2 & 3     | ERIC is stepping off a fully grown plant in the direction of an
;               open window or the closed skool gate }
; TABLE#
@label=ONPLANT
c64316 LD HL,32755   ; #R32755 holds ERIC's main action timer
 64319 DEC (HL)      ; Is it time to deal with ERIC yet?
 64320 RET NZ        ; Return if not
 64321 INC (HL)      ; Set ERIC's main action timer to 1, ensuring that we pass
                     ; through the following section of code on the next call
                     ; to this routine if no keypress is detected this time
 64322 CALL 29178    ; Get the value from the #R58624(keypress offset table)
                     ; corresponding to the last key pressed (if any)
 64325 RET Z         ; Return if no keys were pressed
; A key was pressed while ERIC was standing on a plant or plant pot.
 64326 LD HL,32755   ; {Reset ERIC's main action timer at #R32755 to 5
 64329 LD (HL),5     ; }
 64331 RES 3,A       ; Reset bit 3 of the keypress code to make it lower case
 64333 CP 86         ; Was 'down' pressed?
 64335 JR NZ,64342   ; Jump if not
; 'Down' was pressed, so make ERIC descend gracefully.
@ssub=LD L,32749%256
 64337 LD L,237      ; #REGhl=#R32749 (ERIC's secondary status flags)
 64339 LD (HL),8     ; Set bit 3: ERIC is falling and will land on his feet
 64341 RET           ;
; It wasn't 'down'. Was it 'left' or 'right'?
*64342 EX DE,HL      ;
 64343 LD HL,53760   ; Point #REGhl at byte #b0 of ERIC's buffer
 64346 CP 82         ; Was 'right' pressed?
 64348 JR NZ,64400   ; Jump if not
; 'Right' was pressed.
 64350 BIT 7,(HL)    ; Is ERIC facing left?
 64352 JP Z,28216    ; Turn ERIC round if so
 64355 INC L         ; #REGl=#b1
 64356 LD A,(HL)     ; #REGa=ERIC's x-coordinate
 64357 EX DE,HL      ;
 64358 INC L         ; #REGhl=#R32756 (which holds the door/window status
                     ; flags)
 64359 CP 132        ; This is the x-coordinate of the plant pot to the left of
                     ; the gate
 64361 JR C,64383    ; Jump if ERIC is standing on a plant pot in the boys'
                     ; skool
*64363 JR Z,64370    ; Jump if ERIC is standing on one of the plant pots beside
                     ; the gate
*64365 LD A,4        ; {Make a sound effect, update the SRB, and set bit 2 at
 64367 JP 64244      ; #R32749 (ERIC is stepping off a plant/plant pot)}
; ERIC is standing on one of the plant pots on either side of the skool gate,
; and has tried to step off the plant or plant pot in the direction of the
; gate.
*64370 BIT 4,(HL)    ; Is the skool gate open?
 64372 JR NZ,64365   ; Jump if so
 64374 LD B,14       ; This is the y-coordinate of ERIC if he's standing on a
                     ; fully grown plant on the bottom floor
*64376 INC E         ; Point #REGde at byte #b2 of ERIC's buffer
 64377 LD A,(DE)     ; #REGa=ERIC's y-coordinate
 64378 CP B          ; Is ERIC on top of a fully grown plant?
 64379 RET NZ        ; Return if not
 64380 JP 64242      ; Otherwise make a sound effect, update the SRB, and set
                     ; bits 2 and 3 at #R32749
; ERIC is standing on one of the plant pots in the boys' skool, and has tried
; to step off in the direction of the window.
*64383 CP 91         ; Is ERIC standing on the top-floor plant pot?
 64385 JR NZ,64394   ; Jump if not
 64387 LD B,0        ; This is the y-coordinate of ERIC if he's standing on a
                     ; fully-grown plant on the top floor
 64389 BIT 6,(HL)    ; Is the top-floor window closed?
*64391 RET Z         ; Return if so
 64392 JR 64376      ;
*64394 LD B,7        ; This is the y-coordinate of ERIC if he's standing on a
                     ; fully-grown plant on the middle floor
 64396 BIT 7,(HL)    ; Set the zero flag if the middle-floor window is closed
 64398 JR 64391      ;
; 'Right' wasn't pressed. Was it 'left'?
*64400 CP 80         ; Was 'left' pressed?
 64402 RET NZ        ; Return if not
; 'Left' was pressed.
 64403 BIT 7,(HL)    ; Is ERIC facing right?
 64405 JP NZ,28216   ; Turn ERIC round if so
 64408 INC L         ; Point #REGhl at byte #b1 of ERIC's buffer
 64409 LD A,(HL)     ; #REGa=ERIC's x-coordinate
 64410 EX DE,HL      ;
 64411 INC L         ; #REGhl=#R32756 (which holds the door/window status
                     ; flags)
 64412 CP 135        ; This is the x-coordinate of the plant pot to the right
                     ; of the gate; set the carry flag if ERIC is to the left
                     ; of this, or set the zero flag if he's standing on it
 64414 JR 64363      ;

; Deal with ERIC when he's falling to the floor to land on his feet
;
; Used by the routine at #R63405 when bit 3 at #R32749 is set (by the routine
; at #R64259 or #R64316).
@label=LANDING
c64416 LD HL,32755   ; #R32755 holds ERIC's main action timer
 64419 DEC (HL)      ; Is it time to deal with ERIC yet?
 64420 RET NZ        ; Return if not
 64421 EX DE,HL      ;
@ssub=LD HL,53760+2
 64422 LD HL,53762   ; Point #REGhl at byte #b2 of ERIC's buffer
 64425 INC (HL)      ; Increment ERIC's y-coordinate temporarily (for testing
                     ; purposes)
 64426 CALL 30543    ; Has ERIC reached the floor yet?
 64429 JR NZ,64452   ; Jump if not
 64431 CP 17         ; This is the y-coordinate of the bottom floor
 64433 DEC HL        ; Point #REGhl at byte #b1 of ERIC's buffer
 64434 JR Z,64441    ; Jump if ERIC has landed on the bottom floor
 64436 LD A,(HL)     ; #REGa=ERIC's x-coordinate
 64437 CP 95         ; This is the x-coordinate of the rightmost end of the
                     ; boys' skool
 64439 JR NC,64451   ; Jump if ERIC is outside the boys' skool (and therefore
                     ; cannot land on the top or middle floors)
*64441 EX DE,HL      ; {Reset all of ERIC's status flags at #R32749 and
@ssub=LD L,32749%256
 64442 LD L,237      ; #R32763, indicating that ERIC has landed safely
 64444 LD (HL),0     ;
@ssub=LD L,32763%256
 64446 LD L,251      ;
 64448 LD (HL),0     ;
 64450 EX DE,HL      ; }
*64451 INC L         ; #REGl=#b2
*64452 DEC (HL)      ; Restore ERIC's y-coordinate (we've finished testing)
 64453 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 64456 INC D         ; Increment ERIC's y-coordinate (i.e. make him drop one
                     ; level)
 64457 JP 62231      ; Update ERIC's location, update the SRB, and reset ERIC's
                     ; main action timer at #R32755 to 6

; Deal with ERIC while he's falling (1)
;
; Used by the routine at #R63405 when bit 4 at #R32749 is set (by the routine
; at #R29194, #R29278 or #R64077). On entry, bit 6 at #R32749 is also set if
; ERIC has already begun his descent (i.e. we've already made the first pass
; through this routine).
@label=FALLING
c64460 LD HL,32749   ; #R32749 holds ERIC's secondary status flags
 64463 BIT 6,(HL)    ; Has ERIC already begun his descent?
 64465 JR NZ,64513   ; Jump if so
; ERIC has not begun his descent yet, which means we need to figure out what
; his trajectory will be first.
 64467 LD H,210      ; #b210=ERIC
 64469 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 64472 AND 128       ; #REGa=#b0 if ERIC's facing left, #b128 if facing right
; This entry point is used by the routine at #R29462 when ERIC has jumped from
; the saddle of the bike (with #REGa=#b2 or #b130, and #REGd holding the
; y-coordinate of the spot above ERIC's hand).
*64474 LD B,A        ; Now #REGb=#b0 (or #b2) if ERIC's facing left, #b128 (or
                     ; #b130) if facing right
 64475 LD A,D        ; #REGa=y-coordinate of ERIC (or the spot above his hand)
 64476 CP 17         ; Is ERIC on the bottom floor?
 64478 JR NZ,64482   ; Jump if not
 64480 DEC D         ; #REGd=16
 64481 DEC A         ; #REGa=16
*64482 ADD A,4       ; {Set #REGa=-7+(y-3)%7 if y<17, or -1 if y=17 (where y is
*64484 SUB 7         ; ERIC's y-coordinate); this is the distance (negated)
 64486 JR NC,64484   ; left to travel till ERIC reaches the floor}
 64488 ADD A,166     ; #REGa=#b159-#b165 (normal descent table entry pointer)
 64490 PUSH AF       ; Save this briefly
 64491 LD A,5        ; {Now #REGa=animatory state of ERIC sitting on the floor
 64493 ADD A,B       ; (#AS5(#b5/#b133)) or with his arm up (#AS7(#b7/#b135))}
 64494 CALL 24880    ; Update ERIC's animatory state and location and update
                     ; the SRB
 64497 POP AF        ; Restore the normal descent table entry pointer to #REGa
 64498 LD H,A        ; {Point #REGhl at the appropriate entry
 64499 LD L,252      ; (#REGh=#b159-#b165) in the normal descent table
                     ; (#REGl=#b252) for ERIC's current height above the floor}
; This entry point is used by the routines at #R23843 (with #REGh=#b159,
; #REGl=#b253 or #b254) and #R23859 (with #REGh=#b159, #REGl=#b255).
*64501 LD (32727),HL ; Store the descent table pointer at #R32727
 64504 LD HL,32749   ; #R32749 holds ERIC's secondary status flags
 64507 LD (HL),80    ; Set bits 4 (ERIC is still falling) and 6 (ERIC has begun
                     ; his descent)
@ssub=LD L,32755%256
 64509 LD L,243      ; {Set ERIC's main action timer at #R32755 to 7
 64511 LD (HL),7     ; }
; Deal with the next phase of ERIC's descent.
@ssub=LD L,32755%256
*64513 LD L,243      ; #REGhl=#R32755 (which holds ERIC's main action timer)
 64515 DEC (HL)      ; Is it time to deal with ERIC yet?
 64516 RET NZ        ; Return if not
 64517 LD (HL),3     ; Reset ERIC's action timer to 3
 64519 LD L,216      ; #REGhl=#R32727 (which holds the descent table pointer)
 64521 INC (HL)      ; {Collect the descent table pointer into #REGde
 64522 LD D,(HL)     ;
 64523 DEC L         ;
 64524 LD E,(HL)     ; }
 64525 LD A,(DE)     ; Pick up an entry from the descent table in #REGa
 64526 AND A         ; Has ERIC landed yet?
 64527 JR NZ,64546   ; Jump if not
; ERIC has landed. Time to set ERIC's status flags at #R32763 and #R32749
; appropriately.
@ssub=LD L,32763%256
 64529 LD L,251      ; #REGhl=#R32763 (ERIC's main status flags)
 64531 INC D         ; {Collect the first set of flags from the descent table
 64532 LD A,(DE)     ; }
 64533 LD (HL),A     ; Copy them into #R32763
 64534 INC D         ; {Collect the second set of flags from the descent table
 64535 LD A,(DE)     ; }
@ssub=LD L,32749%256
 64536 LD L,237      ; {Copy them into #R32749
 64538 LD (HL),A     ; }
 64539 AND A         ; Did ERIC jump from the top floor window (bit 5 set)?
 64540 CALL NZ,62770 ; Set MR WACKER on his way to expel ERIC if so
 64543 JP 62147      ; Make a sound effect for ERIC's landing
; ERIC hasn't landed yet. Determine his next move through the air.
*64546 PUSH AF       ; Save the descent table entry briefly
 64547 LD H,210      ; #b210=ERIC
 64549 CALL 25012    ; Update the SRB for ERIC's current animatory state and
                     ; location
 64552 AND 128       ; {#REGb=#b0 if ERIC's facing left, #b128 if facing right
 64554 LD B,A        ; }
 64555 POP AF        ; Restore the descent table entry to #REGa
 64556 LD C,A        ; Copy it to #REGc
 64557 JP 23808      ; The routine continues at #R23808
; #HTML(<span id="tables" />) This routine uses a descent table to guide ERIC
; to the floor. The bits in each table entry have the following significance:
; .
; #TABLE(default,centre)
; { =h Bit(s) | =h Meaning }
; { 0-3       | ERIC's next animatory state }
; { 4         | If set, move backwards one space }
; { 5         | If set, move forwards one space }
; { 6         | If set, descend one level }
; { 7         | If set, ascend one level }
; TABLE#
; .
; The descent tables themselves contain the following entries:
; .
; #HTML(<span id="dt252" />)
; #TABLE(default,,,centre)<nowrap>
; { =c4,h #REGe=#b252 (normal descent) }
; { =h #REGd | =h #REGde | =h (#REGde) | =h Meaning }
; { #b160    | #R41212   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b161    | #R41468   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b162    | #R41724   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b163    | #R41980   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b164    | #R42236   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b165    | #R42492   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b166    | #R42748   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b167    | #R43004   | #b0         | ERIC has landed }
; { #b168    | #R43260   | #b4         | Set bit 2 at #R32763 (ERIC is sitting) }
; { #b169    | #R43516   | #b0         | Reset all bits at #R32749 (ERIC landed safely) }
; TABLE#
; .
; #HTML(<span id="dt253" />)
; #TABLE(default,,,centre,:w)<nowrap>
; { =c4,h #REGe=#b253 (from the bike saddle over the closed skool gate) }
; { =h #REGd | =h #REGde | =h (#REGde) | =h Meaning }
; { #b160    | #R41213   | #b160       | Animatory state #AS0(#b0 or #b128); ascend; move forward }
; { #b161    | #R41469   | #b160       | Animatory state #AS0(#b0 or #b128); ascend; move forward }
; { #b162    | #R41725   | #b160       | Animatory state #AS0(#b0 or #b128); ascend; move forward }
; { #b163    | #R41981   | #b96        | Animatory state #AS0(#b0 or #b128); descend; move forward }
; { #b164    | #R42237   | #b100       | Animatory state #AS4(#b4 or #b132); descend; move forward }
; { #b165    | #R42493   | #b37        | Animatory state #AS5(#b5 or #b133); move forward }
; { #b166    | #R42749   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b167    | #R43005   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b168    | #R43261   | #b0         | ERIC has landed }
; { #b169    | #R43517   | #b4         | Set bit 2 at #R32763 (ERIC is sitting) }
; { #b170    | #R43773   | #b0         | Reset all bits at #R32749 (ERIC landed safely) }
; TABLE#
; .
; #HTML(<span id="dt254" />)
; #TABLE(default,,,centre,:w)<nowrap>
; { =c4,h #REGe=#b254 (from the bike saddle into a wall or closed door) }
; { =h #REGd | =h #REGde | =h (#REGde) | =h Meaning }
; { #b160    | #R41214   | #b160       | Animatory state #AS0(#b0 or #b128); ascend; move forward }
; { #b161    | #R41470   | #b160       | Animatory state #AS0(#b0 or #b128); ascend; move forward }
; { #b162    | #R41726   | #b2         | Animatory state #AS2(#b2 or #b130); ascend }
; { #b163    | #R41982   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b164    | #R42238   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b165    | #R42494   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b166    | #R42750   | #b22        | Animatory state #AS6(#b6 or #b134); move backwards }
; { #b167    | #R43006   | #b0         | ERIC has landed }
; { #b168    | #R43262   | #b4         | Set bit 2 at #R32763 (ERIC is sitting) }
; { #b169    | #R43518   | #b0         | Reset all bits at #R32749 (ERIC landed safely) }
; TABLE#
; .
; #HTML(<span id="dt255" />)
; #TABLE(default,,,centre,:w)<nowrap>
; { =c4,h #REGe=#b255 (from the top-floor window) }
; { =h #REGd | =h #REGde | =h (#REGde) | =h Meaning }
; { #b160    | #R41215   | #b96        | Animatory state #AS0(#b0 or #b128); descend; move forwards }
; { #b161    | #R41471   | #b96        | Animatory state #AS0(#b0 or #b128); descend; move forwards }
; { #b162    | #R41727   | #b96        | Animatory state #AS0(#b0 or #b128); descend; move forwards }
; { #b163    | #R41983   | #b96        | Animatory state #AS0(#b0 or #b128); descend; move forwards }
; { #b164    | #R42239   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b165    | #R42495   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b166    | #R42751   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b167    | #R43007   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b168    | #R43263   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b169    | #R43519   | #b64        | Animatory state #AS0(#b0 or #b128); descend }
; { #b170    | #R43775   | #b68        | Animatory state #AS4(#b4 or #b132); descend }
; { #b171    | #R44031   | #b68        | Animatory state #AS4(#b4 or #b132); descend }
; { #b172    | #R44287   | #b68        | Animatory state #AS4(#b4 or #b132); descend }
; { #b173    | #R44543   | #b5         | Animatory state #AS5(#b5 or #b133) }
; { #b174    | #R44799   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b175    | #R45055   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b176    | #R45311   | #b69        | Animatory state #AS5(#b5 or #b133); descend }
; { #b177    | #R45567   | #b70        | Animatory state #AS6(#b6 or #b134); descend }
; { #b178    | #R45823   | #b0         | ERIC has landed }
; { #b179    | #R46079   | #b64        | Set bit 6 at #R32763 (MR WACKER should expel ERIC) }
; { #b180    | #R46335   | #b32        | Set bit 5 at #R32749 (ERIC fell out of the top-floor window) }
; TABLE#

; Unused
@rsub=!64560
u64560 DEFB 32,32,32,32

; Message #b1: 'NO^STINKBOMBS'
;
; Used by the routine at #R63586.
@label=MSG001
t64564 DEFM "NO"
 64566 DEFB 2            ; Newline
 64567 DEFM "STINKBOMBS"
 64577 DEFB 0            ; End marker

; Message #b2: 'NO^CATAPULTS'
;
; Used by the routine at #R24296.
@label=MSG002
t64578 DEFM "NO"
 64580 DEFB 2           ; Newline
 64581 DEFM "CATAPULTS"
 64590 DEFB 0           ; End marker

; Message #b136: 'NO^WATERPISTOLS'
;
; Used by the routine at #R63915.
@label=MSG136
t64591 DEFM "NO"
 64593 DEFB 2              ; Newline
 64594 DEFM "WATERPISTOLS"
 64606 DEFB 0              ; End marker

; Unused
@rsub=!64607
s64607 DEFB 0

; Message #b82: 'WHEN DID [10] BECOME KING?{9sp}'
;
; Used by the routine at #R61696.
@label=MSG082
t64608 DEFM "WHEN DID "
 64617 DEFB 10              ; #R32652(#b10): '{king}'
 64618 DEFM " BECOME KING?"
 64631 DEFB 4               ; #R59876(#b4): '#SPACE9' (9 spaces)
 64632 DEFB 0               ; End marker

; Message #b78: 'WHERE DOES A[10] LIVE?{9sp}'
;
; Used by the routine at #R61696.
@label=MSG078
t64633 DEFM "WHERE DOES A"
 64645 DEFB 10             ; #R32652(#b10): '{animal}'
 64646 DEFM " LIVE?"
 64652 DEFB 4              ; #R59876(#b4): '#SPACE9' (9 spaces)
 64653 DEFB 0              ; End marker

; Message #b160: 'KILIMANJARO'
;
; Used by the routine at #R61696.
@label=MSG160
t64654 DEFM "KILIMANJARO"
 64665 DEFB 0             ; End marker

; Message #b161: 'KOSCIUSKO'
;
; Used by the routine at #R61696.
@label=MSG161
t64666 DEFM "KOSCIUSKO"
 64675 DEFB 0           ; End marker

; Message #b162: 'McKINLEY'
;
; Used by the routine at #R61696.
@label=MSG162
t64676 DEFM "McKINLEY"
 64684 DEFB 0          ; End marker

; Message #b163: 'KOMMUNISMA'
;
; Used by the routine at #R61696.
@label=MSG163
t64685 DEFM "KOMMUNISMA"
 64695 DEFB 0            ; End marker

; Message #b164: 'HUASCARAN'
;
; Used by the routine at #R61696.
@label=MSG164
t64696 DEFM "HUASCARAN"
 64705 DEFB 0           ; End marker

; Message #b165: 'SAJAMA'
;
; Used by the routine at #R61696.
@label=MSG165
t64706 DEFM "SAJAMA"
 64712 DEFB 0        ; End marker

; Message #b166: 'COOK'
;
; Used by the routine at #R61696.
@label=MSG166
t64713 DEFM "COOK"
 64717 DEFB 0        ; End marker

; Message #b167: 'SNOWDON'
;
; Used by the routine at #R61696.
@label=MSG167
t64718 DEFM "SNOWDON"
 64725 DEFB 0         ; End marker

; Message #b168: 'TANZANIA'
;
; Used by the routine at #R61696.
@label=MSG168
t64726 DEFM "TANZANIA"
 64734 DEFB 0          ; End marker

; Message #b169: 'AUSTRALIA'
;
; Used by the routine at #R61696.
@label=MSG169
t64735 DEFM "AUSTRALIA"
 64744 DEFB 0           ; End marker

; Message #b170: 'ALASKA'
;
; Used by the routine at #R61696.
@label=MSG170
t64745 DEFM "ALASKA"
 64751 DEFB 0        ; End marker

; Message #b171: 'THE USSR'
;
; Used by the routine at #R61696.
@label=MSG171
t64752 DEFM "THE USSR"
 64760 DEFB 0          ; End marker

; Message #b172: 'PERU'
;
; Used by the routine at #R61696.
@label=MSG172
t64761 DEFM "PERU"
 64765 DEFB 0        ; End marker

; Message #b173: 'BOLIVIA'
;
; Used by the routine at #R61696.
@label=MSG173
t64766 DEFM "BOLIVIA"
 64773 DEFB 0         ; End marker

; Message #b174: 'NEW ZEALAND'
;
; Used by the routine at #R61696.
@label=MSG174
t64774 DEFM "NEW ZEALAND"
 64785 DEFB 0             ; End marker

; Message #b175: 'WALES'
;
; Used by the routine at #R61696.
@label=MSG175
t64786 DEFM "WALES"
 64791 DEFB 0        ; End marker

; Message #b192: 'JOHN'
;
; Used by the routine at #R61696.
@label=MSG192
t64792 DEFM "JOHN"
 64796 DEFB 0        ; End marker

; Message #b193: 'STEPHEN'
;
; Used by the routine at #R61696.
@label=MSG193
t64797 DEFM "STEPHEN"
 64804 DEFB 0         ; End marker

; Message #b194: 'JAMES I'
;
; Used by the routine at #R61696.
@label=MSG194
t64805 DEFM "JAMES I"
 64812 DEFB 0         ; End marker

; Message #b195: 'GEORGE V'
;
; Used by the routine at #R61696.
@label=MSG195
t64813 DEFM "GEORGE V"
 64821 DEFB 0          ; End marker

; Message #b196: 'HENRY V'
;
; Used by the routine at #R61696.
@label=MSG196
t64822 DEFM "HENRY V"
 64829 DEFB 0         ; End marker

; Message #b197: 'HENRY VII'
;
; Used by the routine at #R61696.
@label=MSG197
t64830 DEFM "HENRY VII"
 64839 DEFB 0           ; End marker

; Message #b198: 'GEORGE I'
;
; Used by the routine at #R61696.
@label=MSG198
t64840 DEFM "GEORGE I"
 64848 DEFB 0          ; End marker

; Message #b199: 'CHARLES I'
;
; Used by the routine at #R61696.
@label=MSG199
t64849 DEFM "CHARLES I"
 64858 DEFB 0           ; End marker

; Unused
@rsub=!64859
s64859 DEFB 0

; Message #b200: '199'
;
; Used by the routine at #R61696.
@label=MSG200
t64860 DEFM "199"
 64863 DEFB 0        ; End marker

; Message #b201: '135'
;
; Used by the routine at #R61696.
@label=MSG201
t64864 DEFM "135"
 64867 DEFB 0        ; End marker

; Message #b202: '603'
;
; Used by the routine at #R61696.
@label=MSG202
t64868 DEFM "603"
 64871 DEFB 0        ; End marker

; Message #b203: '910'
;
; Used by the routine at #R61696.
@label=MSG203
t64872 DEFM "910"
 64875 DEFB 0        ; End marker

; Message #b204: '413'
;
; Used by the routine at #R61696.
@label=MSG204
t64876 DEFM "413"
 64879 DEFB 0        ; End marker

; Message #b205: '485'
;
; Used by the routine at #R61696.
@label=MSG205
t64880 DEFM "485"
 64883 DEFB 0        ; End marker

; Message #b206: '714'
;
; Used by the routine at #R61696.
@label=MSG206
t64884 DEFM "714"
 64887 DEFB 0        ; End marker

; Message #b207: '625'
;
; Used by the routine at #R61696.
@label=MSG207
t64888 DEFM "625"
 64891 DEFB 0        ; End marker

; Message #b176: ' BADGER'
;
; Used by the routine at #R61696.
@label=MSG176
t64892 DEFM " BADGER"
 64899 DEFB 0         ; End marker

; Message #b177: ' SQUIRREL'
;
; Used by the routine at #R61696.
@label=MSG177
t64900 DEFM " SQUIRREL"
 64909 DEFB 0           ; End marker

; Message #b178: ' BEAVER'
;
; Used by the routine at #R61696.
@label=MSG178
t64910 DEFM " BEAVER"
 64917 DEFB 0         ; End marker

; Message #b179: ' HARE'
;
; Used by the routine at #R61696.
@label=MSG179
t64918 DEFM " HARE"
 64923 DEFB 0        ; End marker

; Message #b180: 'N EAGLE'
;
; Used by the routine at #R61696.
@label=MSG180
t64924 DEFM "N EAGLE"
 64931 DEFB 0         ; End marker

; Message #b181: 'N OTTER'
;
; Used by the routine at #R61696.
@label=MSG181
t64932 DEFM "N OTTER"
 64939 DEFB 0         ; End marker

; Message #b182: ' BEE'
;
; Used by the routine at #R61696.
@label=MSG182
t64940 DEFM " BEE"
 64944 DEFB 0        ; End marker

; Message #b183: ' BUG'
;
; Used by the routine at #R61696.
@label=MSG183
t64945 DEFM " BUG"
 64949 DEFB 0        ; End marker

; Message #b184: ' SET'
;
; Used by the routine at #R61696.
@label=MSG184
t64950 DEFM " SET"
 64954 DEFB 0        ; End marker

; Message #b185: ' DREY'
;
; Used by the routine at #R61696.
@label=MSG185
t64955 DEFM " DREY"
 64960 DEFB 0        ; End marker

; Message #b186: ' LODGE'
;
; Used by the routine at #R61696.
@label=MSG186
t64961 DEFM " LODGE"
 64967 DEFB 0        ; End marker

; Message #b187: ' FORM'
;
; Used by the routine at #R61696.
@label=MSG187
t64968 DEFM " FORM"
 64973 DEFB 0        ; End marker

; Message #b188: 'N EYRIE'
;
; Used by the routine at #R61696.
@label=MSG188
t64974 DEFM "N EYRIE"
 64981 DEFB 0         ; End marker

; Message #b189: ' HOLT'
;
; Used by the routine at #R61696.
@label=MSG189
t64982 DEFM " HOLT"
 64987 DEFB 0        ; End marker

; Message #b190: ' HIVE'
;
; Used by the routine at #R61696.
@label=MSG190
t64988 DEFM " HIVE"
 64993 DEFB 0        ; End marker

; Message #b191: ' BAD PROGRAM'
;
; Used by the routine at #R61696.
@label=MSG191
t64994 DEFM " BAD PROGRAM"
 65006 DEFB 0              ; End marker

; Message #b0: 'ONTO{ THE }^NEXT YEAR'
;
; Used by the routine at #R23907.
@label=MSG000
t65007 DEFM "ONTO"
 65011 DEFB 142         ; #R60006(#b142): ' THE '
 65012 DEFB 2           ; Newline
 65013 DEFM "NEXT YEAR"
 65022 DEFB 0           ; End marker

; Unused
@rsub=!65023
u65023 DEFB 32

@org
; Addresses of messages #b0-#b111 (LSBs)
;
; Used by the routine at #R26318. The LSBs of the addresses of messages
; #b128-#b207 can be found at #R65152.
@label=MSGLSBS1
@ssub=DEFB 65007%256
b65024 DEFB 239      ; Message #R65007(#b0): 'ONTO{ THE }^NEXT YEAR'
@ssub=DEFB 64564%256
 65025 DEFB 52       ; Message #R64564(#b1): 'NO^STINKBOMBS'
@ssub=DEFB 64578%256
 65026 DEFB 66       ; Message #R64578(#b2): 'NO^CATAPULTS'
@ssub=DEFB 59840%256
 65027 DEFB 192      ; Message #R59840(#b3): 'Please Sir I cannot tell a lie .
                     ; . '
@ssub=DEFB 59876%256
 65028 DEFB 228      ; Message #R59876(#b4): '<9 spaces>'
@ssub=DEFB 32650%256
 65029 DEFB 138      ; Message #R32650(#b5): '{lines recipient}/combination
                     ; number or letter/{room}'
@ssub=DEFB 32648%256
 65030 DEFB 136      ; Message #R32648(#b6): '{teacher}'
@ssub=DEFB 32656%256
 65031 DEFB 144      ; Message #R32656(#b7): '{character name}'
@ssub=DEFB 59923%256
 65032 DEFB 19       ; Message #R59923(#b8): 'THE '
@ssub=DEFB 59975%256
 65033 DEFB 71       ; Message #R59975(#b9): 'DON'T '
@ssub=DEFB 32652%256
 65034 DEFB 140      ; Message #R32652(#b10):
                     ; '{mountain}/{king}/{animal}/{verb}'
@ssub=DEFB 32654%256
 65035 DEFB 142      ; Message #R32654(#b11):
                     ; '{country}/{date}/{habitat}/{noun}'
@ssub=DEFB 58112%256
 65036 DEFB 0        ; Message #R58112(#b12): score/lines total/hi-score/number
                     ; of lines being given
@ssub=DEFB 59886%256
 65037 DEFB 238      ; Message #R59886(#b13): '[12]0 LINES^[5]'
@ssub=DEFB 59897%256
 65038 DEFB 249      ; Message #R59897(#b14): '[5]^ '
@ssub=DEFB 59905%256
 65039 DEFB 1        ; Message #R59905(#b15): 'NOW {DON'T }^DO IT AGAIN'
@ssub=DEFB 59928%256
 65040 DEFB 24       ; Message #R59928(#b16): '[6]^[5]'
 65041 DEFB 249      ; Message #R22265(#b17): 'MASTER'
@ssub=DEFB 59944%256
 65042 DEFB 40       ; Message #R59944(#b18): '{Please Sir I cannot tell a lie
                     ; . . }{ERIC} is not here{9sp}'
@ssub=DEFB 59960%256
 65043 DEFB 56       ; Message #R59960(#b19): '{DON'T }BE^LATE AGAIN'
@ssub=DEFB 59982%256
 65044 DEFB 78       ; Message #R59982(#b20): 'STAY TILL I^DISMISS YOU'
@ssub=DEFB 61267%256
 65045 DEFB 83       ; Message #R61267(#b21): 'MR WACKER'
@ssub=DEFB 61280%256
 65046 DEFB 96       ; Message #R61280(#b22): 'MR WITHIT'
@ssub=DEFB 61293%256
 65047 DEFB 109      ; Message #R61293(#b23): 'MR ROCKITT'
@ssub=DEFB 61306%256
 65048 DEFB 122      ; Message #R61306(#b24): 'MR CREAK'
@ssub=DEFB 61319%256
 65049 DEFB 135      ; Message #R61319(#b25): 'MISS TAKE'
@ssub=DEFB 61332%256
 65050 DEFB 148      ; Message #R61332(#b26): 'ALBERT'
@ssub=DEFB 61345%256
 65051 DEFB 161      ; Message #R61345(#b27): 'BOY WANDER'
@ssub=DEFB 61358%256
 65052 DEFB 174      ; Message #R61358(#b28): 'ANGELFACE'
@ssub=DEFB 61371%256
 65053 DEFB 187      ; Message #R61371(#b29): 'EINSTEIN'
@ssub=DEFB 61384%256
 65054 DEFB 200      ; Message #R61384(#b30): 'HAYLEY'
@ssub=DEFB 61397%256
 65055 DEFB 213      ; Message #R61397(#b31): 'ERIC'
@ssub=DEFB 60021%256
 65056 DEFB 117      ; Message #R60021(#b32): 'ARTESIAN^WELLS'
@ssub=DEFB 60036%256
 65057 DEFB 132      ; Message #R60036(#b33): '{THE }DOLDRUMS^ '
@ssub=DEFB 60048%256
 65058 DEFB 144      ; Message #R60048(#b34): 'TASTY^GEYSERS'
@ssub=DEFB 60062%256
 65059 DEFB 158      ; Message #R60062(#b35): '{THE }GREEN^REVOLUTION'
@ssub=DEFB 60080%256
 65060 DEFB 176      ; Message #R60080(#b36): 'TREACLE^MINING'
@ssub=DEFB 60095%256
 65061 DEFB 191      ; Message #R60095(#b37): 'FROG FARMING^ '
@ssub=DEFB 60110%256
 65062 DEFB 206      ; Message #R60110(#b38): 'HEAVY WATER^ '
@ssub=DEFB 60124%256
 65063 DEFB 220      ; Message #R60124(#b39): 'HOLOGRAMS &^LASERS'
@ssub=DEFB 60143%256
 65064 DEFB 239      ; Message #R60143(#b40): 'DNA^ '
@ssub=DEFB 60149%256
 65065 DEFB 245      ; Message #R60149(#b41): 'VAMPIRE^BATS'
@ssub=DEFB 60162%256
 65066 DEFB 2        ; Message #R60162(#b42): 'NUCLEAR^FUSION'
@ssub=DEFB 60177%256
 65067 DEFB 17       ; Message #R60177(#b43): 'BACTERIA^AS PETS'
@ssub=DEFB 60194%256
 65068 DEFB 34       ; Message #R60194(#b44): 'ATTILA{ THE }^HUN'
@ssub=DEFB 60206%256
 65069 DEFB 46       ; Message #R60206(#b45): 'ERIC{ THE }RED^ '
@ssub=DEFB 60217%256
 65070 DEFB 57       ; Message #R60217(#b46): 'NOGGIN{ THE }^NOG'
@ssub=DEFB 60229%256
 65071 DEFB 69       ; Message #R60229(#b47): 'IVAN{ THE }^TERRIBLE'
@ssub=DEFB 60244%256
 65072 DEFB 84       ; Message #R60244(#b48): 'ETHELRED{ THE }^UNREADY'
@ssub=DEFB 60262%256
 65073 DEFB 102      ; Message #R60262(#b49): '{THE }LUDDITES^ '
@ssub=DEFB 60274%256
 65074 DEFB 114      ; Message #R60274(#b50): 'IAMBIC^PENTAMETERS'
@ssub=DEFB 60293%256
 65075 DEFB 133      ; Message #R60293(#b51): 'ELOCUTION^AINT ARF FUN'
@ssub=DEFB 60316%256
 65076 DEFB 156      ; Message #R60316(#b52): 'SUGAR AND^SPICE'
@ssub=DEFB 60332%256
 65077 DEFB 172      ; Message #R60332(#b53): 'TONE POEMS^ '
@ssub=DEFB 60345%256
 65078 DEFB 185      ; Message #R60345(#b54): 'ELEMENTARY^ASTROPHYSICS'
@ssub=DEFB 60369%256
 65079 DEFB 209      ; Message #R60369(#b55): '{THE }BARD OF^AVON'
@ssub=DEFB 60383%256
 65080 DEFB 223      ; Message #R60383(#b56): '{i hate ^}girls'
@ssub=DEFB 60390%256
 65081 DEFB 230      ; Message #R60390(#b57): '{i hate ^}skool'
@ssub=DEFB 60397%256
 65082 DEFB 237      ; Message #R60397(#b58): '{i hate ^}mafs'
@ssub=DEFB 60403%256
 65083 DEFB 243      ; Message #R60403(#b59): '{i hate ^}{MR WACKER}'
@ssub=DEFB 60406%256
 65084 DEFB 246      ; Message #R60406(#b60): '{i hate ^}groan-ups'
@ssub=DEFB 60417%256
 65085 DEFB 1        ; Message #R60417(#b61): 'who's Sam^Cruise?'
@ssub=DEFB 60455%256
 65086 DEFB 39       ; Message #R60455(#b62): 'YOU ARE NOT^ALLOWED HERE'
@ssub=DEFB 59932%256
 65087 DEFB 28       ; Message #R59932(#b63): 'DEMO.MODE^ '
@ssub=DEFB 60493%256
 65088 DEFB 77       ; Message #R60493(#b64): '{GET }OFF^{THE }PLANTS'
@ssub=DEFB 60506%256
 65089 DEFB 90       ; Message #R60506(#b65): '{DON'T }RIDE^BIKES IN HERE'
@ssub=DEFB 60526%256
 65090 DEFB 110      ; Message #R60526(#b66): '{GET }OFF^{THE }FLOOR'
@ssub=DEFB 60538%256
 65091 DEFB 122      ; Message #R60538(#b67): '{GET }BACK^TO SCHOOL'
@ssub=DEFB 60554%256
 65092 DEFB 138      ; Message #R60554(#b68): '{GET }ALONG^NOW'
@ssub=DEFB 60565%256
 65093 DEFB 149      ; Message #R60565(#b69): '{SIT }FACING^{THE }STAGE'
@ssub=DEFB 60580%256
 65094 DEFB 164      ; Message #R60580(#b70): 'NOW^{SIT DOWN }'
@ssub=DEFB 60586%256
 65095 DEFB 170      ; Message #R60586(#b71): 'COME ALONG^YOU MONSTER'
@ssub=DEFB 60609%256
 65096 DEFB 193      ; Message #R60609(#b72): '{DON'T }KEEP^ME WAITING'
@ssub=DEFB 65268%256
 65097 DEFB 244      ; Message #R65268(#b73): '{{Please Sir I cannot tell a lie
                     ; . . }it is }in [11]{9sp}'
@ssub=DEFB 65136%256
 65098 DEFB 112      ; Message #R65136(#b74): 'WHERE IS MT.[10]?{9sp}'
@ssub=DEFB 61418%256
 65099 DEFB 234      ; Message #R61418(#b75): '{{Please Sir I cannot tell a lie
                     ; . . }it is }MT.[10]{9sp}'
@ssub=DEFB 65232%256
 65100 DEFB 208      ; Message #R65232(#b76): 'WHAT IS THE HIGHEST MOUNTAIN IN
                     ; [11]?{9sp}'
@ssub=DEFB 65275%256
 65101 DEFB 251      ; Message #R65275(#b77): '{{Please Sir I cannot tell a lie
                     ; . . }it is }A[11]{9sp}'
@ssub=DEFB 64633%256
 65102 DEFB 121      ; Message #R64633(#b78): 'WHERE DOES A[10] LIVE?{9sp}'
@ssub=DEFB 65531%256
 65103 DEFB 251      ; Message #R65531(#b79): '{{Please Sir I cannot tell a lie
                     ; . . }it is }A[10]{9sp}'
@ssub=DEFB 65512%256
 65104 DEFB 232      ; Message #R65512(#b80): 'WHAT LIVES IN A[11]?{9sp}'
@ssub=DEFB 61425%256
 65105 DEFB 241      ; Message #R61425(#b81): '{Please Sir I cannot tell a lie
                     ; . . }it was in 1[11]{9sp}'
@ssub=DEFB 64608%256
 65106 DEFB 96       ; Message #R64608(#b82): 'WHEN DID [10] BECOME KING?{9sp}'
@ssub=DEFB 65392%256
 65107 DEFB 112      ; Message #R65392(#b83): '{Please Sir I cannot tell a lie
                     ; . . }it was KING [10]{9sp}'
@ssub=DEFB 65488%256
 65108 DEFB 208      ; Message #R65488(#b84): 'WHO BECAME KING IN 1[11]?{9sp}'
@ssub=DEFB 60626%256
 65109 DEFB 210      ; Message #R60626(#b85): '{DON'T }TELL^TALES'
@ssub=DEFB 60638%256
 65110 DEFB 222      ; Message #R60638(#b86): '{DON'T }TOUCH^BLACKBOARDS'
@ssub=DEFB 60657%256
 65111 DEFB 241      ; Message #R60657(#b87): '{Please Sir I cannot tell a lie
                     ; . . }{ERIC} hit me{9sp}'
@ssub=DEFB 60668%256
 65112 DEFB 252      ; Message #R60668(#b88): '{Please Sir I cannot tell a lie
                     ; . . }[7] wrote on the board{9sp}'
@ssub=DEFB 60691%256
 65113 DEFB 19       ; Message #R60691(#b89): 'START REVISING FOR YOUR
                     ; EXAMS{9sp}'
@ssub=DEFB 60722%256
 65114 DEFB 50       ; Message #R60722(#b90): 'START READING AT THE NEXT
                     ; CHAPTER IN YOUR BOOKS{9sp}'
@ssub=DEFB 60771%256
 65115 DEFB 99       ; Message #R60771(#b91): 'WRITE AN ESSAY TITLED 'WHY I
                     ; LOVE SCHOOL'{9sp}'
@ssub=DEFB 60814%256
 65116 DEFB 142      ; Message #R60814(#b92): '{SIT DOWN }CHAPS{9sp}'
@ssub=DEFB 60822%256
 65117 DEFB 150      ; Message #R60822(#b93): '{SIT DOWN }MY CHERUBS{9sp}'
@ssub=DEFB 60835%256
 65118 DEFB 163      ; Message #R60835(#b94): '{SIT DOWN }YOU LITTLE
                     ; ANARCHISTS{9sp}'
@ssub=DEFB 60859%256
 65119 DEFB 187      ; Message #R60859(#b95): '{SIT DOWN }'
@ssub=DEFB 60861%256
 65120 DEFB 189      ; Message #R60861(#b96): 'YOU'RE ALL IN DETENTION UNTIL I
                     ; FIND OUT WHO [10]{ THE }[11]{9sp}'
@ssub=DEFB 60921%256
 65121 DEFB 249      ; Message #R60921(#b97): '{DON'T }HIT^YOUR MATES'
@ssub=DEFB 60937%256
 65122 DEFB 9        ; Message #R60937(#b98): '{MR WACKER}^HE'S ESCAPING'
@ssub=DEFB 60953%256
 65123 DEFB 25       ; Message #R60953(#b99): 'YOU HAVE 10000 LINES{
                     ; {ERIC}{9sp}YOU'RE EXPELLED{9sp}}'
@ssub=DEFB 60975%256
 65124 DEFB 47       ; Message #R60975(#b100): 'YOU ARE NOT A BIRD{
                     ; {ERIC}{9sp}YOU'RE EXPELLED{9sp}}'
 65125 DEFB 244      ; Message #R22260(#b101): '{THE }HEADMASTER'
 65126 DEFB 160      ; Message #R22432(#b102): '{THE }GEOGRAPHY {MASTER}'
 65127 DEFB 173      ; Message #R22445(#b103): '{THE }SCIENCE {MASTER}'
 65128 DEFB 184      ; Message #R22456(#b104): '{THE }HISTORY {MASTER}'
 65129 DEFB 195      ; Message #R22467(#b105): '{THE }HEADMISTRESS '
 65130 DEFB 210      ; Message #R22482(#b106): '{THE }CARETAKER'
 65131 DEFB 221      ; Message #R22493(#b107): '{THE }TEARAWAY'
 65132 DEFB 200      ; Message #R22216(#b108): '{THE }BULLY'
 65133 DEFB 231      ; Message #R22503(#b109): '{THE }SWOT'
 65134 DEFB 237      ; Message #R22509(#b110): '{THE }HEROINE'
 65135 DEFB 246      ; Message #R22518(#b111): 'OUR HERO'

; Message #b74: 'WHERE IS MT.[10]?{9sp}'
;
; Used by the routine at #R61696.
@label=MSG074
t65136 DEFM "WHERE IS MT."
 65148 DEFB 10             ; #R32652(#b10): '{mountain}'
 65149 DEFM "?"
 65150 DEFB 4              ; #R59876(#b4): '#SPACE9' (9 spaces)
 65151 DEFB 0              ; End marker

@org
; Addresses of messages #b128-#b207 (LSBs)
;
; Used by the routine at #R26318. The LSBs of the addresses of messages
; #b0-#b111 can be found at #R65024.
@label=MSGLSBS2
@ssub=DEFB 61015%256
b65152 DEFB 87       ; Message #R61015(#b128): 'PLAYTIME'
@ssub=DEFB 61024%256
 65153 DEFB 96       ; Message #R61024(#b129): 'ASSEMBLY'
@ssub=DEFB 61033%256
 65154 DEFB 105      ; Message #R61033(#b130): 'DINNER'
@ssub=DEFB 61040%256
 65155 DEFB 112      ; Message #R61040(#b131): 'LIBRARY'
@ssub=DEFB 61048%256
 65156 DEFB 120      ; Message #R61048(#b132): 'SCIENCE LAB'
@ssub=DEFB 61060%256
 65157 DEFB 132      ; Message #R61060(#b133): 'BLUE ROOM'
@ssub=DEFB 61070%256
 65158 DEFB 142      ; Message #R61070(#b134): 'YELLOW ROOM'
@ssub=DEFB 61082%256
 65159 DEFB 154      ; Message #R61082(#b135): 'REVISION'
@ssub=DEFB 64591%256
 65160 DEFB 79       ; Message #R64591(#b136): 'NO^WATERPISTOLS'
@ssub=DEFB 61410%256
 65161 DEFB 226      ; Message #R61410(#b137): '{Please Sir I cannot tell a lie
                     ; . . }it is '
@ssub=DEFB 60995%256
 65162 DEFB 67       ; Message #R60995(#b138): ' {ERIC}{9sp}YOU'RE
                     ; EXPELLED{9sp}'
@ssub=DEFB 60435%256
 65163 DEFB 19       ; Message #R60435(#b139): 'SIT DOWN '
@ssub=DEFB 60445%256
 65164 DEFB 29       ; Message #R60445(#b140): 'SIT '
@ssub=DEFB 60450%256
 65165 DEFB 34       ; Message #R60450(#b141): 'GET '
@ssub=DEFB 60006%256
 65166 DEFB 102      ; Message #R60006(#b142): ' THE '
@ssub=DEFB 60012%256
 65167 DEFB 108      ; Message #R60012(#b143): 'i hate ^'
@ssub=DEFB 60911%256
 65168 DEFB 239      ; Message #R60911(#b144): 'KIDNAPPED'
@ssub=DEFB 59901%256
 65169 DEFB 253      ; Message #R59901(#b145): 'ATE'
@ssub=DEFB 61091%256
 65170 DEFB 163      ; Message #R61091(#b146): 'SET FIRE TO'
@ssub=DEFB 61103%256
 65171 DEFB 175      ; Message #R61103(#b147): 'BLEW UP'
@ssub=DEFB 61111%256
 65172 DEFB 183      ; Message #R61111(#b148): 'IS MAKING RUDE PHONE CALLS TO'
@ssub=DEFB 61141%256
 65173 DEFB 213      ; Message #R61141(#b149): 'IS BLACKMAILING'
@ssub=DEFB 61157%256
 65174 DEFB 229      ; Message #R61157(#b150): 'SQUASHED'
@ssub=DEFB 61166%256
 65175 DEFB 238      ; Message #R61166(#b151): 'POISONED'
@ssub=DEFB 61175%256
 65176 DEFB 247      ; Message #R61175(#b152): 'GOLDFISH'
@ssub=DEFB 61184%256
 65177 DEFB 0        ; Message #R61184(#b153): 'SCHOOL CAT'
@ssub=DEFB 61195%256
 65178 DEFB 11       ; Message #R61195(#b154): 'LATIN MASTER'
@ssub=DEFB 61208%256
 65179 DEFB 24       ; Message #R61208(#b155): 'LOLLIPOP LADY'
@ssub=DEFB 61222%256
 65180 DEFB 38       ; Message #R61222(#b156): 'PTA'
@ssub=DEFB 61226%256
 65181 DEFB 42       ; Message #R61226(#b157): 'CARETAKER'S BUDGIE'
@ssub=DEFB 61245%256
 65182 DEFB 61       ; Message #R61245(#b158): 'MILK MONITOR'
@ssub=DEFB 61258%256
 65183 DEFB 74       ; Message #R61258(#b159): 'HEAD BOY'
@ssub=DEFB 64654%256
 65184 DEFB 142      ; Message #R64654(#b160): 'KILIMANJARO'
@ssub=DEFB 64666%256
 65185 DEFB 154      ; Message #R64666(#b161): 'KOSCIUSKO'
@ssub=DEFB 64676%256
 65186 DEFB 164      ; Message #R64676(#b162): 'McKINLEY'
@ssub=DEFB 64685%256
 65187 DEFB 173      ; Message #R64685(#b163): 'KOMMUNISMA'
@ssub=DEFB 64696%256
 65188 DEFB 184      ; Message #R64696(#b164): 'HUASCARAN'
@ssub=DEFB 64706%256
 65189 DEFB 194      ; Message #R64706(#b165): 'SAJAMA'
@ssub=DEFB 64713%256
 65190 DEFB 201      ; Message #R64713(#b166): 'COOK'
@ssub=DEFB 64718%256
 65191 DEFB 206      ; Message #R64718(#b167): 'SNOWDON'
@ssub=DEFB 64726%256
 65192 DEFB 214      ; Message #R64726(#b168): 'TANZANIA'
@ssub=DEFB 64735%256
 65193 DEFB 223      ; Message #R64735(#b169): 'AUSTRALIA'
@ssub=DEFB 64745%256
 65194 DEFB 233      ; Message #R64745(#b170): 'ALASKA'
@ssub=DEFB 64752%256
 65195 DEFB 240      ; Message #R64752(#b171): 'THE USSR'
@ssub=DEFB 64761%256
 65196 DEFB 249      ; Message #R64761(#b172): 'PERU'
@ssub=DEFB 64766%256
 65197 DEFB 254      ; Message #R64766(#b173): 'BOLIVIA'
@ssub=DEFB 64774%256
 65198 DEFB 6        ; Message #R64774(#b174): 'NEW ZEALAND'
@ssub=DEFB 64786%256
 65199 DEFB 18       ; Message #R64786(#b175): 'WALES'
@ssub=DEFB 64892%256
 65200 DEFB 124      ; Message #R64892(#b176): ' BADGER'
@ssub=DEFB 64900%256
 65201 DEFB 132      ; Message #R64900(#b177): ' SQUIRREL'
@ssub=DEFB 64910%256
 65202 DEFB 142      ; Message #R64910(#b178): ' BEAVER'
@ssub=DEFB 64918%256
 65203 DEFB 150      ; Message #R64918(#b179): ' HARE'
@ssub=DEFB 64924%256
 65204 DEFB 156      ; Message #R64924(#b180): 'N EAGLE'
@ssub=DEFB 64932%256
 65205 DEFB 164      ; Message #R64932(#b181): 'N OTTER'
@ssub=DEFB 64940%256
 65206 DEFB 172      ; Message #R64940(#b182): ' BEE'
@ssub=DEFB 64945%256
 65207 DEFB 177      ; Message #R64945(#b183): ' BUG'
@ssub=DEFB 64950%256
 65208 DEFB 182      ; Message #R64950(#b184): ' SET'
@ssub=DEFB 64955%256
 65209 DEFB 187      ; Message #R64955(#b185): ' DREY'
@ssub=DEFB 64961%256
 65210 DEFB 193      ; Message #R64961(#b186): ' LODGE'
@ssub=DEFB 64968%256
 65211 DEFB 200      ; Message #R64968(#b187): ' FORM'
@ssub=DEFB 64974%256
 65212 DEFB 206      ; Message #R64974(#b188): 'N EYRIE'
@ssub=DEFB 64982%256
 65213 DEFB 214      ; Message #R64982(#b189): ' HOLT'
@ssub=DEFB 64988%256
 65214 DEFB 220      ; Message #R64988(#b190): ' HIVE'
@ssub=DEFB 64994%256
 65215 DEFB 226      ; Message #R64994(#b191): ' BAD PROGRAM'
@ssub=DEFB 64792%256
 65216 DEFB 24       ; Message #R64792(#b192): 'JOHN'
@ssub=DEFB 64797%256
 65217 DEFB 29       ; Message #R64797(#b193): 'STEPHEN'
@ssub=DEFB 64805%256
 65218 DEFB 37       ; Message #R64805(#b194): 'JAMES I'
@ssub=DEFB 64813%256
 65219 DEFB 45       ; Message #R64813(#b195): 'GEORGE V'
@ssub=DEFB 64822%256
 65220 DEFB 54       ; Message #R64822(#b196): 'HENRY V'
@ssub=DEFB 64830%256
 65221 DEFB 62       ; Message #R64830(#b197): 'HENRY VII'
@ssub=DEFB 64840%256
 65222 DEFB 72       ; Message #R64840(#b198): 'GEORGE I'
@ssub=DEFB 64849%256
 65223 DEFB 81       ; Message #R64849(#b199): 'CHARLES I'
@ssub=DEFB 64860%256
 65224 DEFB 92       ; Message #R64860(#b200): '199'
@ssub=DEFB 64864%256
 65225 DEFB 96       ; Message #R64864(#b201): '135'
@ssub=DEFB 64868%256
 65226 DEFB 100      ; Message #R64868(#b202): '603'
@ssub=DEFB 64872%256
 65227 DEFB 104      ; Message #R64872(#b203): '910'
@ssub=DEFB 64876%256
 65228 DEFB 108      ; Message #R64876(#b204): '413'
@ssub=DEFB 64880%256
 65229 DEFB 112      ; Message #R64880(#b205): '485'
@ssub=DEFB 64884%256
 65230 DEFB 116      ; Message #R64884(#b206): '714'
@ssub=DEFB 64888%256
 65231 DEFB 120      ; Message #R64888(#b207): '625'

; Message #b76: 'WHAT IS THE HIGHEST MOUNTAIN IN [11]?{9sp}'
;
; Used by the routine at #R61696.
@label=MSG076
t65232 DEFM "WHAT IS THE HIGHEST"
 65251 DEFM " MOUNTAIN IN "
 65264 DEFB 11                    ; #R32654(#b11): '{country}'
 65265 DEFM "?"
 65266 DEFB 4                     ; #R59876(#b4): '#SPACE9' (9 spaces)
 65267 DEFB 0                     ; End marker

; Message #b73: '{{Please Sir I cannot tell a lie . . }it is }in [11]{9sp}'
;
; Used by the routine at #R61696.
@label=MSG073
t65268 DEFB 137      ; #R61410(#b137): '{Please Sir I cannot tell a lie . . }it
                     ; is '
 65269 DEFM "in "
 65272 DEFB 11       ; #R32654(#b11): '{country}'
 65273 DEFB 4        ; #R59876(#b4): '#SPACE9' (9 spaces)
 65274 DEFB 0        ; End marker

; Message #b77: '{{Please Sir I cannot tell a lie . . }it is }A[11]{9sp}'
;
; Used by the routine at #R61696.
@label=MSG077
t65275 DEFB 137      ; #R61410(#b137): '{Please Sir I cannot tell a lie . . }it
                     ; is '
 65276 DEFM "A"
 65277 DEFB 11       ; #R32654(#b11): '{habitat}'
 65278 DEFB 4        ; #R59876(#b4): '#SPACE9' (9 spaces)
 65279 DEFB 0        ; End marker

@org
; Addresses of messages #b0-#b111 (MSBs)
;
; Used by the routine at #R26318. The MSBs of the addresses of messages
; #b128-#b207 can be found at #R65408.
@label=MSGMSBS1
@ssub=DEFB 65007/256
b65280 DEFB 253      ; Message #R65007(#b0): 'ONTO{ THE }^NEXT YEAR'
@ssub=DEFB 64564/256
 65281 DEFB 252      ; Message #R64564(#b1): 'NO^STINKBOMBS'
@ssub=DEFB 64578/256
 65282 DEFB 252      ; Message #R64578(#b2): 'NO^CATAPULTS'
@ssub=DEFB 59840/256
 65283 DEFB 233      ; Message #R59840(#b3): 'Please Sir I cannot tell a lie .
                     ; . '
@ssub=DEFB 59876/256
 65284 DEFB 233      ; Message #R59876(#b4): '<9 spaces>'
@ssub=DEFB 32650/256
 65285 DEFB 127      ; Message #R32650(#b5): '{lines recipient}/combination
                     ; number or letter/{room}'
@ssub=DEFB 32648/256
 65286 DEFB 127      ; Message #R32648(#b6): '{teacher}'
@ssub=DEFB 32656/256
 65287 DEFB 127      ; Message #R32656(#b7): '{character name}'
@ssub=DEFB 59923/256
 65288 DEFB 234      ; Message #R59923(#b8): 'THE '
@ssub=DEFB 59975/256
 65289 DEFB 234      ; Message #R59975(#b9): 'DON'T '
@ssub=DEFB 32652/256
 65290 DEFB 127      ; Message #R32652(#b10):
                     ; '{mountain}/{king}/{animal}/{verb}'
@ssub=DEFB 32654/256
 65291 DEFB 127      ; Message #R32654(#b11):
                     ; '{country}/{date}/{habitat}/{noun}'
@ssub=DEFB 58112/256
 65292 DEFB 227      ; Message #R58112(#b12): score/lines total/hi-score/number
                     ; of lines being given
@ssub=DEFB 59886/256
 65293 DEFB 233      ; Message #R59886(#b13): '[12]0 LINES^[5]'
@ssub=DEFB 59897/256
 65294 DEFB 233      ; Message #R59897(#b14): '[5]^ '
@ssub=DEFB 59905/256
 65295 DEFB 234      ; Message #R59905(#b15): 'NOW {DON'T }^DO IT AGAIN'
@ssub=DEFB 59928/256
 65296 DEFB 234      ; Message #R59928(#b16): '[6]^[5]'
 65297 DEFB 86       ; Message #R22265(#b17): 'MASTER'
@ssub=DEFB 59944/256
 65298 DEFB 234      ; Message #R59944(#b18): '{Please Sir I cannot tell a lie
                     ; . . }{ERIC} is not here{9sp}'
@ssub=DEFB 59960/256
 65299 DEFB 234      ; Message #R59960(#b19): '{DON'T }BE^LATE AGAIN'
@ssub=DEFB 59982/256
 65300 DEFB 234      ; Message #R59982(#b20): 'STAY TILL I^DISMISS YOU'
@ssub=DEFB 61267/256
 65301 DEFB 239      ; Message #R61267(#b21): 'MR WACKER'
@ssub=DEFB 61280/256
 65302 DEFB 239      ; Message #R61280(#b22): 'MR WITHIT'
@ssub=DEFB 61293/256
 65303 DEFB 239      ; Message #R61293(#b23): 'MR ROCKITT'
@ssub=DEFB 61306/256
 65304 DEFB 239      ; Message #R61306(#b24): 'MR CREAK'
@ssub=DEFB 61319/256
 65305 DEFB 239      ; Message #R61319(#b25): 'MISS TAKE'
@ssub=DEFB 61332/256
 65306 DEFB 239      ; Message #R61332(#b26): 'ALBERT'
@ssub=DEFB 61345/256
 65307 DEFB 239      ; Message #R61345(#b27): 'BOY WANDER'
@ssub=DEFB 61358/256
 65308 DEFB 239      ; Message #R61358(#b28): 'ANGELFACE'
@ssub=DEFB 61371/256
 65309 DEFB 239      ; Message #R61371(#b29): 'EINSTEIN'
@ssub=DEFB 61384/256
 65310 DEFB 239      ; Message #R61384(#b30): 'HAYLEY'
@ssub=DEFB 61397/256
 65311 DEFB 239      ; Message #R61397(#b31): 'ERIC'
@ssub=DEFB 60021/256
 65312 DEFB 234      ; Message #R60021(#b32): 'ARTESIAN^WELLS'
@ssub=DEFB 60036/256
 65313 DEFB 234      ; Message #R60036(#b33): '{THE }DOLDRUMS^ '
@ssub=DEFB 60048/256
 65314 DEFB 234      ; Message #R60048(#b34): 'TASTY^GEYSERS'
@ssub=DEFB 60062/256
 65315 DEFB 234      ; Message #R60062(#b35): '{THE }GREEN^REVOLUTION'
@ssub=DEFB 60080/256
 65316 DEFB 234      ; Message #R60080(#b36): 'TREACLE^MINING'
@ssub=DEFB 60095/256
 65317 DEFB 234      ; Message #R60095(#b37): 'FROG FARMING^ '
@ssub=DEFB 60110/256
 65318 DEFB 234      ; Message #R60110(#b38): 'HEAVY WATER^ '
@ssub=DEFB 60124/256
 65319 DEFB 234      ; Message #R60124(#b39): 'HOLOGRAMS &^LASERS'
@ssub=DEFB 60143/256
 65320 DEFB 234      ; Message #R60143(#b40): 'DNA^ '
@ssub=DEFB 60149/256
 65321 DEFB 234      ; Message #R60149(#b41): 'VAMPIRE^BATS'
@ssub=DEFB 60162/256
 65322 DEFB 235      ; Message #R60162(#b42): 'NUCLEAR^FUSION'
@ssub=DEFB 60177/256
 65323 DEFB 235      ; Message #R60177(#b43): 'BACTERIA^AS PETS'
@ssub=DEFB 60194/256
 65324 DEFB 235      ; Message #R60194(#b44): 'ATTILA{ THE }^HUN'
@ssub=DEFB 60206/256
 65325 DEFB 235      ; Message #R60206(#b45): 'ERIC{ THE }RED^ '
@ssub=DEFB 60217/256
 65326 DEFB 235      ; Message #R60217(#b46): 'NOGGIN{ THE }^NOG'
@ssub=DEFB 60229/256
 65327 DEFB 235      ; Message #R60229(#b47): 'IVAN{ THE }^TERRIBLE'
@ssub=DEFB 60244/256
 65328 DEFB 235      ; Message #R60244(#b48): 'ETHELRED{ THE }^UNREADY'
@ssub=DEFB 60262/256
 65329 DEFB 235      ; Message #R60262(#b49): '{THE }LUDDITES^ '
@ssub=DEFB 60274/256
 65330 DEFB 235      ; Message #R60274(#b50): 'IAMBIC^PENTAMETERS'
@ssub=DEFB 60293/256
 65331 DEFB 235      ; Message #R60293(#b51): 'ELOCUTION^AINT ARF FUN'
@ssub=DEFB 60316/256
 65332 DEFB 235      ; Message #R60316(#b52): 'SUGAR AND^SPICE'
@ssub=DEFB 60332/256
 65333 DEFB 235      ; Message #R60332(#b53): 'TONE POEMS^ '
@ssub=DEFB 60345/256
 65334 DEFB 235      ; Message #R60345(#b54): 'ELEMENTARY^ASTROPHYSICS'
@ssub=DEFB 60369/256
 65335 DEFB 235      ; Message #R60369(#b55): '{THE }BARD OF^AVON'
@ssub=DEFB 60383/256
 65336 DEFB 235      ; Message #R60383(#b56): '{i hate ^}girls'
@ssub=DEFB 60390/256
 65337 DEFB 235      ; Message #R60390(#b57): '{i hate ^}skool'
@ssub=DEFB 60397/256
 65338 DEFB 235      ; Message #R60397(#b58): '{i hate ^}mafs'
@ssub=DEFB 60403/256
 65339 DEFB 235      ; Message #R60403(#b59): '{i hate ^}{MR WACKER}'
@ssub=DEFB 60406/256
 65340 DEFB 235      ; Message #R60406(#b60): '{i hate ^}groan-ups'
@ssub=DEFB 60417/256
 65341 DEFB 236      ; Message #R60417(#b61): 'who's Sam^Cruise?'
@ssub=DEFB 60455/256
 65342 DEFB 236      ; Message #R60455(#b62): 'YOU ARE NOT^ALLOWED HERE'
@ssub=DEFB 59932/256
 65343 DEFB 234      ; Message #R59932(#b63): 'DEMO.MODE^ '
@ssub=DEFB 60493/256
 65344 DEFB 236      ; Message #R60493(#b64): '{GET }OFF^{THE }PLANTS'
@ssub=DEFB 60506/256
 65345 DEFB 236      ; Message #R60506(#b65): '{DON'T }RIDE^BIKES IN HERE'
@ssub=DEFB 60526/256
 65346 DEFB 236      ; Message #R60526(#b66): '{GET }OFF^{THE }FLOOR'
@ssub=DEFB 60538/256
 65347 DEFB 236      ; Message #R60538(#b67): '{GET }BACK^TO SCHOOL'
@ssub=DEFB 60554/256
 65348 DEFB 236      ; Message #R60554(#b68): '{GET }ALONG^NOW'
@ssub=DEFB 60565/256
 65349 DEFB 236      ; Message #R60565(#b69): '{SIT }FACING^{THE }STAGE'
@ssub=DEFB 60580/256
 65350 DEFB 236      ; Message #R60580(#b70): 'NOW^{SIT DOWN }'
@ssub=DEFB 60586/256
 65351 DEFB 236      ; Message #R60586(#b71): 'COME ALONG^YOU MONSTER'
@ssub=DEFB 60609/256
 65352 DEFB 236      ; Message #R60609(#b72): '{DON'T }KEEP^ME WAITING'
@ssub=DEFB 65268/256
 65353 DEFB 254      ; Message #R65268(#b73): '{{Please Sir I cannot tell a lie
                     ; . . }it is }in [11]{9sp}'
@ssub=DEFB 65136/256
 65354 DEFB 254      ; Message #R65136(#b74): 'WHERE IS MT.[10]?{9sp}'
@ssub=DEFB 61418/256
 65355 DEFB 239      ; Message #R61418(#b75): '{{Please Sir I cannot tell a lie
                     ; . . }it is }MT.[10]{9sp}'
@ssub=DEFB 65232/256
 65356 DEFB 254      ; Message #R65232(#b76): 'WHAT IS THE HIGHEST MOUNTAIN IN
                     ; [11]?{9sp}'
@ssub=DEFB 65275/256
 65357 DEFB 254      ; Message #R65275(#b77): '{{Please Sir I cannot tell a lie
                     ; . . }it is }A[11]{9sp}'
@ssub=DEFB 64633/256
 65358 DEFB 252      ; Message #R64633(#b78): 'WHERE DOES A[10] LIVE?{9sp}'
@ssub=DEFB 65531/256
 65359 DEFB 255      ; Message #R65531(#b79): '{{Please Sir I cannot tell a lie
                     ; . . }it is }A[10]{9sp}'
@ssub=DEFB 65512/256
 65360 DEFB 255      ; Message #R65512(#b80): 'WHAT LIVES IN A[11]?{9sp}'
@ssub=DEFB 61425/256
 65361 DEFB 239      ; Message #R61425(#b81): '{Please Sir I cannot tell a lie
                     ; . . }it was in 1[11]{9sp}'
@ssub=DEFB 64608/256
 65362 DEFB 252      ; Message #R64608(#b82): 'WHEN DID [10] BECOME KING?{9sp}'
@ssub=DEFB 65392/256
 65363 DEFB 255      ; Message #R65392(#b83): '{Please Sir I cannot tell a lie
                     ; . . }it was KING [10]{9sp}'
@ssub=DEFB 65488/256
 65364 DEFB 255      ; Message #R65488(#b84): 'WHO BECAME KING IN 1[11]?{9sp}'
@ssub=DEFB 60626/256
 65365 DEFB 236      ; Message #R60626(#b85): '{DON'T }TELL^TALES'
@ssub=DEFB 60638/256
 65366 DEFB 236      ; Message #R60638(#b86): '{DON'T }TOUCH^BLACKBOARDS'
@ssub=DEFB 60657/256
 65367 DEFB 236      ; Message #R60657(#b87): '{Please Sir I cannot tell a lie
                     ; . . }{ERIC} hit me{9sp}'
@ssub=DEFB 60668/256
 65368 DEFB 236      ; Message #R60668(#b88): '{Please Sir I cannot tell a lie
                     ; . . }[7] wrote on the board{9sp}'
@ssub=DEFB 60691/256
 65369 DEFB 237      ; Message #R60691(#b89): 'START REVISING FOR YOUR
                     ; EXAMS{9sp}'
@ssub=DEFB 60722/256
 65370 DEFB 237      ; Message #R60722(#b90): 'START READING AT THE NEXT
                     ; CHAPTER IN YOUR BOOKS{9sp}'
@ssub=DEFB 60771/256
 65371 DEFB 237      ; Message #R60771(#b91): 'WRITE AN ESSAY TITLED 'WHY I
                     ; LOVE SCHOOL'{9sp}'
@ssub=DEFB 60814/256
 65372 DEFB 237      ; Message #R60814(#b92): '{SIT DOWN }CHAPS{9sp}'
@ssub=DEFB 60822/256
 65373 DEFB 237      ; Message #R60822(#b93): '{SIT DOWN }MY CHERUBS{9sp}'
@ssub=DEFB 60835/256
 65374 DEFB 237      ; Message #R60835(#b94): '{SIT DOWN }YOU LITTLE
                     ; ANARCHISTS{9sp}'
@ssub=DEFB 60859/256
 65375 DEFB 237      ; Message #R60859(#b95): '{SIT DOWN }'
@ssub=DEFB 60861/256
 65376 DEFB 237      ; Message #R60861(#b96): 'YOU'RE ALL IN DETENTION UNTIL I
                     ; FIND OUT WHO [10]{ THE }[11]{9sp}'
@ssub=DEFB 60921/256
 65377 DEFB 237      ; Message #R60921(#b97): '{DON'T }HIT^YOUR MATES'
@ssub=DEFB 60937/256
 65378 DEFB 238      ; Message #R60937(#b98): '{MR WACKER}^HE'S ESCAPING'
@ssub=DEFB 60953/256
 65379 DEFB 238      ; Message #R60953(#b99): 'YOU HAVE 10000 LINES{
                     ; {ERIC}{9sp}YOU'RE EXPELLED{9sp}}'
@ssub=DEFB 60975/256
 65380 DEFB 238      ; Message #R60975(#b100): 'YOU ARE NOT A BIRD{
                     ; {ERIC}{9sp}YOU'RE EXPELLED{9sp}}'
 65381 DEFB 86       ; Message #R22260(#b101): '{THE }HEADMASTER'
 65382 DEFB 87       ; Message #R22432(#b102): '{THE }GEOGRAPHY {MASTER}'
 65383 DEFB 87       ; Message #R22445(#b103): '{THE }SCIENCE {MASTER}'
 65384 DEFB 87       ; Message #R22456(#b104): '{THE }HISTORY {MASTER}'
 65385 DEFB 87       ; Message #R22467(#b105): '{THE }HEADMISTRESS '
 65386 DEFB 87       ; Message #R22482(#b106): '{THE }CARETAKER'
 65387 DEFB 87       ; Message #R22493(#b107): '{THE }TEARAWAY'
 65388 DEFB 86       ; Message #R22216(#b108): '{THE }BULLY'
 65389 DEFB 87       ; Message #R22503(#b109): '{THE }SWOT'
 65390 DEFB 87       ; Message #R22509(#b110): '{THE }HEROINE'
 65391 DEFB 87       ; Message #R22518(#b111): 'OUR HERO'

; Message #b83: '{Please Sir I cannot tell a lie . . }it was KING [10]{9sp}'
;
; Used by the routine at #R61696.
@label=MSG083
t65392 DEFB 3        ; #R59840(#b3): 'Please Sir I cannot tell a lie . . '
 65393 DEFM "it was"
 65399 DEFM " KING "
 65405 DEFB 10       ; #R32652(#b10): '{king}'
 65406 DEFB 4        ; #R59876(#b4): '#SPACE9' (9 spaces)
 65407 DEFB 0        ; End marker

@org
; Addresses of messages #b128-#b207 (MSBs)
;
; Used by the routine at #R26318. The MSBs of the addresses of messages
; #b0-#b111 can be found at #R65280.
@label=MSGMSBS2
@ssub=DEFB 61015/256
b65408 DEFB 238      ; Message #R61015(#b128): 'PLAYTIME'
@ssub=DEFB 61024/256
 65409 DEFB 238      ; Message #R61024(#b129): 'ASSEMBLY'
@ssub=DEFB 61033/256
 65410 DEFB 238      ; Message #R61033(#b130): 'DINNER'
@ssub=DEFB 61040/256
 65411 DEFB 238      ; Message #R61040(#b131): 'LIBRARY'
@ssub=DEFB 61048/256
 65412 DEFB 238      ; Message #R61048(#b132): 'SCIENCE LAB'
@ssub=DEFB 61060/256
 65413 DEFB 238      ; Message #R61060(#b133): 'BLUE ROOM'
@ssub=DEFB 61070/256
 65414 DEFB 238      ; Message #R61070(#b134): 'YELLOW ROOM'
@ssub=DEFB 61082/256
 65415 DEFB 238      ; Message #R61082(#b135): 'REVISION'
@ssub=DEFB 64591/256
 65416 DEFB 252      ; Message #R64591(#b136): 'NO^WATERPISTOLS'
@ssub=DEFB 61410/256
 65417 DEFB 239      ; Message #R61410(#b137): '{Please Sir I cannot tell a lie
                     ; . . }it is '
@ssub=DEFB 60995/256
 65418 DEFB 238      ; Message #R60995(#b138): ' {ERIC}{9sp}YOU'RE
                     ; EXPELLED{9sp}'
@ssub=DEFB 60435/256
 65419 DEFB 236      ; Message #R60435(#b139): 'SIT DOWN '
@ssub=DEFB 60445/256
 65420 DEFB 236      ; Message #R60445(#b140): 'SIT '
@ssub=DEFB 60450/256
 65421 DEFB 236      ; Message #R60450(#b141): 'GET '
@ssub=DEFB 60006/256
 65422 DEFB 234      ; Message #R60006(#b142): ' THE '
@ssub=DEFB 60012/256
 65423 DEFB 234      ; Message #R60012(#b143): 'i hate ^'
@ssub=DEFB 60911/256
 65424 DEFB 237      ; Message #R60911(#b144): 'KIDNAPPED'
@ssub=DEFB 59901/256
 65425 DEFB 233      ; Message #R59901(#b145): 'ATE'
@ssub=DEFB 61091/256
 65426 DEFB 238      ; Message #R61091(#b146): 'SET FIRE TO'
@ssub=DEFB 61103/256
 65427 DEFB 238      ; Message #R61103(#b147): 'BLEW UP'
@ssub=DEFB 61111/256
 65428 DEFB 238      ; Message #R61111(#b148): 'IS MAKING RUDE PHONE CALLS TO'
@ssub=DEFB 61141/256
 65429 DEFB 238      ; Message #R61141(#b149): 'IS BLACKMAILING'
@ssub=DEFB 61157/256
 65430 DEFB 238      ; Message #R61157(#b150): 'SQUASHED'
@ssub=DEFB 61166/256
 65431 DEFB 238      ; Message #R61166(#b151): 'POISONED'
@ssub=DEFB 61175/256
 65432 DEFB 238      ; Message #R61175(#b152): 'GOLDFISH'
@ssub=DEFB 61184/256
 65433 DEFB 239      ; Message #R61184(#b153): 'SCHOOL CAT'
@ssub=DEFB 61195/256
 65434 DEFB 239      ; Message #R61195(#b154): 'LATIN MASTER'
@ssub=DEFB 61208/256
 65435 DEFB 239      ; Message #R61208(#b155): 'LOLLIPOP LADY'
@ssub=DEFB 61222/256
 65436 DEFB 239      ; Message #R61222(#b156): 'PTA'
@ssub=DEFB 61226/256
 65437 DEFB 239      ; Message #R61226(#b157): 'CARETAKER'S BUDGIE'
@ssub=DEFB 61245/256
 65438 DEFB 239      ; Message #R61245(#b158): 'MILK MONITOR'
@ssub=DEFB 61258/256
 65439 DEFB 239      ; Message #R61258(#b159): 'HEAD BOY'
@ssub=DEFB 64654/256
 65440 DEFB 252      ; Message #R64654(#b160): 'KILIMANJARO'
@ssub=DEFB 64666/256
 65441 DEFB 252      ; Message #R64666(#b161): 'KOSCIUSKO'
@ssub=DEFB 64676/256
 65442 DEFB 252      ; Message #R64676(#b162): 'McKINLEY'
@ssub=DEFB 64685/256
 65443 DEFB 252      ; Message #R64685(#b163): 'KOMMUNISMA'
@ssub=DEFB 64696/256
 65444 DEFB 252      ; Message #R64696(#b164): 'HUASCARAN'
@ssub=DEFB 64706/256
 65445 DEFB 252      ; Message #R64706(#b165): 'SAJAMA'
@ssub=DEFB 64713/256
 65446 DEFB 252      ; Message #R64713(#b166): 'COOK'
@ssub=DEFB 64718/256
 65447 DEFB 252      ; Message #R64718(#b167): 'SNOWDON'
@ssub=DEFB 64726/256
 65448 DEFB 252      ; Message #R64726(#b168): 'TANZANIA'
@ssub=DEFB 64735/256
 65449 DEFB 252      ; Message #R64735(#b169): 'AUSTRALIA'
@ssub=DEFB 64745/256
 65450 DEFB 252      ; Message #R64745(#b170): 'ALASKA'
@ssub=DEFB 64752/256
 65451 DEFB 252      ; Message #R64752(#b171): 'THE USSR'
@ssub=DEFB 64761/256
 65452 DEFB 252      ; Message #R64761(#b172): 'PERU'
@ssub=DEFB 64766/256
 65453 DEFB 252      ; Message #R64766(#b173): 'BOLIVIA'
@ssub=DEFB 64774/256
 65454 DEFB 253      ; Message #R64774(#b174): 'NEW ZEALAND'
@ssub=DEFB 64786/256
 65455 DEFB 253      ; Message #R64786(#b175): 'WALES'
@ssub=DEFB 64892/256
 65456 DEFB 253      ; Message #R64892(#b176): ' BADGER'
@ssub=DEFB 64900/256
 65457 DEFB 253      ; Message #R64900(#b177): ' SQUIRREL'
@ssub=DEFB 64910/256
 65458 DEFB 253      ; Message #R64910(#b178): ' BEAVER'
@ssub=DEFB 64918/256
 65459 DEFB 253      ; Message #R64918(#b179): ' HARE'
@ssub=DEFB 64924/256
 65460 DEFB 253      ; Message #R64924(#b180): 'N EAGLE'
@ssub=DEFB 64932/256
 65461 DEFB 253      ; Message #R64932(#b181): 'N OTTER'
@ssub=DEFB 64940/256
 65462 DEFB 253      ; Message #R64940(#b182): ' BEE'
@ssub=DEFB 64945/256
 65463 DEFB 253      ; Message #R64945(#b183): ' BUG'
@ssub=DEFB 64950/256
 65464 DEFB 253      ; Message #R64950(#b184): ' SET'
@ssub=DEFB 64955/256
 65465 DEFB 253      ; Message #R64955(#b185): ' DREY'
@ssub=DEFB 64961/256
 65466 DEFB 253      ; Message #R64961(#b186): ' LODGE'
@ssub=DEFB 64968/256
 65467 DEFB 253      ; Message #R64968(#b187): ' FORM'
@ssub=DEFB 64974/256
 65468 DEFB 253      ; Message #R64974(#b188): 'N EYRIE'
@ssub=DEFB 64982/256
 65469 DEFB 253      ; Message #R64982(#b189): ' HOLT'
@ssub=DEFB 64988/256
 65470 DEFB 253      ; Message #R64988(#b190): ' HIVE'
@ssub=DEFB 64994/256
 65471 DEFB 253      ; Message #R64994(#b191): ' BAD PROGRAM'
@ssub=DEFB 64792/256
 65472 DEFB 253      ; Message #R64792(#b192): 'JOHN'
@ssub=DEFB 64797/256
 65473 DEFB 253      ; Message #R64797(#b193): 'STEPHEN'
@ssub=DEFB 64805/256
 65474 DEFB 253      ; Message #R64805(#b194): 'JAMES I'
@ssub=DEFB 64813/256
 65475 DEFB 253      ; Message #R64813(#b195): 'GEORGE V'
@ssub=DEFB 64822/256
 65476 DEFB 253      ; Message #R64822(#b196): 'HENRY V'
@ssub=DEFB 64830/256
 65477 DEFB 253      ; Message #R64830(#b197): 'HENRY VII'
@ssub=DEFB 64840/256
 65478 DEFB 253      ; Message #R64840(#b198): 'GEORGE I'
@ssub=DEFB 64849/256
 65479 DEFB 253      ; Message #R64849(#b199): 'CHARLES I'
@ssub=DEFB 64860/256
 65480 DEFB 253      ; Message #R64860(#b200): '199'
@ssub=DEFB 64864/256
 65481 DEFB 253      ; Message #R64864(#b201): '135'
@ssub=DEFB 64868/256
 65482 DEFB 253      ; Message #R64868(#b202): '603'
@ssub=DEFB 64872/256
 65483 DEFB 253      ; Message #R64872(#b203): '910'
@ssub=DEFB 64876/256
 65484 DEFB 253      ; Message #R64876(#b204): '413'
@ssub=DEFB 64880/256
 65485 DEFB 253      ; Message #R64880(#b205): '485'
@ssub=DEFB 64884/256
 65486 DEFB 253      ; Message #R64884(#b206): '714'
@ssub=DEFB 64888/256
 65487 DEFB 253      ; Message #R64888(#b207): '625'

; Message #b84: 'WHO BECAME KING IN 1[11]?{9sp}'
;
; Used by the routine at #R61696.
@label=MSG084
t65488 DEFM "WHO BECAME KING IN 1"
 65508 DEFB 11                     ; #R32654(#b11): '{year}'
 65509 DEFM "?"
 65510 DEFB 4                      ; #R59876(#b4): '#SPACE9' (9 spaces)
 65511 DEFB 0                      ; End marker

; Message #b80: 'WHAT LIVES IN A[11]?{9sp}'
;
; Used by the routine at #R61696.
@label=MSG080
t65512 DEFM "WHAT LIVES IN A"
 65527 DEFB 11                ; #R32654(#b11): '{habitat}'
 65528 DEFM "?"
 65529 DEFB 4                 ; #R59876(#b4): '#SPACE9' (9 spaces)
 65530 DEFB 0                 ; End marker

; Message #b79: '{{Please Sir I cannot tell a lie . . }it is }A[10]{9sp}'
;
; Used by the routine at #R61696.
@label=MSG079
t65531 DEFB 137      ; #R61410(#b137): '{Please Sir I cannot tell a lie . . }it
                     ; is '
 65532 DEFM "A"
 65533 DEFB 10       ; #R32652(#b10): '{animal}'
 65534 DEFB 4        ; #R59876(#b4): '#SPACE9' (9 spaces)
 65535 DEFB 0        ; End marker
